<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面试总结</title>
    <url>/posts/27a6e4df/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="230212a5b9287ba3ac0f09f6f5dc6d03239e52a6253072c4b7680799f8a2c9fe">8c5eb7d299eb8204d1aa11d5321f19700bde7466d01a38a5b681f79fa8d76718fbf71273053d7bb8c7c94615027d4cb4118b37efb8fdfcec9f89889dcf39d920470dd6c15238c876bf2eff015441b15eb27b33edcc1aacc83d582fa6e030ced5512b8ad5cb40dd0192b1d456111bbcdf3bf01661a904b18861ace98e707b3823ef5c2ec5fc5e09a2f9396f178b0ca00fc2fd1c51587694cece07ef80ce626b0d73b7a9099c091236025a6a6aacf9a56cba13a36e86d74e5251a487ff623dcb7f2067208efa273562a7286297f8a71ce142331533d7410badf3ec3fcf4672492244e18885b8ec525e7ceda2540c58048f444bfd2cf3f0f26e607663eebd042b7441da4ee6098085ebf3cebbb584a843b5aabba2070f176cce547fb3df240fd3964e15435f54d2c62acceccaefe4a8c3eef2deb28c0f355dc50124bfe18cae2cfd037c525e4c5a285487782e7e51231abac4e9cbe02688de1a317ca9fea4ac380176401b96a15e9c11812eca7f6b3a43fcea1fc98e099d70d0322796281c5745677d57860b93c32a34dc2988fc1790619d57dad305387ddf0d701693d0c57f6056a2df5995850b11a11e3410c8e0551f8d00e136645e7486720a025da7858b0d0b1d85895fe2ecc3a122e699f57963a211b7560dc35ee5f784c6719e4fd93cff2edf47dfffbf9599442c121359320f6896712edeb06e4bc8db54d9444c04e33e98b5a4c55446fa7f8592da1247e16a1fd87b481d9315878f578c1d3df6d5845f89cf0740a4cf403d34520f16790813efdfb0154db40769ae97d13937f9412ac2f6e33be80614fb0dfd028430297df0ffbf19068222f14aa55b6259596ef40586fa</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>待分类</tag>
      </tags>
  </entry>
  <entry>
    <title>test_code</title>
    <url>/posts/726c1a57/</url>
    <content><![CDATA[<h2 id="三维dp"><a class="markdownIt-Anchor" href="#三维dp"></a> 三维dp</h2>
<h3 id="dqwdwq"><a class="markdownIt-Anchor" href="#dqwdwq"></a> dqwdwq</h3>
<p><mark>dwqd</mark><br />
<img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/3-1Q113131610L7.gif" alt="顾客购物程序的类图" /></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mi>x</mi><mrow><mi>s</mi><mi>d</mi></mrow></msubsup><mfrac><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>+</mo><mi>a</mi></mrow><mi>α</mi></mfrac></mrow><annotation encoding="application/x-tex">\sum_{x}^{sd}{\frac{a}{b}+{a}\over{\alpha}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.37988em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.03488em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5508em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<a id="more"></a>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><msup><mi>b</mi><mn>2</mn></msup><mspace width="1em"/><mo stretchy="false">(</mo><mi>b</mi><mi>ω</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a*b^2 \quad (b \omega)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">)</span></span></span></span></span></p>
<p><code>dwqdnjk</code><br />
<code>test for ms code</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Descripttion: 111 https://leetcode.com/discuss/interview-question/1488563/microsoft-on-campus-2021-india</span></span><br><span class="line"><span class="comment"> * @version: </span></span><br><span class="line"><span class="comment"> * @Author: xxh</span></span><br><span class="line"><span class="comment"> * @Date: 2022-01-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;dp;</span><br><span class="line"><span class="type">int</span> dd[<span class="number">100</span>][<span class="number">2</span>][<span class="number">200</span>]=&#123;<span class="number">-1</span>&#125; ;<span class="comment">//pos - -x/y - value</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; h,<span class="type">int</span> pos,<span class="type">int</span> rx,<span class="type">int</span> ry,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;=n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[pos][<span class="built_in">abs</span>(rx-ry)]!=<span class="number">-1</span>)<span class="keyword">return</span> dp[pos][<span class="built_in">abs</span>(rx-ry)];</span><br><span class="line">    <span class="type">int</span> v1=<span class="number">0</span>,v2=<span class="number">0</span>,v3=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(rx&gt;=h[pos])v1 = <span class="number">1</span>+<span class="built_in">dfs</span>(h,pos+<span class="number">1</span>,rx-h[pos],ry,n);</span><br><span class="line">    <span class="keyword">if</span>(ry&gt;=h[pos]) v2 = <span class="number">1</span>+<span class="built_in">dfs</span>(h,pos+<span class="number">1</span>,rx,ry-h[pos],n);</span><br><span class="line">    v3=<span class="built_in">dfs</span>(h,pos+<span class="number">1</span>,rx,ry,n);</span><br><span class="line">    dp[pos][<span class="built_in">abs</span>(rx-ry)] = <span class="built_in">max</span>(v1,<span class="built_in">max</span>(v2,v3));</span><br><span class="line">    <span class="keyword">return</span> dp[pos][<span class="built_in">abs</span>(rx-ry)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; h,<span class="type">int</span> pos,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    dd[<span class="number">0</span>][<span class="number">0</span>][x]=dd[<span class="number">0</span>][<span class="number">1</span>][y]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = x;j&gt;=h[i<span class="number">-1</span>];j--) <span class="comment">//x</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=y;k&gt;=<span class="number">0</span>;k--)&#123; <span class="comment">//y</span></span><br><span class="line">                <span class="keyword">if</span>(dd[i<span class="number">-1</span>][<span class="number">1</span>][k]!=<span class="number">-1</span>&amp;&amp;dd[i<span class="number">-1</span>][<span class="number">0</span>][j]!=<span class="number">-1</span>) &#123;</span><br><span class="line">                    dd[i][<span class="number">0</span>][j-h[i<span class="number">-1</span>]]= <span class="built_in">max</span>(dd[i<span class="number">-1</span>][<span class="number">1</span>][k]+dd[i<span class="number">-1</span>][<span class="number">0</span>][j]+<span class="number">1</span>,dd[i][<span class="number">0</span>][j-h[i<span class="number">-1</span>]]);</span><br><span class="line">                    cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;dd[i][<span class="number">0</span>][j-h[i<span class="number">-1</span>]]&lt;&lt;endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y;j&gt;=h[i<span class="number">-1</span>];j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=x;k&gt;=<span class="number">0</span>;k--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dd[i<span class="number">-1</span>][<span class="number">0</span>][k]!=<span class="number">-1</span>&amp;&amp;dd[i<span class="number">-1</span>][<span class="number">1</span>][j]!=<span class="number">-1</span>) dd[i][<span class="number">1</span>][j-h[i<span class="number">-1</span>]] = <span class="built_in">max</span>(dd[i<span class="number">-1</span>][<span class="number">0</span>][k]+dd[i<span class="number">-1</span>][<span class="number">1</span>][j]+<span class="number">1</span>,dd[i][<span class="number">1</span>][j-h[i<span class="number">-1</span>]]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mx =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dd[n-1][0][i];</span></span><br><span class="line">        mx = <span class="built_in">max</span>(mx,dd[n<span class="number">-1</span>][<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> my = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;dd[n-1][1][i];</span></span><br><span class="line">        my = <span class="built_in">max</span>(my,dd[n<span class="number">-1</span>][<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(mx,my);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;h=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">8</span>,y=<span class="number">9</span>;</span><br><span class="line">    <span class="type">int</span> n = h.<span class="built_in">size</span>();</span><br><span class="line">    dp.<span class="built_in">resize</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">max</span>(x,y)+<span class="number">1</span>,<span class="number">-1</span>));</span><br><span class="line">    <span class="built_in">memset</span>(dd,<span class="number">0xff</span>,<span class="built_in">sizeof</span>(dd));</span><br><span class="line">    cout&lt;&lt;<span class="built_in">f</span>(h,<span class="number">0</span>,x,y,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>test</category>
        <category>面试题</category>
        <category>MS</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>dp</tag>
        <tag>ms面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/posts/98e6f621/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4c5582a6b7c5da8f706f0b2529e2c252377cb5dc55ea771f6102d0f793eda5a5">8c5eb7d299eb8204d1aa11d5321f19709a60da0fde5d858f6efa5c0b10cf9aa646d1e0f14867aa9f78f43de519d2988ce99bbe5072edcd4adde9727a27e7fa68610ee1f30906b33fd1a7d1a9bece5326110be27a8ef748600603611e1c6fae239037baf7f6391627719794c3766a6debe252c0a5fc85f18f7e9c6069f53a59159ba08f79f4c503d4b8fcb3d1aae28047f594dda015734bacc12b82321455dfa7990e8ea56f67692246524ceee2047e96b3e8db152c123b0b56c706316fd8485d7c2a843957757db9a2b3a5d43435a3e8d282f54bca3a1360af1cc511bf74d24c0f74656def08b5c84bd4ab5008ac10441ba19dfbc48ffb5ad51384c5c436a5f6125f33172aeb154818d1ff348d05ca0b177878ddb19968ffcd0533f66b55aae34248698c61087205a914874a0e94cc6bdb76a54585d83c67e8a7a4bc3a2ceef4864f202e69c3a82e104d51396644e4c3b2e2bbc1c4e130f2ff0ac1c41727b6d39a9feb068e9d9d261812d5317bd991358ec417ff10e8205bbed86bad422873263902f07fe8b393c0d2ffa0aeb0cbbfae</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>hexo setups</title>
    <url>/posts/b763a0b1/</url>
    <content><![CDATA[<h3 id="centos-关闭selinux及防火墙"><a class="markdownIt-Anchor" href="#centos-关闭selinux及防火墙"></a> centos 关闭SELINUX及防火墙</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">setenforce 0</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">systemctl <span class="built_in">disable</span> firewalld &amp;&amp; systemctl stop firewalld</span></span><br></pre></td></tr></table></figure>
<h3 id="创建tags-caterories"><a class="markdownIt-Anchor" href="#创建tags-caterories"></a> 创建tags、caterories</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">hexo new page <span class="string">&quot;tags&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>修改source/tags/index.md</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017-07-10 16:36:26</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>修改themes/next/_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"><span class="attr">home:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">archives:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">/categories/</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">/tags/</span></span><br></pre></td></tr></table></figure>
<p>tags 不存在多级,cat可以多级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Sports, Baseball]</span><br><span class="line">- Baseball</span><br><span class="line">tags:</span><br><span class="line">- Injury</span><br><span class="line">- Fight</span><br><span class="line">- Shocking</span><br></pre></td></tr></table></figure>
<p>使用katex</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">npm un hexo-renderer-marked</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">npm i hexo-renderer-markdown-it-plus</span></span><br></pre></td></tr></table></figure>
<h3 id="修改自定义样式"><a class="markdownIt-Anchor" href="#修改自定义样式"></a> 修改自定义样式</h3>
<p><code>css/_common/outline/footer/index.styl</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.footer-inner</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="博客加密"><a class="markdownIt-Anchor" href="#博客加密"></a> 博客加密</h3>
<p><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">npm install --save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure>
<h4 id="对博文加密"><a class="markdownIt-Anchor" href="#对博文加密"></a> 对博文加密</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">作为日记加密</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:12:21</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">mikemessi</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line"><span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line"><span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure>
<h4 id="对tag加密"><a class="markdownIt-Anchor" href="#对tag加密"></a> 对tag加密</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码A</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">tagName</span>, <span class="attr">password:</span> <span class="string">密码B</span>&#125;</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p>
<p><code>zhumeng2021.2\node_modules\hexo-theme-next\layout\_macro\sidebar.njk</code> 对sidebar修改</p>
<p><code>zhumeng2021.2\node_modules\hexo-theme-next\layout\_partials\post\post-related.njk</code>对related修改</p>
<p><code>C:\Users\42273\Desktop\hexo_blog\zhumeng2021.2\.deploy_git\js\schemes\muse.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (event.<span class="property">target</span>.<span class="title function_">matches</span>(<span class="string">&#x27;img.medium-zoom-image&#x27;</span>)) &#123;<span class="comment">// 删去clickingBlankPart||</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">hideSidebar</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<hr />
<p>TODO:</p>
<ol>
<li>
<h4 id="configuring-favicon"><a class="markdownIt-Anchor" href="#configuring-favicon"></a> Configuring Favicon</h4>
</li>
</ol>
]]></content>
      <categories>
        <category>环境搭建</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/xb1zvO3Xlc0GJ5vgfDqV8g">https://mp.weixin.qq.com/s/xb1zvO3Xlc0GJ5vgfDqV8g</a></p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Ay4y1i7Z6">https://www.bilibili.com/video/BV1Ay4y1i7Z6</a></p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220414145321206.png" alt="image-20220414145321206" /></p>
<p><a href="https://www.codewars.com/kata/search/cpp">https://www.codewars.com/kata/search/cpp</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>cpp博客汇总</title>
    <url>/posts/26f80d45/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2460c6807de3abebe8d9342e8ea9beb17d2f4b7b1a1b52cacbbffcacccf00fbc">8c5eb7d299eb8204d1aa11d5321f1970e0702a4fa338dd1cc8a5f32ab3a638a5dfe317204ae956e092fc50bb1621e8ea08b755118da87b6340cee979b850f15388d6b14e6dbb75303be94c0ae2e6ad26eb3a75cba0265537fed2ef182633562904235b0284ffd7da53a6cf40d6b9c9fdc57a1e72ccf74d82d900b007763c0fa11de3777c888133a80ebcf422c34dfceae367d70f6a29a85a916cf04b3ed2f82e39c22edf7e9b771c8233d0f91391246a1e2fe94cbacbf87db9838b9f2728379bef603a45e2ed6216996d4b704363154b5f085310c168d8cef1ae628e02152199d3c03ecc29743403dc46d4e49a0a301e1a3c29b31e3fa265b4c2e087ec50fb4e76c610b062d13c66e4fb3aafc9607bf1d80cf99d5b2971c7018efd7dcd56b5cbfca40b40c14765c2678f6eacf3aa573ebdd0f2a6d0ae6e6d17abb7d558532c85</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp资源</category>
      </categories>
      <tags>
        <tag>cpp资源</tag>
      </tags>
  </entry>
  <entry>
    <title>decltype关键字</title>
    <url>/posts/6d46b940/</url>
    <content><![CDATA[<h3 id="decltype关键字"><a class="markdownIt-Anchor" href="#decltype关键字"></a> decltype关键字</h3>
<p><mark>decltype</mark>被称作类型说明符，作用是选择并返回操作数的数据类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sum类型就是函数f返回的类型</span></span><br><span class="line"><span class="keyword">decltype</span>(<span class="built_in">f</span>()) sum = x;</span><br></pre></td></tr></table></figure>
<p>解决难以拼写的类型名，有以下两个方案：</p>
<ol>
<li>使用类型别名技术</li>
<li>使用auto和decltype</li>
</ol>
<h3 id="工作原理"><a class="markdownIt-Anchor" href="#工作原理"></a> 工作原理</h3>
<p><mark>decltype</mark>不会计算表达式的值，编译器分析表达式并得到它的类型。</p>
<p>函数调用也算一种表达式，因此不必担心在使用deltype时执行了函数。</p>
<h3 id="decltype变量"><a class="markdownIt-Anchor" href="#decltype变量"></a> decltype+变量</h3>
<p>根据表达式的定义，单独使用一个变量，相当于一个最简单的表达式。</p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>unordered_map set自定义对象的hash</title>
    <url>/posts/f17b9616/</url>
    <content><![CDATA[<p><code>unordered_map/set</code>使用hash进行存储，因此存储自定义对象前，必须：</p>
<ol>
<li><code>hash</code>告知此容器如何生成hash值，</li>
<li><code>equal_to</code>告知容器当出现hash冲突时，如何区分hash值相同的不同对象。</li>
</ol>
<p><strong>具体有4种方案</strong>：</p>
<ol>
<li>定义两个函数对象ObjectHash，以及ObjectCmp，分别实现对Object进行hash，以及比较两个对象是否相同。</li>
<li>定义两个普通的函数，实现hash以及对象比较，与<mark>1</mark>不同的是普通函数在构建<code>unordered_map/set</code>时，需要decltype来减少声明它的类型（或手动指定，<code>std::function &lt;size_t(const Object&amp;)&gt;</code>说明hash类型，<code>std::function &lt;bool(const Object&amp;, const Object&amp;)&gt;</code>说明比较cmp类型</li>
<li>定义两个lambda表达式（仿函数），与2类似</li>
<li>对Object对象进行模板特化定制</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># unordered_set的声明</span><br><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Key</span>, <span class="comment">//类型</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hash</span> = std::hash&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Allocator = std::allocator&lt;Key&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> unordered_set;</span><br><span class="line"></span><br><span class="line">#unordered_map的声明</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Key</span>, <span class="comment">//key的类型</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Ty</span>, <span class="comment">//val的类型</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Hash</span> = std::hash&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Pred = std::equal_to&lt;Key&gt;,</span><br><span class="line">    <span class="keyword">class</span> Alloc = std::allocator&lt;std::pair&lt;<span class="type">const</span> Key, Ty&gt; &gt; &gt;</span><br><span class="line">    <span class="keyword">class</span> unordered_map;</span><br><span class="line">&gt; <span class="keyword">class</span> <span class="title class_">unordered_map</span></span><br></pre></td></tr></table></figure>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 自定义<span class="keyword">struct</span>的类型</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="定义两个函数对象"><a class="markdownIt-Anchor" href="#定义两个函数对象"></a> 定义两个函数对象</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ObjectHash</span>&#123;</span><br><span class="line">	<span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Object&amp; rhs)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hash</span>&lt;string&gt;()(rhs.name) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(rhs.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ObjectCmp</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Object&amp; lhs,<span class="type">const</span> Object&amp; rhs)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.val ==rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;Object,ObjectHash,ObjectCmp&gt; objects;</span><br></pre></td></tr></table></figure>
<h4 id="定义两个普通函数重写hash和cmp"><a class="markdownIt-Anchor" href="#定义两个普通函数重写hash和cmp"></a> 定义两个普通函数，重写hash和cmp</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">ObjectHash</span><span class="params">(<span class="type">const</span> Object&amp; rhs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>&lt;string&gt;()(rhs.name) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(rhs.val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ObjectCmp</span><span class="params">(<span class="type">const</span> Object&amp; lhs, <span class="type">const</span> Record&amp; rhs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.val == rhs.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">unordered_set&lt;Object , <span class="title">decltype</span><span class="params">(&amp;ObjectHash)</span>, <span class="title">decltype</span><span class="params">(&amp;ObjectCmp)</span>&gt; <span class="title">objects</span><span class="params">(<span class="number">0</span>,ObjectHash,ObjectCmp)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="使用lambda函数"><a class="markdownIt-Anchor" href="#使用lambda函数"></a> 使用lambda函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> ObjectHash = [](<span class="type">const</span> Object&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">hash</span>&lt;string&gt;(rhs.name) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(rhs.val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> ObjectCmp = [](<span class="type">const</span> Object&amp; lhs, <span class="type">const</span> Object&amp; rhs)&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name==rhs.name &amp;&amp; lhs.val==rhs.val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;Object, <span class="keyword">decltype</span>(&amp;ObjectHash),<span class="keyword">decltype</span>(&amp;ObjectCmp)&gt;<span class="built_in">object</span>(<span class="number">0</span>,ObjectHash,ObjectCmp);</span><br></pre></td></tr></table></figure>
<h4 id="模板定制重写"><a class="markdownIt-Anchor" href="#模板定制重写"></a> 模板定制重写</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意namespace ，必要时可以指定namespace std&#123;&#125;</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash</span>&lt;Object&gt;&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Object&amp; rhs)</span><span class="type">const</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">hash</span>&lt;string&gt;()(rhs.name) ^ <span class="built_in">hash</span>&lt;<span class="type">int</span>&gt;()(rhs.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">equal_to</span>&lt;Object&gt;&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Object&amp; lhs,<span class="type">const</span> Object&amp; rhs)</span><span class="type">const</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.val == rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;Object&gt; objects;</span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a href="https://blog.csdn.net/lpstudy/article/details/54345050">https://blog.csdn.net/lpstudy/article/details/54345050</a></p>
<p><a href="https://blog.csdn.net/y109y/article/details/82669620">https://blog.csdn.net/y109y/article/details/82669620</a></p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式</title>
    <url>/posts/e9ee750c/</url>
    <content><![CDATA[<h3 id="声明lambda表达式"><a class="markdownIt-Anchor" href="#声明lambda表达式"></a> 声明Lambda表达式</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture list] (params list) <span class="keyword">mutable</span> exception-&gt; <span class="keyword">return</span> type &#123; function body &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>capture list： 捕获外部变量的列表</li>
<li>params list：形参列表</li>
<li>mutable指示符：是否可以修改捕获的变量</li>
<li>exception：异常设定</li>
<li>return type：返回类型</li>
<li>function body：函数体</li>
</ol>
<h4 id="格式1"><a class="markdownIt-Anchor" href="#格式1"></a> 格式1</h4>
<p>声明了const类型的表达式，函数中不能修改捕获列表中的值（引用传递除外）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture list] (params list) -&gt; <span class="keyword">return</span> type &#123; function body &#125;</span><br></pre></td></tr></table></figure>
<h4 id="格式2"><a class="markdownIt-Anchor" href="#格式2"></a> 格式2</h4>
<p>省略了返回值的类型，编译器自动推断，若：</p>
<ol>
<li>
<p>含有return，则类型由return决定</p>
</li>
<li>
<p>不含有return，类型为void</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture list] (params list)  &#123; function body &#125;</span><br></pre></td></tr></table></figure>
<h4 id="格式3"><a class="markdownIt-Anchor" href="#格式3"></a> 格式3</h4>
<p>无参数函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture list] &#123; function body &#125;</span><br></pre></td></tr></table></figure>
<h3 id="捕获外部变量"><a class="markdownIt-Anchor" href="#捕获外部变量"></a> 捕获外部变量</h3>
<table>
<thead>
<tr>
<th>捕获形式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>不捕获任何外部变量</td>
</tr>
<tr>
<td>[变量名…]</td>
<td>默认以值形式捕获多个指定外部变量，如果引用捕获，需要显式声明<code>&amp;</code>说明符</td>
</tr>
<tr>
<td>[this]</td>
<td>值形式捕获this指针</td>
</tr>
<tr>
<td>[=]</td>
<td>值形式捕获外部所有变量</td>
</tr>
<tr>
<td>[&amp;]</td>
<td>引用方式捕获外部所有变量</td>
</tr>
<tr>
<td>[=,&amp;x]</td>
<td>变量x用引用方式捕获，其余变量以传值形式捕获</td>
</tr>
<tr>
<td>[&amp;,x]</td>
<td>变量x以传值方式捕获，其余变量以引用形式捕获</td>
</tr>
</tbody>
</table>
<h3 id="lambda表达式的参数"><a class="markdownIt-Anchor" href="#lambda表达式的参数"></a> Lambda表达式的参数</h3>
<ol>
<li>参数列表中不能用默认参数</li>
<li>不支持可变长度的参数</li>
<li>所有参数必须有参数名</li>
</ol>
<h3 id="lambda表达式的类型"><a class="markdownIt-Anchor" href="#lambda表达式的类型"></a> Lambda表达式的类型</h3>
<p>Lambda 函数是一个依赖于实现的函数对象类型,这个类型的名字只有编译器知道. 如果用户想把 lambda 函数做为一个参数来传递, 那么形参的类型必须是模板类型或者必须能创建一个 <mark>std::function</mark> 类似的对象去捕获 lambda 函数.使用 auto 关键字可以帮助存储 Lambda 函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> my_lambda_func = [&amp;](<span class="type">int</span> x) &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> my_onheap_lambda_func = <span class="keyword">new</span> <span class="built_in">auto</span>([=](<span class="type">int</span> x) &#123; <span class="comment">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">eval</span><span class="params">(std::function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f,<span class="type">double</span> x=<span class="number">2.0</span>)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">f</span>(x);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	std::function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; f0 = [](<span class="type">double</span> x)&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;;</span><br><span class="line">    <span class="keyword">auto</span> f1 = [](<span class="type">double</span> x)&#123;<span class="keyword">return</span> x;&#125;;</span><br><span class="line">    <span class="keyword">decltype</span>(f0) fa[<span class="number">3</span>]=&#123;f0,f1,[](<span class="type">double</span> x)&#123;<span class="keyword">return</span> x*x;&#125;&#125;;</span><br><span class="line">    std::vector&lt;std::function&lt;<span class="type">double</span>(<span class="type">double</span>)&gt; &gt; fv = &#123;f0,f1&#125;;</span><br><span class="line">    fv.<span class="built_in">push_back</span>([](<span class="type">double</span> x)&#123;<span class="keyword">return</span> x*x;&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;fv.<span class="built_in">size</span>();i++) std::cout&lt;&lt;fv[i](<span class="number">2.0</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个没有指定任何捕获的 lambda 函数,可以显式转换成一个具有相同声明形式函数指针.所以,像下面这样做是合法的:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> a_lambda_func = [](<span class="type">int</span> x) &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="built_in">void</span> (*func_ptr)(<span class="type">int</span>) = a_lambda_func;</span><br><span class="line"><span class="built_in">func_ptr</span>(<span class="number">4</span>); <span class="comment">// calls the lambda</span></span><br></pre></td></tr></table></figure>
<p>但是<mark>带捕获的lambda是不能够作为函数指针进行参数传递</mark>。</p>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html">https://www.cnblogs.com/DswCnblog/p/5629165.html</a></p>
<p><a href="https://www.cnblogs.com/jimodetiantang/p/9016826.html">https://www.cnblogs.com/jimodetiantang/p/9016826.html</a></p>
<p>关于捕获和不捕获的lambda转换汇编代码分析</p>
<p><a href="https://blog.csdn.net/qq_36419971/article/details/117396419">https://blog.csdn.net/qq_36419971/article/details/117396419</a></p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>mit6824资料</title>
    <url>/posts/95c75b37/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="74da128c4084c05434e008e189d91f877d6a9354241c0237e92d87095d30c8eb">8c5eb7d299eb8204d1aa11d5321f197029bbe6b37791615d7e699c579162fc78ad005ba504a4ca39f73eb818509bbb1c288599d42485cefef2468656257ccfe7382a1d1457f120d1688cb1a5b937ae9e9aded0e681b0b0971d1d99219def421b89da83a0c39f01712f0cbbfd84f3927bd9339db263b85bc483e0da9b0b63eca169900d20fcc7fea902cebabe2820ad087eed611347c804f95387be498cbc1d14cf82a28bd329867533598a85d153de0727b7d517de91d4e0d65e13ea73e9d355bc78185d38d2be6c7b01936688bd4df6c145cdcf14df67d8758e5d5d01a5e4e52e94d29a414f891e29b016e640f008e82d29cb133a87546f74a0dfb53b31a1e79530ae6ff0b834940ef88a2d8c06fcd9dbedbce328e5bbe14e09cca4ddcd791b2534c447b339374d8717120cffd0ee70688b231953f4d033a7f5fbd764c883389268916672aa072a567a952bda2dd13f4c25fbbe062da8b5f2612a04fc8d6f3c7395c7e0c80f99b7b7f44521a86aab545f5a37b4228d1eaff99912bc29a6ee3b505e40aee395ccd1d6f28a33d43e9e02780f836252d8cfb678b436f1657217650a15db8d53ec6502a71452869794045034ab3b5d490b7393e988931ad1eea0ded12072b7f78e8eeb7e462c5de63da6788025343da63058266fbaafe58e0e1e00eef18cdd0e3c2afeffc52b584c4a14f24b7fa41a420f7b453e8f24f8643e369854f08a098fda4572dab5a781ce67b828c47ac42c76d54261b39433f6f7c815b71d317e829c87481019445aa101a20e7e933c7e41a083255ad5e5f46cba868ed3a0a6bc52a5e7a136b5183ce18c15936ef5c09e53abd6575d8ea3fbdd293b1450</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>待分类</tag>
      </tags>
  </entry>
  <entry>
    <title>芯片产业</title>
    <url>/posts/32f0679a/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="40f8afc08ede65bc46b5df16913dd2cad259f246f5bf1f6b02174ab260325219">8c5eb7d299eb8204d1aa11d5321f197029bbe6b37791615d7e699c579162fc78a6aef68c70f593e3ffb7947b75bc08ad56061db2567174439bb3dcad83720cc34f9d67820356560288c80a2e5e5dc60bedf922d773c5eac904ea5a25b249bc68c12a4c9456b1ca32056967b0da84fd9d2c92bd1b5fb31c14d5cb16e4dc473b24d04c9465ca4e47e2eed73d41522e01b9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>待分类</tag>
      </tags>
  </entry>
  <entry>
    <title>cs144-ch1</title>
    <url>/posts/805529a8/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="networked-applications"><a class="markdownIt-Anchor" href="#networked-applications"></a> Networked Applications</h2>
<h4 id="比特流模型"><a class="markdownIt-Anchor" href="#比特流模型"></a> 比特流模型</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318152200902.png" alt="image-20220318152200902" /></p>
<h4 id="http模型"><a class="markdownIt-Anchor" href="#http模型"></a> http模型</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318152641831.png" alt="image-20220318152641831" /></p>
<h4 id="p2p模型"><a class="markdownIt-Anchor" href="#p2p模型"></a> p2p模型</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318152619453.png" alt="image-20220318152619453" /></p>
<h4 id="skype模型-三种状况"><a class="markdownIt-Anchor" href="#skype模型-三种状况"></a> skype模型-三种状况</h4>
<p>直接连接</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318153304482.png" alt="image-20220318153304482" /></p>
<p>在NAT后用反向连接</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318153146377.png" alt="image-20220318153146377" /></p>
<p>双向NAT使用中继</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318153121386.png" alt="image-20220318153121386" /></p>
<h2 id="四层模型"><a class="markdownIt-Anchor" href="#四层模型"></a> 四层模型</h2>
<h4 id="链路层"><a class="markdownIt-Anchor" href="#链路层"></a> 链路层</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318162058992.png" alt="image-20220318162058992" /></p>
<h4 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318162137464.png" alt="image-20220318162137464" /></p>
<h4 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h4>
<p>上层服务保证可靠传输</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318162619921.png" alt="image-20220318162619921" /></p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318163107201.png" alt="image-20220318163107201" /></p>
<h2 id="ip服务模型"><a class="markdownIt-Anchor" href="#ip服务模型"></a> IP服务模型</h2>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318163525312.png" alt="image-20220318163525312" /></p>
<p>ip报文细节：</p>
<ol>
<li>添加生存时间TTL避免无限循环</li>
<li>分解过大的数据包</li>
<li>使用标头校验避免送到错误的网络</li>
<li>ipv4 - 32bit， ipv6 - 128bit</li>
</ol>
<p>tcp协议值为6 udp协议值为17</p>
<h2 id="包的生命"><a class="markdownIt-Anchor" href="#包的生命"></a> 包的生命</h2>
<p>TCP的建立： SYN-SYNACK-ACK</p>
<p>路由表：最长前缀匹配</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220318165804613.png" alt="image-20220318165804613" /></p>
<h2 id="包交换"><a class="markdownIt-Anchor" href="#包交换"></a> 包交换</h2>
<h3 id="什么是包交换"><a class="markdownIt-Anchor" href="#什么是包交换"></a> 什么是包交换</h3>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220320221552174.png" alt="image-20220320221552174" /></p>
<h4 id="两种结果"><a class="markdownIt-Anchor" href="#两种结果"></a> 两种结果</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220320224220186.png" alt="image-20220320224220186" /></p>
<h4 id="1-不需要沿路的交换机状态"><a class="markdownIt-Anchor" href="#1-不需要沿路的交换机状态"></a> 1. 不需要沿路的交换机状态</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220320224355014.png" alt="image-20220320224355014" /></p>
<h4 id="2-有效的链路分享"><a class="markdownIt-Anchor" href="#2-有效的链路分享"></a> 2. 有效的链路分享</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220320225318124.png" alt="image-20220320225318124" /></p>
<h2 id="分层的原则"><a class="markdownIt-Anchor" href="#分层的原则"></a> 分层的原则</h2>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220320230038600.png" alt="image-20220320230038600" /></p>
<p>分层的原因：</p>
<ol>
<li>模块化</li>
<li>定义明确的服务</li>
<li>重用</li>
<li>关注点分离</li>
<li>持续的优化</li>
<li>对等通信</li>
</ol>
<h2 id="封装的架构原理"><a class="markdownIt-Anchor" href="#封装的架构原理"></a> 封装的架构原理</h2>
<p>封装是层之间数据包交换的结果</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220408111705156.png" alt="image-20220408111705156" /></p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220408113000194.png" alt="image-20220408113000194" /></p>
<h2 id="内存字节序和包格式"><a class="markdownIt-Anchor" href="#内存字节序和包格式"></a> 内存，字节序和包格式</h2>
]]></content>
  </entry>
  <entry>
    <title>cpp中的const</title>
    <url>/posts/4bf79020/</url>
    <content><![CDATA[<h2 id="cpp中的const更像是编译阶段的define"><a class="markdownIt-Anchor" href="#cpp中的const更像是编译阶段的define"></a> cpp中的<code>const</code>更像是编译阶段的<code>#define</code></h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n = m;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在C语言中，编译器会先在m的内存中取出数据赋值给n；</p>
<p>在cpp中，编译器直接将10赋值给n，没有读取内存的操作。</p>
</blockquote>
<p><code>#define</code>是在预处理阶段替换，常量是在编译阶段替换。提高了程序执行的效率，缺点是不能反映内存变化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> n =<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = (<span class="type">int</span>*)&amp;n;</span><br><span class="line">(*p) = <span class="number">100</span>;</span><br><span class="line">cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(*p)&lt;&lt;endl;</span><br><span class="line"><span class="comment">//输出为10 100</span></span><br></pre></td></tr></table></figure>
<p>将代码放到<code>.c</code>文件中，以C语言的方式编译，运行结果为<code>99</code>。再将代码放到<code>.cpp</code>文件中，以C<ins>的方式编译，运行结果就变成了<code>10</code>。这种差异正是由于C和C</ins>对 const 的处理方式不同造成的。</p>
<h2 id="cpp中全局const变量可见范围是当前文件"><a class="markdownIt-Anchor" href="#cpp中全局const变量可见范围是当前文件"></a> cpp中全局const变量可见范围是当前文件</h2>
<p>c语言中：<mark>全局变量的作用域是当前文件，但是在其他文件中也是可见的，使用<code>extern</code>声明后就可以使用</mark></p>
<p>cpp语言中：<mark>const变量的作用域是当前文件，在其他文件中不可见</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//const int n = 10;</span></span><br><span class="line"><span class="comment">//int n = 10;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main: %d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> n; </span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;module: %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若为<code>int n=10;</code>无论cpp还是c语言均编译通过</p>
<p>若为<code>const int n=10;</code>，cpp编译失败（因为对其他文件不可见），c语言编译通过。</p>
</blockquote>
<h3 id="将const变量放入头文件中"><a class="markdownIt-Anchor" href="#将const变量放入头文件中"></a> 将const变量放入头文件中</h3>
<p><mark>由于 C++ 中全局 const 变量的可见范围仅限于当前源文件，所以可以将它放在头文件中，这样即使头文件被包含多次也不会出错</mark></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module.h</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;module.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;module: %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;module.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">func</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main: %d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">g++ main.cpp module.cpp -o main &amp;&amp; main</span></span><br><span class="line"></span><br><span class="line">module: 10</span><br><span class="line">main: 10</span><br></pre></td></tr></table></figure>
<p>C和C<ins>中全局 const 变量的作用域相同，都是当前文件，不同的是它们的可见范围：C语言中 const 全局变量的可见范围是整个程序，在其他文件中使用 extern 声明后就可以使用；而C</ins>中 const 全局变量的可见范围仅限于当前文件，在其他文件中不可见，所以它可以定义在头文件中，多次引入后也不会出错。</p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp中指定默认参数的位置</title>
    <url>/posts/27cf2ee3/</url>
    <content><![CDATA[<p>wu</p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法原题</title>
    <url>/posts/2ab056a/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea66a692122228343ae2e9df07946b63ccaf71dfbd0031c613e17ae919d132a7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>encryptalg</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux使用</title>
    <url>/posts/cb2d43c3/</url>
    <content><![CDATA[<h2 id="安装tmux"><a class="markdownIt-Anchor" href="#安装tmux"></a> 安装tmux</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install tmux </span><br></pre></td></tr></table></figure>
<h2 id="使用手册"><a class="markdownIt-Anchor" href="#使用手册"></a> 使用手册</h2>
<h3 id="启动与退出"><a class="markdownIt-Anchor" href="#启动与退出"></a> 启动与退出</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmux #进入tmux窗口</span><br><span class="line">exit / ctrl + d # 退出tmux  session</span><br></pre></td></tr></table></figure>
<h3 id="前缀建"><a class="markdownIt-Anchor" href="#前缀建"></a> 前缀建</h3>
<p>默认的前缀键是<code>ctrl+b</code>，帮助命令的快捷键是<code>ctrl+b ?</code> 按下<code>esc</code>或者<code>q</code>可以退出帮助。</p>
<h3 id="会话管理"><a class="markdownIt-Anchor" href="#会话管理"></a> 会话管理</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">新建会话</span></span><br><span class="line">tmux new -s &lt;session-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">分离会话</span></span><br><span class="line">tmux detach </span><br><span class="line"><span class="meta">#</span><span class="language-bash">显示当前所有的tmux会话</span></span><br><span class="line">tmux ls</span><br><span class="line">tmux list-session</span><br><span class="line"><span class="meta">#</span><span class="language-bash">接入会话</span></span><br><span class="line">tmux attach -t &lt;session-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">杀死会话</span></span><br><span class="line">tmux kill-session -t &lt;session-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">切换会话</span></span><br><span class="line">tmux switch -t &lt;session-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">重命名会话</span></span><br><span class="line">tmux rename-session -t &lt;old-session-name&gt; &lt;new-session-name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="会话管理快捷键"><a class="markdownIt-Anchor" href="#会话管理快捷键"></a> 会话管理快捷键</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctrl+b d  #分离当前会话</span><br><span class="line">ctrl+b s  #列出所有会话</span><br><span class="line">ctrl+b $  #重命名当前会话</span><br></pre></td></tr></table></figure>
<h3 id="窗格操作"><a class="markdownIt-Anchor" href="#窗格操作"></a> 窗格操作</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">划分上下两个窗格</span></span><br><span class="line">tmux split-window</span><br><span class="line"><span class="meta">#</span><span class="language-bash">划分左右两个窗格</span></span><br><span class="line">tmux split-window -h</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">光标切换到上方窗格</span></span><br><span class="line">tmux select-pane -U</span><br><span class="line"><span class="meta">#</span><span class="language-bash">光标切换到下方窗格</span></span><br><span class="line">tmux select-pane -D</span><br><span class="line"><span class="meta">#</span><span class="language-bash">光标切换到左边窗格</span></span><br><span class="line">tmux select-pane -L</span><br><span class="line"><span class="meta">#</span><span class="language-bash">光标切换到右边窗格</span> </span><br><span class="line">tmux select-pane -R</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">当前窗格上移</span></span><br><span class="line">tmux swap-pane -U</span><br><span class="line"><span class="meta">#</span><span class="language-bash">当前窗格下移</span></span><br><span class="line">tmux swap-pane -D</span><br></pre></td></tr></table></figure>
<h3 id="窗格管理快捷键"><a class="markdownIt-Anchor" href="#窗格管理快捷键"></a> 窗格管理快捷键</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Ctrl+b %：划分左右两个窗格。</span><br><span class="line">Ctrl+b &quot;：划分上下两个窗格。</span><br><span class="line">Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓。</span><br><span class="line">Ctrl+b ;：光标切换到上一个窗格。</span><br><span class="line">Ctrl+b o：光标切换到下一个窗格。</span><br><span class="line">Ctrl+b &#123;：当前窗格与上一个窗格交换位置。</span><br><span class="line">Ctrl+b &#125;：当前窗格与下一个窗格交换位置。</span><br><span class="line">Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。</span><br><span class="line">Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。</span><br><span class="line">Ctrl+b x：关闭当前窗格。</span><br><span class="line">Ctrl+b !：将当前窗格拆分为一个独立窗口。</span><br><span class="line">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。</span><br><span class="line">Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小。</span><br><span class="line">Ctrl+b q：显示窗格编号。</span><br></pre></td></tr></table></figure>
<h3 id="窗口管理-session-window"><a class="markdownIt-Anchor" href="#窗口管理-session-window"></a> 窗口管理 session &gt; window</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">新建窗口</span></span><br><span class="line">tmux new-window -n &lt;window-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">切换窗口</span></span><br><span class="line">tmux select-window -t &lt;window-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">重命名窗口</span></span><br><span class="line">tmux rename-window &lt;new-name&gt;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">显示窗口</span></span><br><span class="line">tmux list-window</span><br><span class="line"><span class="meta">#</span><span class="language-bash">杀死窗口</span></span><br><span class="line">tmux kill-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220505140742182.png" alt="image-20220505140742182" /></p>
]]></content>
      <categories>
        <category>cpp</category>
        <category>cpp语法</category>
      </categories>
      <tags>
        <tag>cpp语法</tag>
      </tags>
  </entry>
  <entry>
    <title>面试-基础算法</title>
    <url>/posts/627b00bf/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8deddd77b0f6d4be70900d5c524b8e885627cc74597c2c7fd235ca8744f98734"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>encryptalg</tag>
        <tag>面试算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分算法详解</title>
    <url>/posts/99d9a14f/</url>
    <content><![CDATA[<h3 id="常规二分写法"><a class="markdownIt-Anchor" href="#常规二分写法"></a> 常规二分写法</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = l+ (r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid = target) <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;target)l = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p>每次搜索的区间是[l,r]，因此l和r均不包含mid</p>
<h3 id="查找target的右边界"><a class="markdownIt-Anchor" href="#查找target的右边界"></a> 查找&lt;=target的右边界</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + (r-l&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;=target) l = mid;</span><br><span class="line">    <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure>
<ol>
<li>收缩区间，查找右边界指在&lt;=target的区间中取最大的一个，即&gt;target的区间舍去，<code>r = mid-1</code>，每次搜索的区间是(left,right]</li>
<li>因为<code>mid = l+(r-l&gt;&gt;1)</code>总是落在(l+r)/2的右侧，<code>l=mid</code>可以保证<code>l</code>始终在左区间的右边界上</li>
<li>当终止条件<code>l==r</code>时，r右边的区域为&gt;target，l为&lt;=target的区域的右边界。</li>
</ol>
<h4 id="一个其他版本的查找右侧边界代码"><a class="markdownIt-Anchor" href="#一个其他版本的查找右侧边界代码"></a> 一个其他版本的查找右侧边界代码</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = l+ (r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;target) r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l<span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
<p>其实就是<mark>查找 &gt;target的左边界</mark>  版本，返回left-1即<mark>为&lt;=tareget的右边界</mark></p>
<h3 id="查找target的左边界"><a class="markdownIt-Anchor" href="#查找target的左边界"></a> 查找&gt;=target的左边界</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">    <span class="type">int</span> mid = l+(r-l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=target)r = mid;</span><br><span class="line">    <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br></pre></td></tr></table></figure>
<ol>
<li>收缩区间，查找左边界指在&gt;=target的区间中取最小的一个，即&lt;target的区间舍去，<code>l = mid+1</code>，每次搜索的区间是[left,right)</li>
<li>因为mid = l+(r-l&gt;&gt;1)总是落在(l+r)/2的左侧，<code>r = mid</code>可以保证<code>r</code>始终落在右区间的左边界上</li>
<li>当终止条件<code>l==r</code>时，l左侧的部分全部为&lt;target，r为&lt;=target的区域的右边界</li>
</ol>
<h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h3>
<h4 id="搜索旋转排序数组"><a class="markdownIt-Anchor" href="#搜索旋转排序数组"></a> <a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l  = <span class="number">0</span>,r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> num = nums[mid],numl = nums[l],numr = nums[r];</span><br><span class="line">            <span class="keyword">if</span>(num==target)<span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(numl&lt;=num)&#123; <span class="comment">//左边有序</span></span><br><span class="line">                <span class="keyword">if</span>(target&lt;num &amp;&amp; target&gt;=numl)r = mid<span class="number">-1</span>; <span class="comment">//在左边</span></span><br><span class="line">                <span class="keyword">else</span> l = mid+<span class="number">1</span>; <span class="comment">//在右边</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">//右边有序</span></span><br><span class="line">                <span class="keyword">if</span>(target&gt;num &amp;&amp; target&lt;=numr ) l = mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="寻找峰值"><a class="markdownIt-Anchor" href="#寻找峰值"></a> <a href="https://leetcode-cn.com/problems/find-peak-element/">寻找峰值</a></h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findPeakElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l + (r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> prev,next;</span><br><span class="line">            <span class="keyword">if</span>(mid<span class="number">-1</span>&gt;=<span class="number">0</span>)prev = nums[mid<span class="number">-1</span>];<span class="keyword">else</span> prev = INT_MIN;</span><br><span class="line">            <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>)next = nums[mid+<span class="number">1</span>];<span class="keyword">else</span> next = INT_MIN;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;prev&amp;&amp;nums[mid]&gt;next)<span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=prev) l = mid+<span class="number">1</span>; <span class="keyword">else</span> r = mid<span class="number">-1</span>; <span class="comment">//等号给INT_MIN 上坡必有顶</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="在排序数组中查找元素的第一个和最后一个位置"><a class="markdownIt-Anchor" href="#在排序数组中查找元素的第一个和最后一个位置"></a> <a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></h4>
<p>lower_bound(start,end,target) 返回&gt;=target的第一个位置地址</p>
<p>upper_bound(start,end,target) 返回&gt;target的第一个位置地址</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方法使用双二分法，注意边界</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;<span class="type">int</span> left=<span class="number">-1</span>,right = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123; <span class="comment">//&gt;=target的左边界</span></span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;=target)r = mid;<span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&gt;<span class="number">0</span>) <span class="keyword">if</span>( nums[l]!=target)left = <span class="number">-1</span>;<span class="keyword">else</span> left=l;</span><br><span class="line">        l =<span class="number">0</span>;r = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//&lt;=target的右边界</span></span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;=target)l = mid;<span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&gt;<span class="number">0</span> )<span class="keyword">if</span>(nums[l]!=target)right = <span class="number">-1</span>;<span class="keyword">else</span> right=l;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res; res.<span class="built_in">push_back</span>(left);res.<span class="built_in">push_back</span>(right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种方法使用STL，注意边界</span></span><br><span class="line">        left = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),target)-nums.<span class="built_in">begin</span>();</span><br><span class="line">        right = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>(),target)-nums.<span class="built_in">begin</span>()<span class="number">-1</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res2;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&gt;<span class="number">0</span> &amp;&amp; left&gt;=<span class="number">0</span> &amp;&amp;left &lt;nums.<span class="built_in">size</span>() &amp;&amp; nums[left]==target)res2.<span class="built_in">push_back</span>(left);<span class="keyword">else</span> res2.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&gt;<span class="number">0</span> &amp;&amp; right &gt;=<span class="number">0</span> &amp;&amp; right &lt; nums.<span class="built_in">size</span>() &amp;&amp;nums[right]==target)res2.<span class="built_in">push_back</span>(right);<span class="keyword">else</span> res2.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="找到-k-个最接近的元素"><a class="markdownIt-Anchor" href="#找到-k-个最接近的元素"></a> <a href="https://leetcode-cn.com/problems/find-k-closest-elements/">找到 K 个最接近的元素</a></h4>
<h4 id="方法一二分查找双指针"><a class="markdownIt-Anchor" href="#方法一二分查找双指针"></a> 方法一：二分查找+双指针</h4>
<p>首先找到&lt;=target的右边界，确定pos之后</p>
<p>令left=pos-k,right=pos+k，则我们需要的数字必定在这里面。分成三类讨论</p>
<ol>
<li>left&lt;0 left++</li>
<li>right&gt;=arr.size() right–;</li>
<li>在数组范围内，判断x与arr[left]和arr[right]的距离，left近就right–否则left++</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = arr.<span class="built_in">size</span>()<span class="number">-1</span>;<span class="type">int</span> pos;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;<span class="comment">//&lt;=target 的右边界</span></span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]&lt;=x)l=mid;<span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pos = l;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> left = pos-k,right=pos+k;</span><br><span class="line">        <span class="keyword">while</span>(right-left+<span class="number">1</span>&gt;k)&#123;</span><br><span class="line">            <span class="keyword">if</span>(left&lt;<span class="number">0</span>)&#123;left++;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(right&gt;=arr.<span class="built_in">size</span>())&#123;right--;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[right]-x&gt;=x-arr[left])right--;<span class="keyword">else</span> left++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;=right;i++)res.<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="方法二排序"><a class="markdownIt-Anchor" href="#方法二排序"></a> 方法二：排序</h4>
<p>将所有的数字和x的差值进行排序，取前k个。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//static int target;</span></span><br><span class="line">    <span class="comment">//static bool cmp(int &amp; a,int &amp; b)&#123;</span></span><br><span class="line">        <span class="comment">//if(abs(a-target)==abs(b-target))return a&lt;b;else return abs(a-target)&lt;abs(b-target);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findClosestElements</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(),arr.<span class="built_in">end</span>(),[&amp;x](<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)-&gt; <span class="type">bool</span>&#123;<span class="keyword">if</span>(<span class="built_in">abs</span>(a-x)==<span class="built_in">abs</span>(b-x))<span class="keyword">return</span> a&lt;b; <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">abs</span>(a-x)&lt;<span class="built_in">abs</span>(b-x);&#125;);     <span class="comment">//函数式编程，省去了引用static变量和初始化的过程</span></span><br><span class="line">        <span class="comment">//this-&gt;target = x;</span></span><br><span class="line">        <span class="comment">//sort(arr.begin(),arr.end(),cmp);</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)res.<span class="built_in">emplace_back</span>(arr[i]);</span><br><span class="line">        <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//int Solution::target = 0; //类型 所在类：：静态变量名 = 初始化值。</span></span><br></pre></td></tr></table></figure>
<h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3>
<p><a href="https://www.cnblogs.com/kyoner/p/11080078.html">https://www.cnblogs.com/kyoner/p/11080078.html</a></p>
<p>《蓝书》P26</p>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
        <category>二分</category>
      </categories>
      <tags>
        <tag>encryptalg</tag>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql学习</title>
    <url>/posts/f45dd5a4/</url>
    <content><![CDATA[<h2 id="ddl"><a class="markdownIt-Anchor" href="#ddl"></a> DDL</h2>
<h3 id="数据库操作"><a class="markdownIt-Anchor" href="#数据库操作"></a> 数据库操作</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看所有的数据库</span><br><span class="line">show databases;</span><br><span class="line">#创建数据库</span><br><span class="line">create database [if not exists] mydb1 [charset=utf8]</span><br><span class="line">#切换数据库</span><br><span class="line">use mydb1;</span><br><span class="line">#删除数据库</span><br><span class="line">drop database [if exists] mydb1;</span><br><span class="line">#修改数据库编码</span><br><span class="line">alter database mydb1 character set utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="表创建-格式"><a class="markdownIt-Anchor" href="#表创建-格式"></a> 表创建-格式</h3>
<p>创建表是创建一张空表，指定这个表的名字，有几列，每一列的名字，以及存储的数据类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table [if not exists] 表名(</span><br><span class="line">	字段名1 类型 [(宽度)] [约束条件] [commet &#x27;字段说明&#x27;],</span><br><span class="line">	字段名2 类型 [(宽度)] [约束条件] [commet &#x27;字段说明&#x27;]</span><br><span class="line">)[表的一些设置];</span><br></pre></td></tr></table></figure>
<h3 id="数据类型-数字类型"><a class="markdownIt-Anchor" href="#数据类型-数字类型"></a> 数据类型-数字类型</h3>
<p>数据类型是指在创建表的时候为表中字段指定数据类型，只有数据符合类型要求才能存储。分为：数值类型、日期和时间类型、字符串类型</p>
<h4 id="数值类型"><a class="markdownIt-Anchor" href="#数值类型"></a> 数值类型</h4>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1B</td>
<td>-128~127</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2B</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>INT</td>
<td>4B</td>
<td>-2<sup>31</sup>-1 ~ 2<sup>32</sup></td>
</tr>
<tr>
<td>BIGINT</td>
<td>8B</td>
<td>-2<sup>63</sup>-1 ~ 2<sup>63</sup></td>
</tr>
<tr>
<td>FLOAT</td>
<td>4B</td>
<td></td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8B</td>
<td></td>
</tr>
<tr>
<td>DECIMAL</td>
<td></td>
<td>decimal(M,D)依赖于M整数位和D小数位的值</td>
</tr>
</tbody>
</table>
<h4 id="字符串类型"><a class="markdownIt-Anchor" href="#字符串类型"></a> 字符串类型</h4>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR</td>
<td>0-255B</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0-65535B</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TINYBLOB</td>
<td>0-255B</td>
<td>二进制字符串</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0-255B</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>MEDIUM/LONG - BLOB</td>
<td>0-65535B</td>
<td></td>
</tr>
<tr>
<td>MEDIUM/LONG - TEXT</td>
<td>0-65535B</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="日期类型"><a class="markdownIt-Anchor" href="#日期类型"></a> 日期类型</h4>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>格式</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATE</td>
<td>3B</td>
<td></td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3B</td>
<td></td>
<td>HH:MM:SS</td>
<td>时间值</td>
</tr>
<tr>
<td>YEAR</td>
<td>1B</td>
<td></td>
<td>YYYY</td>
<td></td>
</tr>
<tr>
<td>DATETIME</td>
<td>8B</td>
<td></td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4B</td>
<td></td>
<td>YYYYMMDD HHMMSS</td>
<td>混合</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>面试</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基础详解</title>
    <url>/posts/9dbf1a05/</url>
    <content><![CDATA[<p>删除树中的节点时，删除过程将按照后序遍历的顺序进行。 也就是说，当你删除一个节点时，你将首先删除它的左节点和它的右边的节点，然后再删除节点本身。另外，后序在数学表达中被广泛使用。 编写程序来解析后缀表示法更为容易。</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/mathematical_expression.png" alt="img" /></p>
<p>可以使用中序遍历轻松找出原始表达式。 但是程序处理这个表达式时并不容易，因为你必须检查操作的优先级。</p>
<p>如果你想对这棵树进行后序遍历，使用栈来处理表达式会变得更加容易。 每遇到一个操作符，就可以从栈中弹出栈顶的两个元素，计算并将结果返回到栈中。</p>
<h2 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h2>
<h3 id="x序遍历"><a class="markdownIt-Anchor" href="#x序遍历"></a> X序遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">preorder</span><span class="params">(TreeNode* cur,vector&lt;<span class="type">int</span>&gt;&amp; res)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">    res.<span class="built_in">push_back</span>(cur-&gt;val); <span class="comment">//不同位置表示不同序的遍历</span></span><br><span class="line">    <span class="built_in">preorder</span>(cur-&gt;left,res);</span><br><span class="line">    <span class="built_in">preorder</span>(cur-&gt;right,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="层次遍历"><a class="markdownIt-Anchor" href="#层次遍历"></a> 层次遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">    vector&lt;TreeNode*&gt;q; vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res; q.<span class="built_in">push_back</span>(root); <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=cnt;i&lt;q.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(q[i]!=<span class="literal">nullptr</span>)tmp.<span class="built_in">push_back</span>(q[i]-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp.<span class="built_in">size</span>())res.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">        <span class="type">int</span> bound = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(cnt;cnt&lt;bound;cnt++)<span class="keyword">if</span>(q[cnt]!=<span class="literal">nullptr</span>)q.<span class="built_in">push_back</span>(q[cnt]-&gt;left),q.<span class="built_in">push_back</span>(q[cnt]-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自顶向下"><a class="markdownIt-Anchor" href="#自顶向下"></a> 自顶向下</h3>
<p>“自顶向下” 意味着在每个递归层级，我们将首先访问节点来计算一些值，并在递归调用函数时将这些值传递到子节点。 所以 “自顶向下” 的解决方案可以被认为是一种前序遍历。 具体来说，递归函数 top_down(root, params) 的原理是这样的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> specific value <span class="keyword">for</span> null node</span><br><span class="line">update the answer <span class="keyword">if</span> needed                      <span class="comment">// answer &lt;-- params</span></span><br><span class="line">left_ans = <span class="built_in">top_down</span>(root.left, left_params)		<span class="comment">// left_params &lt;-- root.val, params</span></span><br><span class="line">right_ans = <span class="built_in">top_down</span>(root.right, right_params)	<span class="comment">// right_params &lt;-- root.val, params</span></span><br><span class="line"><span class="keyword">return</span> the answer <span class="keyword">if</span> needed                      <span class="comment">// answer &lt;-- left_ans, right_ans</span></span><br></pre></td></tr></table></figure>
<h3 id="自底向上"><a class="markdownIt-Anchor" href="#自底向上"></a> 自底向上</h3>
<p>“自底向上” 是另一种递归方法。 在每个递归层次上，我们首先对所有子节点递归地调用函数，然后根据返回值和根节点本身的值得到答案。 这个过程可以看作是后序遍历的一种。 通常， “自底向上” 的递归函数 bottom_up(root) 为如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> specific value <span class="keyword">for</span> null node</span><br><span class="line">left_ans = <span class="built_in">bottom_up</span>(root.left)			<span class="comment">// call function recursively for left child</span></span><br><span class="line">right_ans = <span class="built_in">bottom_up</span>(root.right)		<span class="comment">// call function recursively for right child</span></span><br><span class="line"><span class="keyword">return</span> answers                           <span class="comment">// answer &lt;-- left_ans, right_ans, root.val</span></span><br></pre></td></tr></table></figure>
<h4 id="求树的最大深度"><a class="markdownIt-Anchor" href="#求树的最大深度"></a> 求树的最大深度</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> answer=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topDown</span><span class="params">(TreeNode* cur,<span class="type">int</span> level)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">topDown</span>(cur-&gt;left,level+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">topDown</span>(cur-&gt;right,level+<span class="number">1</span>);</span><br><span class="line">    answer = <span class="built_in">max</span>(answer,level);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bottomUp</span><span class="params">(TreeNode* cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">bottomUp</span>(cur-&gt;left),<span class="built_in">bottomUp</span>(cur-&gt;right))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>encryptalg</tag>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>常用stl算法总结</title>
    <url>/posts/603c8f61/</url>
    <content><![CDATA[<p>[toc]</p>
<h2 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h2>
<h3 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> vector</h3>
<h4 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">()</span></span>;<span class="function"><span class="type">void</span>  <span class="title">emplace_back</span><span class="params">()</span></span>; <span class="comment">//尾端插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>; <span class="comment">//尾端弹出</span></span><br><span class="line"><span class="function">iterator <span class="title">front</span><span class="params">()</span></span>; <span class="function">iterator <span class="title">back</span><span class="params">()</span></span>;<span class="comment">//返回首尾迭代器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//清空</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="comment">//判空</span></span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(itereator loc)</span></span>;<span class="comment">//删除loc所指的元素，返回下一元素的迭代器</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator start,iterator end)</span></span>;删除[start,end)之间的元素，返回end元素的迭代器</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator loc,val)</span></span>;<span class="comment">//在loc位置插入一个value元素，并且返回其迭代器，原loc及以后的元素后移</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator it=q.insert(q.begin()+2,num);</span></span><br></pre></td></tr></table></figure>
<h4 id="一维初始化"><a class="markdownIt-Anchor" href="#一维初始化"></a> 一维初始化</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;T&gt; v1 <span class="comment">//空的vector，执行默认初始化</span></span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v2</span><span class="params">(v1)</span> <span class="comment">//v2包含有v1所有元素的副本</span></span></span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v2</span><span class="params">(v1.begin(),v1.end())</span><span class="comment">//包含指定范围的数据</span></span></span><br><span class="line"><span class="function">vector&lt;T&gt; v2</span>=v1 <span class="comment">//等价于上条语句</span></span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v3</span><span class="params">(n,val)</span> <span class="comment">//包含了n个重复元素，每个元素的值都是val</span></span></span><br><span class="line"><span class="function">vector&lt;T&gt; <span class="title">v4</span><span class="params">(n)</span> <span class="comment">//包含n个默认初始化的对象 </span></span></span><br><span class="line"><span class="function">vector&lt;T&gt; v4</span>&#123;a,b,c...&#125; <span class="comment">//包含了初始值个数的元素，并被初始化</span></span><br><span class="line">vector&lt;T&gt; v5=&#123;a,b,c...&#125; <span class="comment">//等价于上条语句</span></span><br></pre></td></tr></table></figure>
<h4 id="二维数组初始化"><a class="markdownIt-Anchor" href="#二维数组初始化"></a> 二维数组初始化</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vec</span>(row, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (col,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h3>
<h4 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(<span class="number">10</span>,<span class="number">1</span>)<span class="comment">//10大小初始值1</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(n,n+<span class="number">5</span>)<span class="comment">//使用数组初始化</span></span><br></pre></td></tr></table></figure>
<h4 id="基本操作-2"><a class="markdownIt-Anchor" href="#基本操作-2"></a> 基本操作</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">list.<span class="built_in">resize</span>()<span class="comment">//改变大小</span></span><br><span class="line">list.<span class="built_in">push_front</span>();</span><br><span class="line">list.<span class="built_in">push_back</span>()</span><br><span class="line">list.<span class="built_in">insert</span>(&amp;it,val);</span><br><span class="line">list.<span class="built_in">insert</span>(&amp;it,<span class="type">int</span> n,val)<span class="comment">//&amp;it位置插入n个val</span></span><br><span class="line">list.<span class="built_in">insert</span>(&amp;it,begin,last)<span class="comment">//&amp;it位置插入begin~end</span></span><br><span class="line">list.<span class="built_in">pop_front</span>()</span><br><span class="line">list.<span class="built_in">pop_back</span>()</span><br><span class="line">list.<span class="built_in">erase</span>(&amp;it)</span><br><span class="line">list.<span class="built_in">erase</span>(begin,end)</span><br><span class="line">list.<span class="built_in">clear</span>()<span class="comment">//清空</span></span><br><span class="line"></span><br><span class="line">list.<span class="built_in">assign</span>(<span class="type">int</span> nSize,val)<span class="comment">//类似数组初始化</span></span><br><span class="line"><span class="built_in">swap</span>(list&amp;,list&amp;)<span class="comment">//交换</span></span><br><span class="line">list.<span class="built_in">merge</span>();<span class="comment">//合并，默认升序</span></span><br><span class="line">list.<span class="built_in">splice</span>(&amp;it,list&amp;) <span class="comment">//&amp;it位置接入list</span></span><br><span class="line">list.<span class="built_in">unique</span>()<span class="comment">//去重</span></span><br><span class="line">list.<span class="built_in">sort</span>()</span><br><span class="line">list.<span class="built_in">remove_if</span>()<span class="comment">//条件去重</span></span><br><span class="line">list.<span class="built_in">reverse</span>()</span><br></pre></td></tr></table></figure>
<h3 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> stack</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span>	栈为空返回<span class="literal">true</span>,否则返回<span class="literal">false</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span>	删除栈顶元素，即出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> TYPE &amp;val)</span>	将新元素val进栈，使其成为栈顶元素</span></span><br><span class="line"><span class="function"><span class="title">top</span><span class="params">()</span> 查看当前栈顶元素</span></span><br><span class="line"><span class="function"><span class="title">size</span><span class="params">()</span> 返回元素数目</span></span><br></pre></td></tr></table></figure>
<h3 id="queue"><a class="markdownIt-Anchor" href="#queue"></a> queue</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span>	队列为空返回<span class="literal">true</span>,否则返回<span class="literal">false</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span>	删除队列头元素，即出栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> TYPE &amp;val)</span>	将新元素val进队尾</span></span><br><span class="line"><span class="function"><span class="title">top</span><span class="params">()</span> 查看当前栈顶元素</span></span><br><span class="line"><span class="function"><span class="title">size</span><span class="params">()</span> 返回元素数目</span></span><br></pre></td></tr></table></figure>
<h3 id="deque"><a class="markdownIt-Anchor" href="#deque"></a> deque</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assign</span>()	设置双向队列的值</span><br><span class="line"><span class="built_in">at</span>()	返回指定的元素</span><br><span class="line"><span class="built_in">back</span>()	返回最后一个元素</span><br><span class="line"><span class="built_in">begin</span>()	返回指向第一个元素的迭代器</span><br><span class="line"><span class="built_in">clear</span>()	删除所有元素</span><br><span class="line"><span class="built_in">empty</span>()	返回真如果双向队列为空</span><br><span class="line"><span class="built_in">end</span>()	返回指向尾部的迭代器</span><br><span class="line"><span class="built_in">erase</span>()	删除一个元素</span><br><span class="line"><span class="built_in">front</span>()	返回第一个元素</span><br><span class="line"><span class="built_in">get_allocator</span>()	返回双向队列的配置器</span><br><span class="line"><span class="built_in">insert</span>()	插入一个元素到双向队列中</span><br><span class="line"><span class="built_in">max_size</span>()	返回双向队列能容纳的最大元素个数</span><br><span class="line"><span class="built_in">pop_back</span>()	删除尾部的元素</span><br><span class="line"><span class="built_in">pop_front</span>()	删除头部的元素</span><br><span class="line"><span class="built_in">push_back</span>()	在尾部加入一个元素</span><br><span class="line"><span class="built_in">push_front</span>()	在头部加入一个元素</span><br><span class="line"><span class="built_in">rbegin</span>()	返回指向尾部的逆向迭代器</span><br><span class="line"><span class="built_in">rend</span>()	返回指向头部的逆向迭代器</span><br><span class="line"><span class="built_in">resize</span>()	改变双向队列的大小</span><br><span class="line"><span class="built_in">size</span>()	返回双向队列中元素的个数</span><br><span class="line"><span class="built_in">swap</span>()	和另一个双向队列交换元素</span><br></pre></td></tr></table></figure>
<h3 id="优先队列-重定义"><a class="markdownIt-Anchor" href="#优先队列-重定义"></a> 优先队列-重定义</h3>
<ol>
<li>自定义类型重载，使用仿函数中的比较函数</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="built_in">Node</span>( <span class="type">int</span> a= <span class="number">0</span>, <span class="type">int</span> b= <span class="number">0</span> ):</span><br><span class="line">        <span class="built_in">x</span>(a), <span class="built_in">y</span>(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;( Node a, Node b )&#123;<span class="comment">//返回true，a的优先级大于b</span></span><br><span class="line">    <span class="comment">//x大的排在队前部；x相同时，y大的排在队前部</span></span><br><span class="line">    <span class="keyword">if</span>( a.x== b.x ) <span class="keyword">return</span> a.y&gt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&gt; b.x; </span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node,vector&lt;Node&gt;,greater&lt;Node&gt; &gt; q;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义函数对象()</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span>&#123;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(NODE n1,NODE n2)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> n1.val&gt;n2.val; <span class="comment">//小根堆 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;NODE,vector&lt;NODE&gt;,cmp&gt;q;</span><br></pre></td></tr></table></figure>
<h3 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">begin</span>()：返回指向第一个元素的迭代器</span><br><span class="line"><span class="built_in">clear</span>()：清除所有元素</span><br><span class="line"><span class="built_in">count</span>()：返回某个值元素的个数</span><br><span class="line"><span class="built_in">empty</span>()：如果集合为空，返回<span class="function"><span class="literal">true</span></span></span><br><span class="line"><span class="function"><span class="title">end</span><span class="params">()</span>：返回指向最后一个元素的迭代器</span></span><br><span class="line"><span class="function"><span class="title">equal_range</span><span class="params">()</span>：返回集合中与给定值相等的上下限的两个迭代器</span></span><br><span class="line"><span class="function"><span class="title">erase</span><span class="params">()</span>：删除集合中的元素</span></span><br><span class="line"><span class="function"><span class="title">find</span><span class="params">()</span>：返回一个指向被查找到元素的迭代器</span></span><br><span class="line"><span class="function"><span class="title">get_allocator</span><span class="params">()</span>：返回集合的分配器</span></span><br><span class="line"><span class="function"><span class="title">insert</span><span class="params">()</span>：在集合中插入元素</span></span><br><span class="line"><span class="function"><span class="title">lower_bound</span><span class="params">()</span>：返回指向大于（或等于）某值的第一个元素的迭代器</span></span><br><span class="line"><span class="function"><span class="title">key_comp</span><span class="params">()</span>：返回一个用于元素间值比较的函数</span></span><br><span class="line"><span class="function"><span class="title">max_size</span><span class="params">()</span>：返回集合能容纳的元素的最大限值</span></span><br><span class="line"><span class="function"><span class="title">rbegin</span><span class="params">()</span>：返回指向集合中最后一个元素的反向迭代器</span></span><br><span class="line"><span class="function"><span class="title">rend</span><span class="params">()</span>：返回指向集合中第一个元素的反向迭代器</span></span><br><span class="line"><span class="function"><span class="title">size</span><span class="params">()</span>：集合中元素的数目</span></span><br><span class="line"><span class="function"><span class="title">swap</span><span class="params">()</span>：交换两个集合变量</span></span><br><span class="line"><span class="function"><span class="title">upper_bound</span><span class="params">()</span>：返回大于某个值元素的迭代器</span></span><br><span class="line"><span class="function"><span class="title">value_comp</span><span class="params">()</span>：返回一个用于比较元素间的值的函数</span></span><br></pre></td></tr></table></figure>
<h3 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">map.<span class="built_in">size</span>()/<span class="built_in">clear</span>()/<span class="built_in">empty</span>()</span><br><span class="line"><span class="function">iterator <span class="title">lower_bound</span><span class="params">(key)</span><span class="comment">//返回指向键值&gt;=key的第一个元素upper_bound 键值&gt;key</span></span></span><br><span class="line"><span class="function">map.<span class="title">key_comp</span><span class="params">()</span><span class="comment">//返回比较key大小</span></span></span><br><span class="line"><span class="function">map.<span class="title">value_comp</span><span class="params">()</span><span class="comment">//返回比较value大小</span></span></span><br><span class="line"><span class="function">itearator <span class="title">find</span><span class="params">(key)</span><span class="comment">//返回键值为key的迭代器，未找到则返回end()</span></span></span><br><span class="line"><span class="function">pair&lt;itaratoe,<span class="type">bool</span>&gt; <span class="title">insert</span><span class="params">(pair&lt;key,value&gt;)</span>插入键值对，返回pair&lt;迭代器，成功与否&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="stl内置算法"><a class="markdownIt-Anchor" href="#stl内置算法"></a> STL内置算法</h2>
<h3 id="fill"><a class="markdownIt-Anchor" href="#fill"></a> fill</h3>
<h4 id="给一维数组赋值"><a class="markdownIt-Anchor" href="#给一维数组赋值"></a> 给一维数组赋值</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> f[MAXN];</span><br><span class="line"><span class="built_in">fill</span>(f,f+MAXN,num);</span><br></pre></td></tr></table></figure>
<h4 id="给二维数组赋值"><a class="markdownIt-Anchor" href="#给二维数组赋值"></a> 给二维数组赋值</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> f[MAXN][MAXN];</span><br><span class="line"><span class="built_in">fill</span>(f[<span class="number">0</span>],f[<span class="number">0</span>]+MAXN*MAXN,num);</span><br></pre></td></tr></table></figure>
<h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>
<h2 id="string相关函数"><a class="markdownIt-Anchor" href="#string相关函数"></a> String相关函数</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="type">char</span>[],len)</span></span>;<span class="comment">//字符数组初始化,参数len可选，len表示选几个</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="type">char</span>[],npos,len)</span><span class="comment">//字符数组初始化，表示从npos来时选取len长度的字符串</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(string,npos)</span><span class="comment">//字符串初始化，参数npos可选，表示从第几位开始（start from 0）</span></span></span><br><span class="line"><span class="function"><span class="comment">//截取子串</span></span></span><br><span class="line"><span class="function">s.<span class="title">substr</span><span class="params">(pos,n)</span></span>;<span class="comment">//包含0开始的n个</span></span><br><span class="line">s.<span class="built_in">substr</span>(pos);</span><br><span class="line"><span class="comment">//替换子串</span></span><br><span class="line">s.<span class="built_in">replace</span>(pos,n,s1)<span class="comment">//用s1替换s中从pos开始包含0的n个字符子串</span></span><br><span class="line"><span class="comment">//查找子串</span></span><br><span class="line"><span class="type">int</span> s.<span class="built_in">find</span>(s1，startpos)<span class="comment">//返回string::npos或-1表示找不到</span></span><br><span class="line">s.<span class="built_in">rfind</span>(s1)<span class="comment">//最后出现位置</span></span><br><span class="line"><span class="function">string &amp;<span class="title">erase</span><span class="params">(npos,len)</span><span class="comment">//删除从npos开始len长度的字符串，返回修改后的字符串</span></span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(string)</span><span class="comment">//末尾添加</span></span></span><br><span class="line"><span class="function">string &amp;<span class="title">clear</span><span class="params">()</span><span class="comment">//清空</span></span></span><br><span class="line"><span class="function"><span class="title">std::transform</span><span class="params">(first1, last1, result, op_increase)</span></span>;</span><br><span class="line">std::<span class="built_in">transform</span>(first1, last1, first2, result, op_add);</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),result,::tolower);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
        <category>stl</category>
      </categories>
      <tags>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title>离散化</title>
    <url>/posts/515818b4/</url>
    <content><![CDATA[<h3 id="acwing802-区间和"><a class="markdownIt-Anchor" href="#acwing802-区间和"></a> Acwing802 区间和</h3>
<p><a href="https://www.acwing.com/solution/content/6055/">https://www.acwing.com/solution/content/6055/</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findpos</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; src,<span class="type">int</span> pos)</span></span>&#123;<span class="comment">//离散化映射</span></span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=src.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(src[mid]&gt;=pos)r= mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r+<span class="number">1</span>; <span class="comment">//从1开始</span></span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::<span class="function">iterator <span class="title">my_unique</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;src)</span></span>&#123; <span class="comment">//手动去重，返回迭代器指针</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;src.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!i  || src[i]!=src[i<span class="number">-1</span>]) src[j++]=src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> src.<span class="built_in">begin</span>()+j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;  <span class="keyword">constexpr</span> <span class="type">int</span> size = <span class="number">300010</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;pos;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;add;vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;query;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">nums</span>(,<span class="number">0</span>),<span class="built_in">sums</span>(size,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,c;cin&gt;&gt;x&gt;&gt;c;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(x);</span><br><span class="line">        add.<span class="built_in">push_back</span>(&#123;x,c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l,r;cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        pos.<span class="built_in">push_back</span>(l);pos.<span class="built_in">push_back</span>(r);</span><br><span class="line">        query.<span class="built_in">push_back</span>(&#123;l,r&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//排序+去重</span></span><br><span class="line">    <span class="built_in">sort</span>(pos.<span class="built_in">begin</span>(),pos.<span class="built_in">end</span>(),<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    pos.<span class="built_in">erase</span>(<span class="built_in">unique</span>(pos.<span class="built_in">begin</span>(),pos.<span class="built_in">end</span>()),pos.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//离散化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:add)&#123;</span><br><span class="line">        <span class="type">int</span> newpos = <span class="built_in">findpos</span>(pos,i.first);</span><br><span class="line">        nums[newpos]+=i.second;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//处理离散化后的前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++) <span class="comment">//注意从1开始</span></span><br><span class="line">        sums[i] = sums[i<span class="number">-1</span>]+nums[i];</span><br><span class="line"><span class="comment">//处理查询</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:query)&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="built_in">findpos</span>(pos,i.first),r = <span class="built_in">findpos</span>(pos,i.second);</span><br><span class="line">        cout&lt;&lt;sums[r]-sums[l<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集模板</title>
    <url>/posts/83a4cde7/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> fa[<span class="number">65</span>],rank[<span class="number">65</span>];</span><br><span class="line">    <span class="built_in">UF</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            fa[i]=i;</span><br><span class="line">            rank[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x==fa[x]?x:(fa[x]=<span class="built_in">find</span>(fa[x]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">uni</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(i),y=<span class="built_in">find</span>(j);</span><br><span class="line">        <span class="keyword">if</span>(rank[x]&lt;=rank[y])fa[x]=y;</span><br><span class="line">        <span class="keyword">else</span> fa[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(rank[x]==rank[y]&amp;&amp;x!=y)rank[y]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】1984. 学生分数的最小差值</title>
    <url>/posts/3e175728/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220211134306054.png" alt="image-20220211134306054" /></p>
<blockquote>
<p>思路：排序后使用滑动窗口的思想，取窗口内最大值和最小值，即i和i+k-1的差值，取最小。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minimumDifference</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> mi = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i+k<span class="number">-1</span>&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            mi = <span class="built_in">min</span>(mi,nums[i+k<span class="number">-1</span>]-nums[i]);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>模拟题</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】2024. 考试的最大困扰度</title>
    <url>/posts/c8d36080/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220329132004418.png" alt="image-20220329132004418" /></p>
<blockquote>
<p>思考：滑动窗口，每个窗口内判断特定字符的数量，如果该数量小于等于k右边界增加，大于k左边界增加。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countSum</span><span class="params">(string answerKey,<span class="type">int</span> k,<span class="type">char</span> key)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>; <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;answerKey.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(answerKey[j]!=key)sum++;</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;k)&#123; <span class="comment">//左边界调节</span></span><br><span class="line">                <span class="keyword">if</span>(answerKey[i++]!=key)sum--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxConsecutiveAnswers</span><span class="params">(string answerKey, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">countSum</span>(answerKey,k,<span class="string">&#x27;T&#x27;</span>),<span class="built_in">countSum</span>(answerKey,k,<span class="string">&#x27;F&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>滑动窗口</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】2055.蜡烛之间的盘子</title>
    <url>/posts/f2608f0/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220308131742743.png" alt="image-20220308131742743" /></p>
<blockquote>
<p>思路一：使用二分查找的思想，记录蜡烛的位置存入cpos[]，然后对每次查询进行左二分和右二分，查找到&gt;=和&lt;=的pos位置 lpos和rpos，sum=cpos[rpos]-cpos[lpos]-(rpos-lpos)</p>
<p>复杂度O(nlogn)</p>
<p>注意特判边界条件和rpos&lt;=lpos的情况</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lbs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>,r = a.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&gt;=pos)r = mid;<span class="keyword">else</span> l= mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rbs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=a.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="type">int</span> mid = l+(r-l&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&lt;=pos)l = mid;<span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">platesBetweenCandles</span><span class="params">(string s, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;cpos; vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)<span class="keyword">if</span>(s[i]==<span class="string">&#x27;|&#x27;</span>)cpos.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(cpos.<span class="built_in">empty</span>())<span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:queries)&#123;</span><br><span class="line">            <span class="type">int</span> lpos = <span class="built_in">lbs</span>(cpos,i[<span class="number">0</span>]),rpos = <span class="built_in">rbs</span>(cpos,i[<span class="number">1</span>]); </span><br><span class="line">            <span class="keyword">if</span>(cpos.<span class="built_in">front</span>()&gt;=cpos[rpos] || cpos.<span class="built_in">back</span>()&lt;=cpos[lpos] || rpos&lt;=lpos) ans.<span class="built_in">emplace_back</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> cnt = cpos[rpos]-cpos[lpos] - (rpos - lpos);</span><br><span class="line">                ans.<span class="built_in">emplace_back</span>(cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>思路二：前缀和思想，分别处理三个数组pre记录从0开始的*数量的前缀和。lpos记录&gt;=当前i位置的最小蜡烛位置，需要逆序，且最大值为数组长度-1。rpos记录&lt;=当前i位置的最大蜡烛位置，需要顺序，且最小值为0。</p>
<p>对每个query，sum=pre[rpos[query[1]]]-pre[lpos[query[0]]]</p>
<p>时间复杂度为O(n)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">platesBetweenCandles</span><span class="params">(string s, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">pre</span>(s.<span class="built_in">size</span>(),<span class="number">0</span>),<span class="built_in">lpos</span>(s.<span class="built_in">size</span>(),<span class="number">0</span>),<span class="built_in">rpos</span>(s.<span class="built_in">size</span>(),<span class="number">0</span>); vector&lt;<span class="type">int</span>&gt;ans;<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;*&#x27;</span>)sum++;</span><br><span class="line">            pre[i]=sum;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;|&#x27;</span>)rp = i;</span><br><span class="line">            rpos[i]=rp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> lp=s.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;|&#x27;</span>)lp=i;</span><br><span class="line">            lpos[i]=lp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:queries)&#123;ans.<span class="built_in">emplace_back</span>(<span class="built_in">max</span>(<span class="number">0</span>,pre[rpos[i[<span class="number">1</span>]]]-pre[lpos[i[<span class="number">0</span>]]]));&#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>前缀和</category>
        <category>二分</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和、差分与树状数组、线段树基础</title>
    <url>/posts/8f4b279/</url>
    <content><![CDATA[<p>ref：</p>
<p><a href="https://blog.csdn.net/bestsort/article/details/80796531">https://blog.csdn.net/bestsort/article/details/80796531</a></p>
<p><a href="https://www.luogu.com.cn/problem/solution/P3374">https://www.luogu.com.cn/problem/solution/P3374</a></p>
<h3 id="树状数组解决的问题"><a class="markdownIt-Anchor" href="#树状数组解决的问题"></a> 树状数组解决的问题</h3>
<ol>
<li>单点修改，求区间和</li>
<li>区间修改，求区间和</li>
</ol>
<h3 id="前缀和数组"><a class="markdownIt-Anchor" href="#前缀和数组"></a> 前缀和数组</h3>
<p>可以快速求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span> 范围内的和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sum = sumarr[r]-sumarr[l-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p>
<p>缺点：无法支持单点修改和区间修改，因为每修改一次需要对后续所有的数组元素重新计算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=nums.<span class="built_in">size</span>();i++)dp[i] = dp[i<span class="number">-1</span>]+nums[i<span class="number">-1</span>];</span><br><span class="line">cout&lt;&lt;dp[r]-dp[l<span class="number">-1</span>]&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<h4 id="二维矩阵-子矩阵的和"><a class="markdownIt-Anchor" href="#二维矩阵-子矩阵的和"></a> 二维矩阵-子矩阵的和</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,q;cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="built_in">fill</span>(f[<span class="number">0</span>],f[<span class="number">0</span>]+<span class="number">1010</span>*<span class="number">1010</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> num;cin&gt;&gt;num;</span><br><span class="line">            f[i][j] = num+f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>]-f[i<span class="number">-1</span>][j<span class="number">-1</span>]; cout&lt;&lt;f[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c,d;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line">        cout&lt;&lt;f[c][d]-f[a<span class="number">-1</span>][d]-f[c][b<span class="number">-1</span>]+f[a<span class="number">-1</span>][b<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分数组"><a class="markdownIt-Anchor" href="#差分数组"></a> 差分数组</h3>
<p>差分为前缀和的逆运算，将当前数组看成前缀和数组，差分数组为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>d</mi><mi>j</mi><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">adjarr[i] = sumarr[i]-sumarr[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>支持单点修改和区间修改，以及最后的一次查询。</p>
<p>缺点：无法支持动态查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">sum</span>(n+<span class="number">1</span>),<span class="built_in">adj</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;sum[i];</span><br><span class="line">    <span class="built_in">adjacent_difference</span>(sum.<span class="built_in">begin</span>(),sum.<span class="built_in">end</span>(),adj.<span class="built_in">begin</span>());<span class="comment">//构造差分数组</span></span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> l,r,c;cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">        adj[l<span class="number">-1</span>]+=c;adj[r]-=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        num = num+ adj[i];</span><br><span class="line">        cout&lt;&lt;num&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树状数组-stage1"><a class="markdownIt-Anchor" href="#树状数组-stage1"></a> 树状数组-stage1</h3>
<h4 id="lowbit函数"><a class="markdownIt-Anchor" href="#lowbit函数"></a> lowbit函数</h4>
<p>返回x的二进制最低位的1组成的整数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;<span class="comment">// 6 = 110 -&gt; 10 = 2</span></span><br></pre></td></tr></table></figure>
<p>树状数组其实就是二叉树化的前缀和数组。每个数组元素<code>x</code>对<code>x+lowbit(x)</code>有贡献，因此每个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>控制<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x-lowbit(x)+1,x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span>,易知当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x+lowbit(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>时类似二叉树的向其父节点追溯，而<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x-lowbit(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>时类似寻找其孩子。</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/20200717113256650.png" alt="img" /></p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/20200717113236761.png" alt="img" /></p>
<h4 id="单点更新"><a class="markdownIt-Anchor" href="#单点更新"></a> 单点更新</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">lowadd</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bit,<span class="type">int</span> pos,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(pos&lt;bit.<span class="built_in">size</span>())&#123;</span><br><span class="line">        bit[pos]+=k;</span><br><span class="line">        pos+=<span class="built_in">lowbit</span>(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="区间求和"><a class="markdownIt-Anchor" href="#区间求和"></a> 区间求和</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowsum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp; bit,<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        sum+=bit[pos];</span><br><span class="line">        pos-=<span class="built_in">lowbit</span>(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>基础算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】2044. 统计按位或能得到最大值的子集数目</title>
    <url>/posts/9eb15c0/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220315084700054.png" alt="image-20220315084700054" /></p>
<blockquote>
<p>思路一：位运算</p>
<p>最大数组长度为16，因此可以用一个16位二进制数模拟取值，用一个变量存储当前取值下的最大或运算结果。复杂度O(2^n*n)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//位运算</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countMaxOrSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ret = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;nums.<span class="built_in">size</span>());i++)&#123;</span><br><span class="line">            <span class="type">int</span> cur = i; <span class="type">int</span> sum = <span class="number">0</span>; <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cur)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur&amp;<span class="number">1</span>)sum|=nums[pos];</span><br><span class="line">                pos++;cur&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ret.first&lt;sum)&#123;ret.first = sum;ret.second = <span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret.first==sum)ret.second++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思路二：回溯</p>
<p>dfs取所有值，复杂度O(2^n)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//回溯dfs</span></span><br><span class="line">    pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ret;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;a,vector&lt;<span class="type">int</span>&gt;&amp; ans,<span class="type">int</span> level)</span></span>&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(a[level]);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:ans)sum|=i;</span><br><span class="line">        <span class="keyword">if</span>(ret.first&lt;sum)ret.first=sum,ret.second=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret.first==sum)ret.second++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=level+<span class="number">1</span>;i&lt;a.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(a,ans,i);</span><br><span class="line">            ans.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countMaxOrSubsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(nums,ans,i);</span><br><span class="line">            ans.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>模拟题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>位运算</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】1020. 飞地的数量</title>
    <url>/posts/48f31485/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220212141050874.png" alt="image-20220212141050874" /></p>
<blockquote>
<p>采用多源dfs的思想，每个通往边界的区域经过dfs后设为0，最后统计1的数量即可，只需要扫描边界处的连通分量即可。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[x][y]==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">        grid[x][y]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:dir)&#123;</span><br><span class="line">            <span class="type">int</span> nextx = x+i[<span class="number">0</span>],nexty = y+i[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(nextx&gt;=<span class="number">0</span> &amp;&amp; nexty&gt;=<span class="number">0</span> &amp;&amp; nextx&lt;m &amp;&amp; nexty &lt;n &amp;&amp;grid[nextx][nexty])<span class="built_in">dfs</span>(nextx,nexty,grid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numEnclaves</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        m = grid.<span class="built_in">size</span>(); n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;<span class="built_in">dfs</span>(<span class="number">0</span>,j,grid);<span class="built_in">dfs</span>(m<span class="number">-1</span>,j,grid);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;<span class="built_in">dfs</span>(i,<span class="number">0</span>,grid);<span class="built_in">dfs</span>(i,n<span class="number">-1</span>,grid);&#125;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i:grid)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> j:i)<span class="keyword">if</span>(j)cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>dfs</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>【每日】688. 骑士在棋盘上的概率</title>
    <url>/posts/2a64def3/</url>
    <content><![CDATA[<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220217185416173.png" alt="image-20220217185416173" /></p>
<blockquote>
<p>思路：采用bfs策略一定会超时，因为步数&lt;=100，理论上可能的总数有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>8</mn><mn>100</mn></msup></mrow><annotation encoding="application/x-tex">8^{100}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>次。因此采用三维dp[row][col][step]代表第step步时（row，col）处的概率。统计总数也可以，但是数字太大，若不模会溢出。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> row,col,step;</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;row = a;<span class="keyword">this</span>-&gt;col=b;<span class="keyword">this</span>-&gt;step=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;node;</span><br><span class="line">    <span class="type">int</span> dir[<span class="number">8</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">-2</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> row, <span class="type">int</span> column)</span></span>&#123;</span><br><span class="line">        <span class="comment">//tle k&gt;=10</span></span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        queue&lt;node&gt;q; <span class="type">int</span> steps=<span class="number">0</span>; <span class="type">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function">node <span class="title">tmp</span><span class="params">(row,column,<span class="number">0</span>)</span></span>;</span><br><span class="line">        q.<span class="built_in">push</span>(tmp);</span><br><span class="line">        <span class="keyword">while</span>(q.<span class="built_in">empty</span>()==<span class="literal">false</span>&amp;&amp;q.<span class="built_in">front</span>().step!=k)&#123;</span><br><span class="line">            <span class="keyword">auto</span> cur = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> i : dir)&#123;</span><br><span class="line">                <span class="type">int</span> nextrow = cur.row+i[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> nextcol =cur.col + i[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(nextrow&lt;<span class="number">0</span> || nextcol&lt;<span class="number">0</span> || nextrow&gt;=n|| nextcol&gt;=n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="function">node <span class="title">tmp</span><span class="params">(nextrow,nextcol,cur.step+<span class="number">1</span>)</span></span>;</span><br><span class="line">                q.<span class="built_in">push</span>(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">        res = q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)res/=<span class="number">8.0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> f[<span class="number">26</span>][<span class="number">26</span>][<span class="number">200</span>];</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> row, <span class="type">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="built_in">fill</span>((<span class="type">int</span>*)f,(<span class="type">int</span>*)f+(<span class="number">26</span>*<span class="number">26</span>*<span class="number">200</span>),<span class="number">0.0</span>);<span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) f[i][j][step]=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(step!=k)&#123;</span><br><span class="line">            step++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> d:dir)&#123;</span><br><span class="line">                        <span class="type">int</span> prevrow = i+d[<span class="number">0</span>];</span><br><span class="line">                        <span class="type">int</span> prevcol = j+d[<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(prevrow&lt;<span class="number">0</span> || prevcol&lt;<span class="number">0</span> || prevrow&gt;=n|| prevcol&gt;=n)<span class="keyword">continue</span>;</span><br><span class="line">                        f[i][j][step] +=f[prevrow][prevcol][step<span class="number">-1</span>]/<span class="number">8.0</span>;<span class="comment">//到达该位置的前一位置的所有概率和除以当前的选择概率。</span></span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[row][col][k];</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">knightProbability</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> row, <span class="type">int</span> column)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//bfs(n,k,row,column);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dp</span>(n,k,row,column);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>力扣</category>
        <category>每日一题</category>
        <category>dp</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最接近的三数之和</title>
    <url>/posts/43ca74ed/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/3sum-closest/">https://leetcode-cn.com/problems/3sum-closest/</a></p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220413130502012.png" alt="image-20220413130502012" /></p>
<blockquote>
<p>思路：排序，双指针，固定第一个数，后两个指针一个头一个尾，记录此时与target的绝对差，若大于则尾-- 小于则头++，直到出现最小值。O(N2)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> minnum = INT_MAX; <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="type">int</span> j = i+<span class="number">1</span>,k = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(j&lt;k)&#123;</span><br><span class="line">                <span class="type">int</span> tmp = nums[i]+nums[j]+nums[k];</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(tmp-target)&lt;minnum)&#123;</span><br><span class="line">                    minnum = <span class="built_in">abs</span>(tmp-target);</span><br><span class="line">                    ret = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(tmp&gt;target)k--;</span><br><span class="line">                <span class="keyword">else</span> j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/posts/0/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Bx411g7gD?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Bx411g7gD?spm_id_from=333.337.search-card.all.click</a></p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#动词-名词 组合</span></span><br><span class="line"><span class="built_in">set-location</span> <span class="comment">#设置目录位置</span></span><br><span class="line"><span class="built_in">get-childitem</span> </span><br><span class="line"><span class="built_in">clear-host</span> <span class="comment">#清屏</span></span><br><span class="line"><span class="built_in">get-alias</span> <span class="comment">#获取别名</span></span><br></pre></td></tr></table></figure>
<h3 id="控制结构-if-else"><a class="markdownIt-Anchor" href="#控制结构-if-else"></a> 控制结构 if-else</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">If</span>(&lt;COND&gt;)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">ElseIf</span>(&lt;COND&gt;)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="控制结构-switch"><a class="markdownIt-Anchor" href="#控制结构-switch"></a> 控制结构 switch</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Switch</span>(&lt;EXPR&gt;)</span><br><span class="line">&#123;</span><br><span class="line">	&lt;VALUE&gt;&#123;;<span class="keyword">break</span>&#125;</span><br><span class="line">	Default&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>socket网络编程</title>
    <url>/posts/827e1516/</url>
    <content><![CDATA[<h3 id="socket分类"><a class="markdownIt-Anchor" href="#socket分类"></a> socket分类</h3>
<ol>
<li>
<p>流socket：基于TCP协议，有序可靠双向字节流</p>
</li>
<li>
<p>数据包socket：基于UDP协议，不需要维持连接对长度有限制</p>
</li>
</ol>
<p>QQ曾经使用UDP，现在使用TCP</p>
<h3 id="简单的socket通信流程"><a class="markdownIt-Anchor" href="#简单的socket通信流程"></a> 简单的socket通信流程</h3>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220309130634043.png" alt="image-20220309130634043" /></p>
<h4 id="perror函数"><a class="markdownIt-Anchor" href="#perror函数"></a> perror函数：</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">perror</span><span class="params">(<span class="string">&quot;string&quot;</span>)</span></span>; 打印出string + 上一个函数运行失败返回的错误信息。 </span><br></pre></td></tr></table></figure>
<h4 id="socket函数"><a class="markdownIt-Anchor" href="#socket函数"></a> socket函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">socket</span><span class="params">(<span class="type">int</span> af,<span class="type">int</span> type,<span class="type">int</span> protocol)</span></span>;</span><br><span class="line"><span class="comment">//af:address family，如AF_INET</span></span><br><span class="line"><span class="comment">//type:连接类型，通常是SOCK_STREAM或SOCK_DGRAM</span></span><br><span class="line"><span class="comment">//protocol:协议类型，通常是IPPROTO_TCP或IPPROTO_UDP</span></span><br></pre></td></tr></table></figure>
<h3 id="第一步创建一个服务端socket"><a class="markdownIt-Anchor" href="#第一步创建一个服务端socket"></a> 第一步：创建一个服务端socket</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> listenfd;</span><br><span class="line"><span class="keyword">if</span>((listen = <span class="built_in">socket</span>(AF_INET, SOCKET_STREAM, <span class="number">0</span>))==<span class="number">-1</span>)&#123; <span class="built_in">perror</span>(<span class="string">&quot;socket&quot;</span>);<span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>此时listenfd的文件描述符为3，因为linux下进程的0,1,2文件描述符分别分配给了stdin,stdout,stderr，若是gdb模式下，则从7开始计数。<mark>一个进程能打开的最大文件描述符数量是1024个</mark></p>
<h3 id="第二步将通信的地址和端口绑定到socket上"><a class="markdownIt-Anchor" href="#第二步将通信的地址和端口绑定到socket上"></a> 第二步：将通信的地址和端口绑定到socket上</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bind</span><span class="params">(<span class="type">int</span> socket,sockaddr * address,uint addrlen)</span></span>;</span><br><span class="line"><span class="comment">// socket:之前创建的socket</span></span><br><span class="line"><span class="comment">// sockaddr:一个用来存放Ip地址和端口号的结构体</span></span><br><span class="line"><span class="comment">// addrlen:上述结构体的长度</span></span><br><span class="line"><span class="comment">// 返回值：为-1表示失败，若端口被占用，会从新绑定一个随机端口（仍返回失败）</span></span><br><span class="line"><span class="comment">// 地址绑定为0表示绑定本机所有IP</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -a</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">查看单个进程打开的文件描述符数量</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">ulimit</span> -HSn 2000</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">临时修改文件描述符的限制 H硬资源 S软资源限制</span></span><br></pre></td></tr></table></figure>
<h3 id="主机字节序与网络字节序"><a class="markdownIt-Anchor" href="#主机字节序与网络字节序"></a> 主机字节序与网络字节序</h3>
<p>小端字节序：低位字节存储在低地址</p>
<p>大端字节序：低位字节存储在高地址</p>
<p><mark>x86、arm采用小端模式，power pc mips unix采用大端模式</mark></p>
<p>网络字节序：与具体的cpu类型、操作系统无关，采用大端方式排序</p>
<p>主机字节序：由cpu决定，与操作系统无关</p>
<p>转换函数：htons,htonl,ntohs,ntohl 进行16位和32位的转换</p>
<h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> sa_family; <span class="comment">//地址类型 AF_XXX</span></span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>]; <span class="comment">//14字节的端口和地址</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span>&#123;</span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> sin_family; <span class="comment">//地址类型</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> sin_port; <span class="comment">//16位端口号</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">in_addr</span> sin_addr; <span class="comment">//32位ip4地址</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">//为了保持与struct sockaddr 一样的长度，强制转换</span></span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">in_addr</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> s_addr; <span class="comment">//32位ip4地址</span></span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>
<h4 id="第2步把服务端用于通信的地址和端口绑定到socket上"><a class="markdownIt-Anchor" href="#第2步把服务端用于通信的地址和端口绑定到socket上"></a> 第2步：把服务端用于通信的地址和端口绑定到socket上。</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> servaddr;    <span class="comment">// 服务端地址信息的数据结构。</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr,<span class="number">0</span>,<span class="built_in">sizeof</span>(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;  <span class="comment">// 协议族，在socket编程中只能是AF_INET。</span></span><br><span class="line">servaddr.sin_addr.s_addr = <span class="built_in">htonl</span>(INADDR_ANY);          <span class="comment">// 任意ip地址。</span></span><br><span class="line">  <span class="comment">//servaddr.sin_addr.s_addr = inet_addr(&quot;192.168.190.134&quot;); // 指定ip地址。</span></span><br><span class="line">servaddr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));  <span class="comment">// 指定通信端口。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">bind</span>(listenfd,(<span class="keyword">struct</span> sockaddr *)&amp;servaddr,<span class="built_in">sizeof</span>(servaddr)) != <span class="number">0</span> )</span><br><span class="line">  &#123; <span class="built_in">perror</span>(<span class="string">&quot;bind&quot;</span>); <span class="built_in">close</span>(listenfd); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="bind函数"><a class="markdownIt-Anchor" href="#bind函数"></a> bind函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bind</span><span class="params">(<span class="type">int</span> socket,sockaddr * address,uint addrlen)</span></span>;</span><br><span class="line"><span class="comment">// socket:之前创建的socket</span></span><br><span class="line"><span class="comment">// sockaddr:一个用来存放Ip地址和端口号的结构体</span></span><br><span class="line"><span class="comment">// addrlen:上述结构体的长度</span></span><br><span class="line"><span class="comment">// 返回值：为-1表示失败，若端口被占用，会从新绑定一个随机端口（仍返回失败）</span></span><br><span class="line"><span class="comment">// 地址绑定为0表示绑定本机所有IP</span></span><br></pre></td></tr></table></figure>
<p>非root权限只能绑定1024及以上的端口</p>
<h4 id="inet_addr"><a class="markdownIt-Anchor" href="#inet_addr"></a> inet_addr</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">inet_aton</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp,<span class="keyword">struct</span> in_addr *inp)</span></span>;</span><br><span class="line"><span class="comment">//将一个字符创ip转换为32位的网络字节序，成功返回非0，失败返回0</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span></span>;</span><br><span class="line"><span class="comment">//将网络字节序ip转换成字符串ip</span></span><br><span class="line"><span class="function"><span class="type">in_addr_t</span> <span class="title">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span></span>; <span class="comment">//功能和inet_aton类似</span></span><br></pre></td></tr></table></figure>
<h4 id="gethostbyname"><a class="markdownIt-Anchor" href="#gethostbyname"></a> gethostbyname</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span>&#123;</span><br><span class="line">    <span class="type">char</span> *h_name; <span class="comment">//主机</span></span><br><span class="line">    <span class="type">char</span> ** h_aliases; <span class="comment">//主机所有别名构成的字符创数组，同一ip可绑定多个域名</span></span><br><span class="line">    <span class="type">int</span> h_addrtype; <span class="comment">//主机ip地址的类型，例如IPV4(AF_INET)还是IPV6</span></span><br><span class="line">    <span class="type">int</span> h_length; <span class="comment">//主机ip地址长度</span></span><br><span class="line">    <span class="type">char</span> **h_addr_list; <span class="comment">//主机的ip地址，以网络字节序存储</span></span><br><span class="line">&#125;；</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> h_addr h_addr_list[0] <span class="comment">//兼容性考虑</span></span></span><br><span class="line">    <span class="comment">//利用字符串格式的域名获得IP网络字节序地址</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span> *<span class="built_in">gethostbyname</span>(<span class="type">const</span> <span class="type">char</span> *name);</span><br></pre></td></tr></table></figure>
<h3 id="客户端的绑定socket"><a class="markdownIt-Anchor" href="#客户端的绑定socket"></a> 客户端的绑定socket</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">hostent</span>* h;</span><br><span class="line">  <span class="keyword">if</span> ( (h = <span class="built_in">gethostbyname</span>(argv[<span class="number">1</span>])) == <span class="number">0</span> )   <span class="comment">// 指定服务端的ip地址。可以从域名翻译</span></span><br><span class="line">  &#123; <span class="built_in">printf</span>(<span class="string">&quot;gethostbyname failed.\n&quot;</span>); <span class="built_in">close</span>(sockfd); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> servaddr;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;servaddr,<span class="number">0</span>,<span class="built_in">sizeof</span>(servaddr));</span><br><span class="line">  servaddr.sin_family = AF_INET;</span><br><span class="line">  servaddr.sin_port = <span class="built_in">htons</span>(<span class="built_in">atoi</span>(argv[<span class="number">2</span>])); <span class="comment">// 指定服务端的通信端口。</span></span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">connect</span>(sockfd, (<span class="keyword">struct</span> sockaddr *)&amp;servaddr,<span class="built_in">sizeof</span>(servaddr)) != <span class="number">0</span>)  <span class="comment">// 向服务端发起连接清求。</span></span><br><span class="line">  &#123; <span class="built_in">perror</span>(<span class="string">&quot;connect&quot;</span>); <span class="built_in">close</span>(sockfd); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="设置服务端socket的so_reuseaddr属性"><a class="markdownIt-Anchor" href="#设置服务端socket的so_reuseaddr属性"></a> 设置服务端socket的SO_REUSEADDR属性</h4>
<p>服务端程序的端口释放后可能会处于time_wait状态，需要待两分钟(linux下)后才能使用,<code>SO_REUSEADDR</code>可以立刻再次被使用。</p>
<p><a href="https://www.cnblogs.com/hateislove214/archive/2010/11/05/1869886.html">https://www.cnblogs.com/hateislove214/archive/2010/11/05/1869886.html</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> opt = <span class="number">1</span>; <span class="type">unsigned</span> <span class="type">int</span> len = <span class="built_in">sizeof</span>(opt);</span><br><span class="line"><span class="built_in">setsockopt</span>(listenfd,SOL_SOCKET, SO_REUSEADDR,&amp;opt,len);</span><br></pre></td></tr></table></figure>
<h3 id="第三步-监听socket"><a class="markdownIt-Anchor" href="#第三步-监听socket"></a> 第三步 监听socket</h3>
<p>在此处client和server已经established。大于backlog数量的连接将维持在SYN_RECV阶段.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/sys/net/ipv4/tcp_max_syn_backlog</span> </span><br></pre></td></tr></table></figure>
<p>syn队列最大值为128（centos），接受的ESTABLISHED的数量是backlog+1,包含当前正在通信的连接。</p>
<p>Linux使用两个队列实现，一个SYN队列（或半连接队列）和一个accept队列（或完整的连接队列）。 处于SYN RECEIVED状态的连接被添加到SYN队列，并且当它们的状态改变为ESTABLISHED时，即当接收到3次握手中的ACK分组时，将它们移动到accept队列。 显而易见，accept系统调用只是简单地从完成队列中取出连接。 在这种情况下，listen syscall的backlog参数表示完成队列的大小。</p>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220309232131451.png" alt="TCP三次握手" /></p>
<h4 id="listen函数"><a class="markdownIt-Anchor" href="#listen函数"></a> listen函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">listen</span><span class="params">(<span class="type">int</span> socketfd,<span class="type">int</span> backlog)</span></span>;【仅TCP】【服务器】</span><br><span class="line"><span class="comment">// 将一个socketfd设置为监听状态,专门用来监听的socket叫做master socket</span></span><br><span class="line"><span class="comment">// backlog:最大接收连接数</span></span><br><span class="line"><span class="comment">// 返回值：失败返回-1，成功返回0</span></span><br></pre></td></tr></table></figure>
<h4 id="connect函数"><a class="markdownIt-Anchor" href="#connect函数"></a> connect函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span><span class="params">(<span class="type">int</span> socket,sockaddr * addr,<span class="type">int</span> addrlen)</span></span>;【仅TCP】【客户端】</span><br><span class="line"><span class="comment">// 使用当前socket连接一个地址（与服务器建立正式连接），此函数会触发服务器端的accept、select函数</span></span><br><span class="line"><span class="comment">// 注意：服务端接收的socket值和客户端socket值不一样</span></span><br><span class="line"><span class="comment">// addr:一般是服务器地址</span></span><br></pre></td></tr></table></figure>
<h4 id="linux相关命令"><a class="markdownIt-Anchor" href="#linux相关命令"></a> linux相关命令</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">netstat</span></span><br><span class="line">-a 显示所有选项</span><br><span class="line">-t 显示tcp</span><br><span class="line">-u 显示udp</span><br><span class="line">-l 显示listen状态</span><br><span class="line">-p 显示pid</span><br><span class="line">-r 显示路由表 </span><br><span class="line">-n 拒绝显示别名，尽量显示数字</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">awk</span></span><br><span class="line">-F &#x27;:&#x27; 以:为分隔符，默认是空白</span><br><span class="line">&#x27;&#123;print $0&#125;&#x27; 打印所有的行</span><br><span class="line">&#x27;&#123;a+=$1&#125;&#x27; 将$1的数字加到a变量上</span><br><span class="line"><span class="meta">$</span><span class="language-bash">sed</span> </span><br><span class="line">-e 表示下一个是命令</span><br><span class="line">a:追加  向匹配行后面插入内容</span><br><span class="line">c:更改  更改匹配行的内容</span><br><span class="line">i:插入  向匹配行前插入内容</span><br><span class="line">d:删除  删除匹配的内容</span><br><span class="line">s:替换  替换掉匹配的内容</span><br><span class="line">&#x27;2ahello&#x27; 在第三行后添加hello</span><br></pre></td></tr></table></figure>
<h4 id="绑定监听端口"><a class="markdownIt-Anchor" href="#绑定监听端口"></a> 绑定监听端口</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">listen</span>(listenfd,<span class="number">5</span>) != <span class="number">0</span> ) &#123; <span class="built_in">perror</span>(<span class="string">&quot;listen&quot;</span>); <span class="built_in">close</span>(listenfd); <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="第四步-接受客户端的请求"><a class="markdownIt-Anchor" href="#第四步-接受客户端的请求"></a> 第四步 接受客户端的请求</h3>
<h4 id="accept函数"><a class="markdownIt-Anchor" href="#accept函数"></a> accept函数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">accept</span><span class="params">(<span class="type">int</span> socket,sockaddr * fromaddr,<span class="type">int</span> * addrlen)</span></span>;【阻塞】【仅TCP】【服务器】</span><br><span class="line"><span class="comment">// 接收一个客户机的连接，返回一个socket，来自客户机的socket叫connected socket</span></span><br><span class="line"><span class="comment">// socket:用来监听的socket（master socket）</span></span><br><span class="line"><span class="comment">// fromaddr:客户机的地址信息</span></span><br><span class="line"><span class="comment">// addrlen:地址结构体的长度（输入输出参数）</span></span><br><span class="line"><span class="comment">// 返回值：返回一个新的socket，这个socket专门用来与此客户机通讯（connected socket）</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>  clientfd;                  <span class="comment">// 客户端的socket。</span></span><br><span class="line"><span class="type">int</span>  socklen=<span class="built_in">sizeof</span>(<span class="keyword">struct</span> sockaddr_in); <span class="comment">// struct sockaddr_in的大小</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span> clientaddr;  <span class="comment">// 客户端的地址信息。</span></span><br><span class="line">clientfd=<span class="built_in">accept</span>(listenfd,(<span class="keyword">struct</span> sockaddr *)&amp;clientaddr,(<span class="type">socklen_t</span>*)&amp;socklen);</span><br></pre></td></tr></table></figure>
<h3 id="多进程搭建"><a class="markdownIt-Anchor" href="#多进程搭建"></a> 多进程搭建</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(True)&#123;</span><br><span class="line">    <span class="keyword">if</span>((clientfd = <span class="built_in">accept</span>())&gt;<span class="number">0</span>)&#123;&#125; <span class="comment">//此处阻塞</span></span><br><span class="line">    <span class="keyword">if</span>(fork()&gt;<span class="number">0</span>) <span class="keyword">continue</span> ；<span class="comment">//一次fork返回两次，父进程返回子进程id，子进程返回0</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//子进程</span></span><br><span class="line">        <span class="comment">//子进程关闭listenfd 父进程关闭clientfd</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">//退出子进程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="避免产生僵尸进程"><a class="markdownIt-Anchor" href="#避免产生僵尸进程"></a> 避免产生僵尸进程</h4>
<p><a href="https://www.cnblogs.com/yuxingfirst/p/3165407.html">linux僵尸进程产生的原因以及如何避免产生僵尸进程</a></p>
<p>如果子进程先于父进程退出， 同时父进程又没有调用wait/waitpid，则该子进程将成为僵尸进程。通过ps命令，我们可以看到该进程的状态为Z(表示僵死)</p>
<ol>
<li>使用忽略信号</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">signal</span>(SIGCHLD, SIG_IGN);<span class="comment">//屏蔽子进程退出的信号，避免产生僵尸进程</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用wait()函数</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sig_chld</span><span class="params">( <span class="type">int</span> signo )</span> </span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> stat;</span><br><span class="line">    pid = <span class="built_in">wait</span>(&amp;stat);    </span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;child %d exit\n&quot;</span>, pid );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGCHLD,  &amp;sig_chld);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>多进程c/s中使用waitpid()</p>
<p>我们假设有一个client/server的程序，对于每一个连接过来的client，server都启动一个新的进程去处理来自这个client的请求。然后我们有一个client进程，在这个进程内，发起了多个到server的请求（假设5个），则server会fork 5个子进程来读取client输入并处理（同时，当客户端关闭套接字的时候，每个子进程都退出）；当我们终止这个client进程的时候 ，内核将自动关闭所有由这个client进程打开的套接字，那么由这个client进程发起的5个连接基本在同一时刻终止。这就引发了5个FIN，每个连接一个。server端接受到这5个FIN的时候，5个子进程基本在同一时刻终止。这就又导致差不多在同一时刻递交5个SIGCHLD信号给父进程，建立信号处理函数并在其中调用wait并不足以防止出现僵尸进程，其原因在于：所有5个信号都在信号处理函数执行之前产生，而信号处理函数只执行一次，因为Unix信号一般是不排队的(我的这篇博客中有提到http://www.cnblogs.com/yuxingfirst/p/3160697.html)。 更为严重的是，本问题是不确定的，依赖于客户FIN到达服务器主机的时机，信号处理函数执行的次数并不确定。</p>
<p>正确的解决办法是调用waitpid而不是wait，这个办法的方法为：信号处理函数中，在一个循环内调用waitpid，以获取所有已终止子进程的状态。我们必须指定WNOHANG选项，他告知waitpid在有尚未终止的子进程在运行时不要阻塞。（我们不能在循环内调用wait，因为没有办法防止wait在尚有未终止的子进程在运行时阻塞，wait将会阻塞到现有的子进程中第一个终止为止）</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func_waitpid</span><span class="params">(<span class="type">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> stat;</span><br><span class="line">    <span class="keyword">while</span>( (pid = <span class="built_in">waitpid</span>(<span class="number">-1</span>, &amp;stat, WNOHANG)) &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;child %d exit\n&quot;</span>, pid );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">sigfunc* <span class="title">signal</span><span class="params">( <span class="type">int</span> signo, sigfunc *func )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sigaction</span> act, oact;</span><br><span class="line">    act.sa_handler = func;</span><br><span class="line">    <span class="built_in">sigemptyset</span>(&amp;act.sa_mask);</span><br><span class="line">    act.sa_flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( signo == SIGALRM ) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>            SA_INTERRUPT</span></span><br><span class="line">        act.sa_flags |= SA_INTERRUPT;    <span class="comment">/* SunOS 4.x */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>           SA_RESTART</span></span><br><span class="line">        act.sa_flags |= SA_RESTART;    <span class="comment">/* SVR4, 4.4BSD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">sigaction</span>(signo, &amp;act, &amp;oact) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> SIG_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oact.sa_handler;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">signal</span>(SIGCHLD, &amp;func_waitpid);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="waitpid函数"><a class="markdownIt-Anchor" href="#waitpid函数"></a> waitpid()函数</h4>
<p><a href="https://blog.csdn.net/yiyi__baby/article/details/45539993">https://blog.csdn.net/yiyi__baby/article/details/45539993</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">pid_t</span> <span class="title">waitpid</span><span class="params">(<span class="type">pid_t</span> pid,<span class="type">int</span> *status,<span class="type">int</span> options)</span></span></span><br></pre></td></tr></table></figure>
<h5 id="pid"><a class="markdownIt-Anchor" href="#pid"></a> pid：</h5>
<ol>
<li>pid&gt;0时，只<strong>等待进程ID等于pid的子进程</strong>，不管其它已经有多少子进程运行结束退出了，只要指定的子进程还没有结束，waitpid就会一直等下去。</li>
<li><strong>pid=-1时，等待任何一个子进程退出，没有任何限制，此时waitpid和wait的作用一模一样。</strong></li>
<li>pid=0时，等待同一个进程组中的任何子进程，如果子进程已经加入了别的进程组，waitpid不会对它做任何理睬。</li>
<li><strong>pid&lt; -1时，等待一个指定进程组中的任何子进程，这个进程组的ID等于pid的绝对值。</strong></li>
</ol>
<h5 id="options"><a class="markdownIt-Anchor" href="#options"></a> options：</h5>
<p><strong>如果使用了WNOHANG(wait no hung)参数调用waitpid，即使没有子进程退出，它也会立即返回，不会像wait那样永远等下去。</strong><mark>即不会阻塞信号，linux信号不排队</mark></p>
<h5 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h5>
<ol>
<li>当正常返回的时候，waitpid返回收集到的子进程的进程ID；</li>
<li><strong>如果设置了选项WNOHANG，而调用中waitpid发现没有已退出的子进程可收集，则返回0；</strong></li>
<li>如果调用中出错，则返回-1，这时errno会被设置成相应的值以指示错误所在；</li>
</ol>
<h3 id="多线程和多进程"><a class="markdownIt-Anchor" href="#多线程和多进程"></a> 多线程和多进程</h3>
<p>区别只是在于clone参数不同。线程创建时，父子俩共享虚拟地址空间、文件系统资源、文件描述符和信号处理函数及信号。创建子进程，则是注册一个SIGCHLD信号，当子进程终止时，会向父进程发送一个SIGCHLD信号，即父进程wait函数收到的那个。</p>
<p>即pthread_create对应fork，pthread_join对应wait。</p>
<h3 id="io复用"><a class="markdownIt-Anchor" href="#io复用"></a> IO复用</h3>
<p>多进程/线程为每个socket分配一个进程/线程</p>
<p>select、poll、epoll，单个进程/线程管理多个socket</p>
<h4 id="select的流程"><a class="markdownIt-Anchor" href="#select的流程"></a> select的流程</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220310161722370.png" alt="image-20220310161722370" /></p>
<h4 id="select模型服务程序的流程"><a class="markdownIt-Anchor" href="#select模型服务程序的流程"></a> select模型服务程序的流程</h4>
<p><img data-src="http://hz-picbed-xxh.oss-cn-hangzhou.aliyuncs.com/img-bed/image-20220310162615636.png" alt="image-20220310162615636" /></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setsockopt</span>(sock,SOL_SOCKET,SO_REUSEADDR,<span class="number">1</span>,len);</span><br><span class="line"><span class="built_in">setsockopt</span>(sock,SOL_SOCKET,SO_KEEPALIVE,<span class="number">1</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> listensock;</span><br><span class="line">fd_set readfdset; <span class="comment">//创建集合</span></span><br><span class="line"><span class="type">int</span> maxfd;<span class="comment">//readfdset中socket的最大值</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(&amp;readfdset);<span class="comment">//初始化结构体，添加监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">FD_SET</span>(listensock, &amp;readfdset);</span><br><span class="line">maxfd = listensock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    fd_set tmpfdset = readfdset; <span class="comment">//调用时select函数时会改变内容，需要保存,下面查询使用</span></span><br><span class="line">    <span class="type">int</span> infds = <span class="built_in">select</span>(maxfd+<span class="number">1</span>,&amp;tmpfdset,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检测事件发生</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> eventfd = <span class="number">0</span>; eventfd&lt;=maxfd;eventfd++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(eventfd,&amp;tmpfdset)&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(eventfd==listensock)&#123;</span><br><span class="line">            <span class="comment">//accept</span></span><br><span class="line">            <span class="built_in">FD_SET</span>(clientsock,&amp;rea dfdset);maxfd = <span class="built_in">max</span>(maxfd,clientsock);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>select是一个1024位的bitmap位图</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">select</span><span class="params">(<span class="type">int</span> maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,<span class="keyword">struct</span> timeval *timeout)</span></span>;</span><br><span class="line">timeout: <span class="literal">NULL</span>为阻塞函数 ，<span class="number">0</span>为非阻塞函数</span><br><span class="line">成功返回发生事件的个数</span><br><span class="line">FD_CLR <span class="comment">//清除位</span></span><br><span class="line">FD_ISSET</span><br><span class="line">FD_SET  <span class="comment">//加入集合</span></span><br><span class="line">FD_ZERO <span class="comment">//初始化</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>epoll在默认情况下是ET边缘触发模式，select poll是在LT水平触发模式下的</p>
<p>什么是边缘触发和水平触发？<br />
水平触发： LT<br />
只要缓冲区有数据，就一直报告</p>
<p>边缘触发： ET<br />
数据一次处理不完，下一次改变状态才报告</p>
</blockquote>
<p><mark>pselect可以屏蔽信号</mark></p>
<h3 id="select的缺点"><a class="markdownIt-Anchor" href="#select的缺点"></a> select的缺点</h3>
<ol>
<li>支持的文件描述符数量太小了，默认是1024，且数量越大，效率越低。</li>
<li>每次调用select都要把fdset从用户态拷贝到内核</li>
<li>遍历fdset的效率很低</li>
</ol>
<h3 id="poll模型"><a class="markdownIt-Anchor" href="#poll模型"></a> poll模型</h3>
<ol>
<li>使用数组</li>
<li>同样整体复制于用户态和内核态之间</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">poll</span><span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">nfds_t</span> nfds, <span class="type">int</span> timeout)</span></span></span><br><span class="line"><span class="function"><span class="keyword">struct</span> pollfd</span>&#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="type">short</span> events;<span class="comment">//events：表示要告诉操作系统需要监测fd的事件（输入、输出、错误），每一个事件有多个取值</span></span><br><span class="line">    <span class="type">short</span> revents;<span class="comment">//revents：revents 域是文件描述符的操作结果事件，内核在调用返回时设置这个域。events 域中请求的任何事件都可能在 revents 域中返回。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="epoll"><a class="markdownIt-Anchor" href="#epoll"></a> epoll</h3>
<ol>
<li>
<p>创建epoll句柄，本身就是一个fd</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_create</span><span class="params">(<span class="type">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注册需要监视fd和事件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> op, <span class="type">int</span> fd,<span class="keyword">struct</span> epoll_event *event)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>等待事件发生</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="type">int</span> epfd,<span class="keyword">struct</span> epoll_event *events, <span class="type">int</span> maxevents, timeout)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> epollfd = <span class="built_in">epoll_create</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加监听描述符事件</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">epoll_event</span> ev;</span><br><span class="line">ev.data.fd = listensock;</span><br><span class="line">ev.events = EPOLLIN;</span><br><span class="line"><span class="built_in">epoll_ctl</span>(epollfd,EPOLL_CTL_ADD,listensock,&amp;ev);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷试炼场题单备份</title>
    <url>/posts/b8bbe518/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="82d0a7bcc287c563f000846c5e07e47bfab4db4f66b0b12dc1ef9ee54e82ec79">8c5eb7d299eb8204d1aa11d5321f197070c0692a154a42c3a693add1385ee43524cabf2252f20d80532f687b1bf5959beeadcca91fdf0e01d43bc3cbe9f1f2b022d0ae9cc8d40d08cac301bc083fc77a744d157ebd4611377712b21153b00633e2aeff559a871b41b514426b9af991f5e760f8b3bd2564bb596524235999e4691f1c171d9cf8be6f12dcec415d75727c6f483b38a9767056662611d9516f753b43d5183e3a79bd2c79ba12eed7c40ef69c1920215287206b6d072c2b2bd2bf0c844b2c4bbbc133d9c469318a6f2cdf91e64603f046ec6250ce06317536bb2af5cf003668fd1279dfad31a6778c894e09d85bd0e1375a598f7dd3b9283bc3e8d281244bf02473138e719aac968f8ce69b75808cb251249147874effb9b552b8401ae19d66ed7c443e1f5a8c429ecc4381f0aa610f7bcb5873cccf60ade4aa6dcc728620b9dc8b715b44a5a2829211a46e44666be112443ca097b0336b1fa5dc1f8a0568f5a3c0f37a4735d1a951289a38aed0dffcb6a1f581a64a83048a6159d445cadae5f1d0641b6631bec57e32eb4944c878a81e444ecd240ec7d01fb722f9b491f8b7ab8c91cc018551979d4b815e457bb3146de7f4724528f4a04a9be61ae3842fb757b6b9ce190f2d1cd17464b721ed74f143be79e9c718d1ec9227fbf2b959e39564c3de77bb5c7682f23182ab3e80c2fa4c5999e13dcde592f6594f002ba885a6250a144ce2d13d35d05840c9472666fdf436a834443b17400e63cad2d6133c48f353a17def28b107df526fa01c495ca8dbefe3aa3fd80bbc63badc4281bfaaa2c2dc8798d79a6fda73ba7341e503961691f256924b19f9e9e8d430039c8b7836bf7620c6b39118a4f9c8eb8f0b71d92920a4c36e0948014f483e5f85b8ea90da71fc2a08364ac7862e5db7237db19b5ddd97f9936f798baf25077385d442a25365924698b7c34b80b3fab933e58f21d840331066aeb158ece4070a99f7806e3f1d329fd15f97f79988c21da5da5557084addeed59161ea14c39ed747d22eb549a66fc820e555edd5abbc3e3908244acf3a1119cd31efeccdb4094a783f26e33c0dc097d106ce200818ff62ec8908019b531bb1803709c81f6d68256cd60ad5788937f2361104f85ed8a5520abe31aaeb988ea9e2b926bd89d7faf9e22f2d7ef5d08f5fbacca09b058075c1428bf1e08e2363371d3efc42f582319c6a9b81384d2fd0abe9df9fd463b2cdfcacca5956d04f03f83071c89f51e1c0be74ff4f01994fa2058581b40a0318b225eb61c6dcdb02def293507f302782fd46fb4fe77980beb9432670869d6e445af98e018932ba17578358410cbf75eca7a4bc0f181d8fa491f5f08f621efc6053113a148c9c691647edb351a55b429ad20f7e63fa5031f69e3395ee3fa0797dc4cad5a4c7767d33f23357c3f2e7f05669d1180617381b976c233f12913a02c831d4a9a97eb5e11aab76f4ea30ab62372f36ef41396d131645f4cae318b21a3d0434dbedff2db2a55eaf0178883ec424d0f6d0f89c2775966d0e4621c2f1551120f759e16987362df88dcd3612b01eb12856039464b86e40ca0c397b074f287cd1f238dca708b5048bb9abed5db33c0625574c63e0e835b3ba023346d027224f2467e5554c3122d94a656e444caf3f8d7cd6bc3b9b1daf8b2a6062154417e5e5ddb4defd2e130343532ba34db2d2fc611d3997e49a1000a21ee1b79c4ed4c1ba40d2d7bf391e588f8f73c0dc2e8bce1f5d9f65bd72ecee0a16acc0d54f49780533bc2c63be03424bf2a6659ba37845ef8078762ccff90a9aceff2e8ce4cd808d9dce0a3f971fb21ec232805ab82a88c17e2d0196e0c34501a1ae96146206d6f28050e8260e2f3bf1bc3b2ecdb3fae730a007e1f12bae0e49b597c3831a1e29b08f519850749913573a3a161109d32f00831a546a1c17871ff8aaddb029243185b5e3843a6d48568d80299bccad1241c236d9847983f56885375d8eda3f6ff1432aaf034685d13bd7ccd380259c30fdbc0bb4ab64bdf1a9002a44e9c50d34220060903050761f4b27a169055cee3e439b5951ce37db8df5c3e6ab37beedc4960e0cecde9481802db6edb59b23ebf41ff33894eb8609dc9f2c4517738bfd0bc077124b210d0988db82b88e829b9670373e399f8fa36499540bd1f9ba5e7444384b9c386e4ea078b106e18dff43337a5bbbadaee7c91a2a5c64610113c830a470b72666dc7d65564ae1bf8c3c47c16cd8fcbc5cf04ef6cded06c083b526a7dcf3f602d39f0bb904ada5c7e4f428cf7986eb662bc54ff3274dc30e86a53c5ea8a9c12fd8ef0a69c58fe563ca2d625749af54ad9f9c654ef02825ebee042ad3197495bdb76a77339a6a80161ff5f8f4cf44d5feb6894626a3be4161c53b48f63b21a54ee0c91a13726229ece66866d3950da8792b61cb042f6fb1bdcde83fd12b166a4f78348d85ca5368ed1639c1ad2d399a040578bd1379aec94bf605e0ecefe5476136b42b0e41304e6efbda7a1f5fa5ebaaf8d6d4db4613ff3b3e177f9558a47b511c4e2026d49d7eae23dc612f8f4e6623891d01c008e191a0bd21025e120ef51cbb697cdc82f71dd24cc545a2bea32db8c27a313dc2fe19bf74a83e9ac1c74eece8d49827fe81891256c1ac1edc2d6bf6a0aac1235f64cf907456aaaee7b3a52aeafee3e1f99e3a3d7485ead1300f0862b1234d9c26e5cce0b37e6a8d6c73142f7186148708345d60a7791f56c06d8fc7d267152460f6e9cad2f00563542a9cec853ccc771a015064155f3ad628d2f0f0446a15d2232220a9618f89e1e93bdb58d5968a8c54ea0f0cd4767e64021f252829aa2b790e35b2f1552cba99c8724a381c9cd0f169bbfb40ab96131f10a62373bc5e531e1b9c05637ba54f96fcfd9d7cfceddac3e977f1f3bc1cdaab743cb2b0e2ce27d434c2ba317f2a89d65715ae47eeb2d8f2b58ad0fef17f1ff4bc1c69e942eb4e60ecfed26d84504c89508a108666fa1a81a2a92ac62d7c0d0da990bb3ceb61039d79cdada41f5753989646dbe2c1b00c51911c1dcccc585b4e9324235f6d1ff150b1a7aebbd1683258e12571f38670ed32a7ed7f021a5ac79d24c7a92aa0d03d008a7c5275d43f3a02e072703d8f7fc399d0d58abbd7b263299a53dfdc9fd343da33fb037d80b46297b61f46367550c844651448d7a68c8c0bf42f4f3541e5cd88da8cdf4c9a69af16d89505856bc064ced9f6e1bedbdf17f8ed873c219667cfb6ecb1677a242986dece7222e6ec0726c2f28ba4de43cdf06d9c38ef183a569a46755c88922b46311140654dad4a0a4040b0315def173b34798735639a4fb9bb7bd904ca71ddeeffa2683c1b56b5dcf4ef21d666a6b59bc8b1131e34a2fefa7f15c095be6ab169e0a68e0f632a99c9466063642d6429e5e477d5db1561a8b68d33bbc8b82455e6853d76f1934aeb67baa029ba5abcb76ddc6dcfc26f192b4cadc545bdd44e1d72cc35f4dc9484376909d662817d92e8a52762fa6eaff83a1be1c43b47a7aee66aae5e722c03b34ef8f1319a436978888024d42625eeb643b31ca6d34a3156633325c27aed71fbb6c38c887535483166cfb17030f38092f7b8d11488387efb3361c3beecbb0e2bc1ef79b104b54a93d04286bfba8c8d5dbd2a30e422f6d94e88dd3df4f04ee04c0c5b1d425d49f1b467a7f08f3a353dda014ee20aaeab0f4bca3b90f0e75b7105f8aebc0c5936112800e3dcbc69c212d8d944a6de025a55f814761c25e227b4af8e4bc854473a3d14e93940b1a46ad24ea978eadec2cc9259258992506cd1528cd395b9dbdd01afee7d2c93d5388dc15d230b02f2d0ddae55ddd902a5f1d3b9dfdcfdce4063fdef5c97efadce5ac162edc3ac72e66db59cd8d63b9a550ac704a228ebd0eff2e134de6c7439a5db9508682a0e9c453b4a5f208fb95f9f95782b191188a90da293e132aedcb31395f3054a6691a997f9b380192445e1a7fc22edc0cde7e8582b77f1fb44acb900b22ff91e3b0f3b14e467d54f522dcc720bfdb27e427e222c3800351425cd0418b1d7e75004099d5eacdd448cd8cc90fe5387ec60758a74f5502f4bd247556a28b85e122e8836384eb3395e8b564c169b04647db963d4a9273c7b643709aeab0c3f4f4a977627d290f239f393aa89c75be50842899cfeb3e7c838b627fdfd168ba35e1ca84259171b651daadcb1e3201cf6dc90ba9ca147c20b181474001766d25308bf3628b156dad288c2da39a33916df4f9f24a0a92f3e202458311443e2226a17aec6f3b32312e1f6ef4fed23d436b809b64d58e5c2d717bef375e98c3f91d82913f6e2a5fd4ef263a05feccb59a0cb0d539838ec7010b373c4398fb7f74ef91c33664acef37894b93b941c9121d80d623e0b22305b666d2d9ad33401956b1aca05328c03a0c1f4791d2a47212cdeac2e70a45891ac981dd22a8674d796f50d260bcad0bd02fdde08de1a07c0a95cf7b29ead47daa88a931404f8a0efcaa933ef840f0bed9d9bf7423a4bf475081a6afab79181ad878e65f484fd9487b3d67dffedd085d7a3b3bdf98ff15fa6ac6f6199e448bf18a578907f8df6e0f0f5a4ce5ce5d9ad6ca1c8de79c867d1fc87487f0879f08c3a338a48507b83c9759f28e9300719d6d6cba1b39e0ef0353e067c2a78943cb83a84ca324dae3b829fd951ab16fd991849ecdc8600c7e312d25ce77e976571d51cb8473f01534a9060871b8647ee3bb92ed6e11484e1102fe053b25019ccf248a3cd534991252068627580dd3a310ada20162acce7d7e4abe7a63857c476ed9284f27d13fed09e2a57531001d79b8c3a519aa80d2ecee1b8a014274779b1a0b6d7342e8a3f1fb253c51f3e855550c5d8b35d3fb007aa523381e14ee34f7933aa66c43c4fce0325eb6b0cd343a67f5357f4890a7705c213a426f6fbf3772ed40715a457961e62e2484986b22e5f85db9782e8905a635b6d5ea2da5637a208aecc5e87c1e49245d526cd65bfde0bdfe3f7a2391b5df00e78f794e8e744d98547407c793391dd53af809669d8d5ccfaddcdabec4e629785089924cc646231095cd0bf9a8f7814d0e38d8d2aaa8bdbf1469a003f43a7b77447c72d7b0c6c98d5ba3a272c41e40ae0d824f9a0d69d58beceff2a411984b2aaa803204298ffae02875e1515755e75bf3735b8ae8e312ae1f03a7944d5bb1e3920d94de1cc4d2442020d7739133a44e2e7dbab2961699475750edaf861d8559c0c75a032612324ac0f0228f4377026993820a8ec3f3d7828e4b8e5f41c163abf4b44fef47eeef9d0386259f9162d0929307f65086c0b9108cc46424536f0f70ded21e40aae5a08955cafae41222ac467012295fb686ce1b83c27e312f722e763bb34f36c00fc61395fcaa1ecf887b80f89e20a6fdb1ffd0e5abccf15f08fde9f23dc3186b257be607651d88a7a187e1254976ca58def1d5ab0a91520a9ae96280c9e99b1ce75f9009316dfad6e6a48531993e48dfef738df44ea926380d662d74eb7a268fc09245772007669c8e4abfbaa573d35fc2e6ab3a03d06126130f20da9ead4eeb23b5d392bbbd0f37cef5c8bcf1a5d00678bd165d61e79191ab7988013b3d9e2cf6ab0cd1ee3fe7c0bc2911ac1d848a9c7168536b72c179985aa350774e8a22a3248e6a55d811ebc1fbe95586de11f1951f4f19d5f20e79a8150a789c7be959232de8779abf45fc95ffb9c40ab0a405a08d4784c29a4a9809348fe0df714efbb50ee487d98ce0691061b05626f4b7c25b7b390e551719a525f2d689f8995f282a3217a294353bfe1a8ed7eb3d0f3df01cf03d8fb6d626661c38449e3a4c1ea3be72f582800786d8b834d2ffa734293cd05e23206b17c5cec5bda0159947c1e369efe2cf9048646f47e71f32feb6e211f0ea8f474ccdb2f3859c2da629ae1d02ae9e1aba0d3f850e80fd14c5167c01828f26e3eda098141bb1ff10e57cd78c0a92a2dc5a6eb77b61e315c4dfca44d84619d22ba775db19684fc72b62f945c344be96c9a81e7d24c0b63d1ac31bb7d44972c90bc90a16cc2e3196f592def4ba526c7e2b0f6d5da56ad0131048cd63ceb4c287c2f5ce9c21a3d35aad725165c572b88995a57f9d83b4acb93ae3f622356b8ea407682981e10b96566068f28587cda058a7f1227bdef1d481e6f726cfe091205f2bdd863c99c705ba559642662c37f5d1f87d73196fbf99336c042eee807328633780bf55d87848c34ca0ec1f4fc18dece3517ab9d328f0840cf53b4f91fa372785fba0d01624f0ee142a5c34b600a22c40e7c3b9210355ba54c253e827df9dbc45e76a3e5c3b86ab5d7dcbb0352f41d1f1322769aa0d5084c2ed3b7131dccbed131891e79e9668728f15de3d6689b827385fd6f2fdaadf928e45c95a30939fc72014a89803a4708ed94f022c30a5d7d1dcbbff0bf73cd331844ab1231dca4ab2b8c8ff8b5e8a0395ba1f2b7a452220f6a353eddd4446d31309934c3e945309bef733220eefc9fab8bbd4f071d093e92989194d5bb000e1046d49e804c361ccda6a11aa07cbdf6ccfa47bb779cbf03ce4d6ef99f03447c2d2085cd3e5f3dd15aaab6032ad7aa71de290154b588e5dd109dad09e90590557ef212ada5456d6b61fe054addc8354f6e5e3e7a0dca0dac47d9d13168bec80765413d5639503c82a94e0def4004268079603b40038a26de42e88ea10c3708451f782ce2f16a3824ecce2cfd95b32a752c8e1fa85d2548d8f669335331d5e54863b507fbafb18c7220b232814b3acf65bfb596aa885a93391ee4e7bfc473743d877f2f29247de3634c0c278e59004f69f3e7ecca61d6531ae92af50b9a2f0c5c97e608c8459265955515dae075208e10e0dcc7a5b1d409cafce8ded09b52fad714e3ef51fb77d5c6382ad40d776d6c43f229f1778681b1ce2ef1fe40b6cb44a91718cd660661a9d07f0f2cfe509d552671e2f1c726269abf411aaf87e853ab64428956e71830b3bc31c43dec0c4c4cd9399c188f6a8306b28ea0afabdce39bfb5916ea50005916a741feace831debef1ff6096f2705b7c535994172c81d2a8b49d51d7dc4754bd86624e2e862f4a532f11a39e99164c38bf32b462f80aafc0a28cfee06a21b5a7384c42306afaebe3cdef771b4caa6cd94c222bfb53e6cca5e3a4812706c4bfee2f065e6906257b0a5ea35e68f6ecb0a96b9dd6c5f324cb632847a04df59193c4a7d1ba4c3c73fa4a495f638f011d99c5c33600a9a1a9f341f2a044f33e6f7798bdbcd0808831835fdfa9453e25860cd16a67401daaf6aed1af1d893ad1a6b90cd906b9f0551bacb4e4cc429cf881fd5315bcef3a75002027ea4e05f976b87808eed157240f5fbc90d78296bc568c60d85d627b7b00cfdc8295f3c827ce632bdac234dcf4a2ab205901ffa52b801064fdb1f0d39b577b4b9bc7e68d3a33f5e65862f72ee9430420057af45408e3d3b69eaa92b04a2501beff2b21965f5f13cedb7784dc835ee1405eaf6c59ddbac230a9b003ae7d9575369c26a9cd96dcd192522cbfdcd28b737922fb44d89106659b29fb8733f486a5e183aa56230dc0eb4e864259bb2123e9dad65551d2855043daa07f342282a4e9ba80d44333ac63b0fbfcb8585eb67ac641fc8fa227b8ac4e258320a17f928749f6c9aa2779d45983969f1057a46ecc279a9e98de7ca060d8b9447ca1da91ea17208e43c1420ce740b3c59c7ffe90e12860e37a0ab13125e968cf4ebe3e32e9312b3838eda4a62d9a5746beff30a9881d61724fd802e08aa5a86559ddaec46082e146048e5a502507e65a1e5723fe5fa77ae7830a865349448626a374de0b61577dd5ba353ce04c1a363b66046b44bc1676862321ca005f5c8e91ebee9995645b3b597777f445ae510d5b4682bf694bc47982ae07020f9a07363341c914b9c24bccefd57b1fb8e9616e77c35563ea47421bb4b0ff50362bfc609c677df3897d8400d017374ca94ab1756f46068cbd055d3ab8c1501760b3446b28f53034981f848e2df72bd3421e4708cb1a60b400930b15f5ef7ff9ff255296887789639be7425a713d29d080872a8a5db7e6e4767d2b7a507acc5e6dea49924c2c680608eeff935d437013faa923a09a571c745b2f8acc8a307060111baf36204864663ae250c017dbd7b2eeea9846170ba956716bb558c2a1ff94c34b8ad497982c0f9c7131f23ad53b70ecc6d04b4e91cb03aea7b7be55fb6b1d65b1c851f6dd248f5e51631b3476aca39512c4a4a97a4bc12602528e07370c91d3e20ea97af3db128b0d32dfc1cffa941875eabe22b2e92b513ad9d71e1e1866612948c50b7015438a8f1df179df3f4d683412a2c0918bf8e13ac892836b607f578d47a83f85e6b670a5fe8ac93181d5656dd7f60521e3ac73f9aa492eae223aaffd7f00d9437700b32f28adbf9363d0cd6a55b2abe2d6057b2598aa8147b52c0191abaeb56e1d2811a9855ba3e562f0554d2fc529ded622b72a037db0e0f0eee56bdd27ef967278c509f2aeaac38c9b3148404fe9b824fae28684c43f435ed38895b8c5cb20f4fe9c8d349937c28640d0653023e1e6248394a27c14a450e9c89dc4d7ec12976273b3a9e947267db2ece76932bc3bba89d29daac523e11acea302764ff07b1349d81d25be168a6a0e77748a19149b548f320ee6fe862375881703d2b1f0360e122139298a3ece61923bb9d6823a8e79a3e74d5c8f9fd263525accc24577ccf1db98da5e1043ca79767d4a3578cb05beeabcd30fa37986acb8382a0318239777cddc5bae5fbe0cba5b8da3cb1512126688c863cff18bd762283000646fce13ae281d980fa37222d9025e4c0a446bc335a74e0c645d96b9b1a1e1144e6ff71bef91ba1e5e164cf44608b7667b96c115c2a5d7b6903d343490c54ea695ff6858ed43d723716daf20b2bc9553d8e2578c38db90b8460f65ab5f12242d5b44da1b4e31950eaeceab02b9c184121964e2d68e56534dfff3dba4d530a956c31d09d45f70c0511bad97789765554ef1271bdc4ad78393f421d55b4f1a71ef0251eccfbd2b5aa2f5e8f7aa85e5d4316613774e45fca70a0f8ba2cdbf840012e1b79bbb26464964d350e0575dff492b8e36b788ff9573060a51a1c3ecb2b54a5b453cee80ec477a441c70214bf75712cf393cbaf3dc9f38cf2608c7776e41929045d01064233e14cb8fd3f9393d1720d0334ec988e3c345ce11d6a4644b93e02e0f9ec8a0b1131e77109de8babc22bae7fb5d38df35c79842cc2bdd977181b221f72fa2c4efa2a52997fce9127c0bbe80055f34e50445ae2dd3fbc20e4f6a79883c9830246219e61f1afd29a6836ab3ef73d3b0e852dff34e9f7fb8c7d32b608e4ea52b86aa1e6ababfdcbf8ae13ae967faefeebdb5b79b98d04b63cdee4e3bf0cb99a3ef3401d51e6e822c8f98e0969610c4909a8c1ffce04537f14d4924fe7494f0e2fecd25def6849c3243f71cc386e9b4d87c3fad7fe11ed343df74d5dc4c997fa3cd79d4005cc349fd3be1d26c07a0f0c0631c0a4cb6ddd5e9bbfb5c127e67896ad53fcf8682c2862c5c02a253de959c7286d5051af33c43df6dc9420e09002b6ce556710bf64a4a67af9260ba8338f21dd1891e51c809b7c3a9f83cbdb37b1c404c8c688891cfbbfd1c011e1ebac365801e4cee5e0762a73d63b92d417e1986101f5aebb9c588edd8d8e06871e373e24d4c49f0b254d46a83c6a8c4bcccab0aee49eff6a083da1c9f56f5772610bada5941bdf374f3f7f47a8d691a8a539ea6cb38edaaebc6b0df31c9806ecaec02fa2814f1eb12a6a032b06e98d6689ee0ef80ca93d82fe5ee68ae40813761d0e70f71fdd75c829ad5d5ddf06febd8b991539adde4382e1f9e73a75dbc8a80619e26f6a40beccb7544e7611b5a5decb00e6ff41b534535029ee195472541e7a66dffb0e38bb2515b6df696ba4b42d4b5bb6e70c8b82593b650d714a4a35e6676aab7448cafa2ad1ba49c043743b0871ffaf6ac1210c8837665ca8cfc8dcd926b902b92abdd9bec48ea858d1b93331caa151bc588416fd5fe21ed97eec0245f3df3f60cb98593c19ab4266ca4ea7343c3f3e15b8cb2930d3b9f0cbe9b31e0e9c442e43461c381befdb23cf221cc4dc44d8d37252275fb66e55cf0d76b737fd7e40eaaa48dfa33c8e5f5bc983a892314f5f31acca02bcc438c500cc34c4947b983260a4e0ab70faf336463b0a3ae52ab99bcbf53296ac154c9817a21c7efe3db7f05514d05220dedff2435d31a13a03fa2138eb28281afd474bf2c5091a31e1962f3fbb9033af86f49d1a4347a54b08c86b1239f153ad6af6a34efca56d8b675555cda8c8d6fea9a7a5c3c33a0f341a094445bf1bbb8de529a958f887d7195aaa92aaeb64292b64a5f466655b848519654a438b44fabf7eb3a2f404bd3dc8b1b7bd4eeff0fcc356f595a04fe33dd41219e11baef1cc449c3488091a9db71c2dbd3fdd8f23def1320f99183b17a3739db9c8d0d1732c34ff1ea932bac21568b401f4cfc43197c3aca84edffcb9a83b4c0a4eed37059904e0280a92a6d97e8252978be12f73a76aed340fca7e69c257d9d62862348afafc8ac7a4200b3fb185652cc85a87488a4acf68eb10e10ea47c44fc740cf8c98e81c37d9a094e8a1f9678aab65b40b82e744985e3f9a39696007d0d29a5ffc7e8b1fe22ed153f25aad838eaef920d4881360f7588b07dcd49f2a966bcda10d423d2b71e5bf54e56dbd26a2c34c0111d99224cd48e56d75ae8267ed918a8d30afc28b117b5686b7d50ac61a6deead34614ac216de44d73ba942aebe1af0b964691133a4aeb4cd3523e3e55b2c8aecae15be2f956096900ba68971e76ee9c61b05ecde0e35d25870233c287ad0e1d16f282e6ad38a1c3298393f4cf885915a52c15e7cbbe7ea58be64af7ff84440c078918a4ad0bb87c444f5f38628a906b8be5a4004ec2dee589e26e0a98578fff5a37aebf85476f5b5b8e0e4d39583f501ee9f7afddc722fc083862eeb4cce453e715188e55327315411f874ca41712419916c552600d7e6818257052595ce52b47b3d6d2f4b1d00699c7ceb2c64638c229cb2f1b91e8a022d848fc6ad78883baf6d806e8575f6a49df27ff548d6584d8cae68aac4a5a4d786499c47ab34e0c896e696fc51988ef58feba3d7efc7ba36555e8b42094ce94553f1e6eb42b616052e64ae4b342d669897a0e637f73965117e5f9c95c694379013fffbca7fd812cfde2fc883956e51de1fd34bf44564de0723ca621e621996f6b4a3b0ef1bd70fea2760293b8483515b48342f690d46bca54b75698ccf7ea8efbcc8533312932aef9e1a8cf9a98d9528f9ad85b176fcf9b3c6e56111d6e67f81e15ef9924cbaa3ff4d2ce0db7e444bcb0cbbc7405e319ebb249de9f5aeba6bf9d62558628d4e27a1767b7d4cc7de3228c9a9e8c009ad118031624bb2329ef8da01ceaa7cfee263a1b1e79bc60d55dfa494140ded4278c933c37fe85ca097d22568bbea6ad0fdeb1405799ad249abb4268607e774c8072e703dc749317fbd5b4dcec44882f23c2cf9f23a44477435c6e4e5424dfc991b734d811c281e43c620906c7b0cc1a7a213bb91ffe1e7a0ca98cd6de717e9091914620d0a6ffc5aa588d3ce2b5bc20610dc0cb51fa9822bc319668fa35516edeab5d392a2d21ce4a13dc13874d14c5743d6cef96b97a990cae0367408146efba581215e0d0c8f893603134c139470f44f463f0420d92620bd3e02295177a5227b3e1b2bae5f16621e1b223e9a53e2a2e2218dbe8f56098d1a793f1dcd9b86e58580b9ca69d574252ccda55cbd25e2586c7531e42a02db74d909fde1a3cde9562a85f17fbd2ceb7aede6b6ea0013a519b9ae20b7c8fd9d23ed267b56b3db6c2ef309652e801b62658c5f6aa2d0aed8fa8b6047c58e1f4f75bc730f3707b8d594b101b998554929e5d4a8214d352fa942f693befff4f86ad5289dcdf0e49b93d14d651c6d7d92b4ea927dcbbaebbf141defb2d93875c11a3f4ac27ddb4972647bc262e2413ea7006d78e872bb5e2c93ac9d80ac6215a026133be6b7ebba98836861332f20e78187251596df966cd4dc09745e79965a12163cad319111a4fb371a5abd7c6459f77b8012c19bb7d8fa8d58c68583c5448acfb937a430b2d4c987652e926de0c0f4b029dd376bb697d86bb4124c0c565fe6afe064e6ef7a8e996fc48cebaaa3848352e16d96cfffad5153f40cc65012e159bdca9d9d32ab3ae73cbb392f5040caca0b02959ccc1bf3357b175660e89c624426093491156f4140d628af133c4850b5dfe8dfe7d7c449bc119ce47541971c870d4e210408deb474ffe6a73633718a7d18e1d7bfa66b74f20d02c3ab8d4fcfe1cdabc436e2de7c82f0006c27932e13959ee0a4789100888fd1f4fff446c7a85f9a24255ba1ce329d1cf40d14ccb6ffeb97f74925542527764ab17b21ed57825e4416a31b9f882a57f784268ce80bb91382cf8cd0952799b8e48bf87515093c0d3bc28d4f9fbd54b8d0d7f3a71f2d3feec62f6da6b62a7cbf7c558c4073d660bfb4c05b4e0eb8dacfc5e9b9dab0b6cfe705f45c71b402d7bf987452a80b171cad70f48cda48543d9cd2e61fe65bbeb09327bdfd04f2f82253a6a2444be3fcfd43559adfb8af4126af48813d537506c096768af92d9641c8e1d0fa8d3ad9962905011750e95c0ff99e8e08cf59856306a074617640531f360557169345bc83e63880e91560ee5ffcb2badb555f21ec2fb24b4fc6aea9e1cbed306b189f0c4da507c92a7e41b909779c4f99562d140451e734d8c5f0972fbcb55fbbe37952a11020b6fcc039c16055fb70ce7a5a22de2799f75fa7c418af599d2f4529d5d2b63466f69ff327ae420be066743a729baf659951be8ceab8ae7d3779339d8b8e53d2d213c737b406b3f6b1a94b419fb22129e9e6bf1ea12c1eb73d4c96495dde1925c67ddc863c9262847bccbe32abd3593188d45715ccce3f24a34ed4b0f77cefd068e9543cd3ae73a44a1490528bd3c2abc9c5e74eb5f514b9a29763fe9316d0c12c7116b45ec3e7c9213418ad3799b0791c06c0b79ce4e40bd292113096dae002f3bc7f2d577b8fd1f44fe41234b7f2fbf3f032fe82c61abf6477679070f23dfe7c5e6ad67ae8695d89b43ade4ab33c098e1692ec77df0911fc9da14316c0dca0b4bf3aa66f509553cb8be5430c3872fb1785925bd02fef9c40d15dc9df89dd63de0971f9b76a23e5b552ede6215ea0137de1cad0af8f4122bc5b1391918b9b322c116c91cb546a9a0bb804b22bf84230ebca288b44db4ced446d6d6c090e6de7d6fa1772aa96f96385e8cf5c401ad1b53c47adff6ede29cc906e21548af4487396dfd56f7e415f09a3babac48cd44142ba97a9d23c7856c84e6b55860f0a332ef9f407ddf278104c8c9bac0616d2ba7075e3aa357b210cba9b8b37213729f26dadaeafaf7874beb28f09a7afcd475e5f75c3fa51794d6ddf1f931dc3687f52d32db6d75e3cf4d6c17b692f13552afbb1b0a6ec130a92cd94a78d5a21112b191f857e5358bd9c0e553c0fe7fb81c34142b10f14bb8e94c6ffb1fa4ce96c8f6ed38172fe9b3d793c10699edfff3c15c9825648bd344ecc25c95566b36a6ffc21470db3b31ad274c4a0534b0c25337bd3cb1a5790cf46240503baa120c71b8d3874164f0c756c43c4843181e445183e61c147251f55c05277d51289aa44eb8578c225cdec454b509fe1648072beb073c92c375193873d580fa61596fe97f46c3664295315eef4a4ced41d4cf7d44de8cecfb411dc49be6d6a9a7afe067f7afde3967915ef7bb793d8c44aad7b824491156f6f3b48e4bc24d803e77f24751118db642b0cf11025456d394b2aca5ca835f507de79e7664bd38fd34e6f757782892bfd0e3c150e485da4c550e70da8a53950130f2226e4f67ece240fe3091f003912803586a5aca58605edf2ac5badbac8ee9dbbdadaf87974a410383bf067c6334fa46ab1f0a8231133671348c1d7255402c66ac066c0687aa98dbc33d0574c2b26085093a50e1f05e4a3e98cdded51346b94cdc031b79d6206d2ead551079ec774bbf81a61a6777d8205cf6a1c223fe23b70025363011579203dd988a3674d20a80c08d8dfc978692dc1b89387478aefb6e0a49298df72ad00b8da2c9c6430a4a11e08e4fcaf1674f148715a53110f21bae8d7abd3bb25f7b7e768470db4f892b293eef367fc8956f0e2997f0e6eb63a8c12c5710f43f1760f1671bded0117d6fa9e50b5396ebd1b90adc111d7a948c96758b5a8d798874851ef1b882bfe37bb3fc6bd86c9029d36d0d1b6b1500beb5920029e74355080230296bec446f29726e47ea4de3a447ef96cc9705c6f92690d85141de0bb8a3add9089fcc05abae4cafa504b07fe01f2d8b44833fd92077de10af1b44ea3ca475b2e5f8d8bb6629f16e8838760e2c9a52eea2a4f1e31e84400669658cb3b5a36d5bb5e43116681d3619890ae9a7d28f381c2d2c89fa0f91bd1fe37ee8bd6ccb9cafc4f8d021c29651b5949e0c62883c1c9024e1ccfe8c6391643ff5022671067b960f56dbace683da2dc3d92e0dfe3dcc417909520ea08cd1c53fe34eb4e177dc4c35b3cbc104819b2ae8beae76c37907ebc8acca7fc02669569cb0d42cc4966cb2da3b50dcdb0a6d45f504fe8a3c171cc2faa18aa32ce80d022ea3b9c1d5213ee18798546923059e2d645887b37a9ab65a431d80d6dd7c0c940d7c79f578ae7fb30188eb87b55feeb63c272c60921ede9d7310534387f87c151ecc90a8ab5f14e80e4979bb51544803f55b9461226df76e4bd361397c0698bd1467eee34b8464b442353b4e96a97b912876846fac6f0580cb7f6f3c44345bd5dea3b66eabc70af91ef0b34c4c1e1915c74f9d76405cd53e7ccb1546c2ccf223e06cd499db018f0954c062ac627efb1dbb0cfd7068c795fa35d4722fb7c3fc3dc729a0b44ece2661b1e871b13582b2766b2e4666930b0e0dc46baedf72decab5774e5fb139410e3969caf4e7ad33ceed2cdd02c7fe1ef63038fe89cd16a27f864abd256ae86742cf1274e45f0b544cfe4fd3cc6adbc0a79497911d2d9de1308bf66477cdaf5cfbf8e0cfceee9e910ee7a0c58b55c1e75828c66a5afe5766975229ec4a4b44d51cc7201621465c842e711fde6eda2b873d9b4db708212eeb95d29f5fde1672da9f34de91aaf8e14034c8f184c2237b2bb048b1e34cf8cfa5b827e92d62127176c2ebb0f63597b073df4a424f2b98c6f0d209572ff2e91318a195379055d7fe4de77fadac32d9b771b802f88b87186bfa920464faa5d3569b79a7fdfe7fdd235f0e8f9d62e4cd7bfb9ef5b112182f29f42cbd8762c7e8a942ab77edd8ba37c1a01c19646f8c36726988bd05bc74ead266231c33595d9ecf825cfc494ecdbaee2826cab98baf97086ecd59b51957fc661a4fe60d7e688a643d57239b3eb416771d07c04229d38920fd530d8e8c6851bce0abd5aedb73b7347cf1c08c806a2c4ff117892ddcec2084ab9ef07daef54c20ebbff5095e3d36809a011ed7b3828cbe1bac81424a6d5bf1aaecdf0266f2f1ad2a1e1e90c324cf490714a41876871ca5fb94257b7d2cf5fd5eb6dba88efb422f9a8dfd9779e4122b37314149f833124e952e81341b027d8e84b604e4a312d501706ba6d4ddf7bc04ccee54872d4c6f2c021c208fce7f44e97e24343a572d38037375d4fdca540c924828e6715b08ce8a99d20a9683cdb3d6a0ad05474c53c429124e6dff3f557b17ffbcc48964241202629ba71271a7300dc8267939e92225c6c2755fb09cad6bff0bbf2d4e859dae69c77032d99d29e345702f26594b8c29c09221a2d67c47ecc3c02a9c4f1004e5b1fb64fcf652575839cb624db4058520c6f43ba6f7aacc54818722e81a12d8bdf65bf29964f856c05b3daf57d7caa5aec9f2f0f0711201db909f108ab46f1ddaf3d029c349229eaf81ab57eb8a60669e8033dfdfd27751e187e08a4baae52e80d719478913aedce171f1969088d92f88eeb0145fbd62d1972d9c608d704eb1da9ce889656238ef16f8a7e9b8bb18dc3e18e8f4aa594baa1bcbbdc7ea882dcf4c27e336eb2d2e4916ad6321c57cfcf6443cb73974a9cc17b88576e3ea61f5964fe2365451e7e2c506604da5709dee88789f043806f40b9d7a776c66576edda9bb2aa8edc8c216a034b9c26d38152a461547bee4133fd9d1035301850ae3cff111e2156b99c3ff91477251155ee9cda45a94661c3b9e0d193827343c33dcd8d264e6124eeb65382ae93e83b9bb192be08570f0388e33d249caea2a3039c88174fb9d654cc99079a6c7e79f2da4a3426085a47d528fb3954acc396789e3fafa3f65589fdcc61f6f61071a8420fe8badf9a71b846cbf54396b9b3676aad62027c1e5b3ba583a2854eae843d3e091b6102bcdf2362214576e409838b3249dbd3a8a5c2ada9ac860e34e4a4c7b1d6a3a26264fc0854247d1533739dc2399eb237632d555366ad727bb873f958d11bc04c3ac86cc7164d37a4f5be18cd75b84d1798f0ab5d3cc8fc206cd5d998e89b76aeefdc17ad618ec9eae83d9dacf7b27663a4fa9da26f0800586ec0d52cfcb60a901604d711af994bdfeb76cf9ccc1045e52a117e0674b137dc969bbc2df218a99664b41a16764d569c19df2e730cf7749d4c35a365348c9a9358db0b2438cce50774ae127cbb0d2f68323e025aed65961d0262ac09991fa18e6420d9dbb14f0c098e0772e47c0b10a29fd5c006a6f83a761a0155f6f17a99396ffa8dcb7c0ea4483fe7c9883f22082dcb86ef65ac2bf54f7a5efe53d709936d437da0d5e1826f03dee0876bedf02e2551c39e5c511dcdd933101e89ab096d67a22b4b7bd99454f03a4be27736119d2afdaf9c56e5a748ef5a0abd3695b53c24acd7f1cd7a309a219cb13b537515a0dbe7b9e820f45be88bc3b9384fc3af53d5f411da7f57be7f1b5bdbb1d4f4d84b9a0d336bf051431ac58cbb994d8e9ec9a898d05ab845efa720751040ae17bb418a95009e84c8ba9753b6841f585d37cc561112930f8ee2c654f09cf09f453caabf466602232add7937271cf8b2a42fa62cf7140623cb49e4f1aa2d7772a001b7e4dfbdd3ee94b336a1ab8ca28e8fb087cfccb25d9d53421d327e7a253809bd088077a22a1a0733fef505e5fc1c17922605333dbc2a5d7bc52299ad30d6de7447f777114b12231e24ea294f03f21036e6f329365b2b5ff9565b54e0ac8013e42cf087b5061dd8b996be7be0afdb7e153070d4fd07852bbf87b3aef2e30d5439f221bf9eadfed865a8904ea36f28d0beb0b43862d4abf76758a984243401566fff986c0e99231a09df5cffad8d06eba275be7a24d8e77a345f03e31c342997ee0802304da01bb02767d715786e75417a1bbc921e8efd89b97a274c3e48ac19f35ac45a2f05e264f2cf8dbf078b76827dd78fd14e2bd3b619c5920a7cfa3483da3b84c5ebee1cf47eaeff65a4cf2e1e2392bd3f97b34d92fed9abae2f5ec2022b9ba2997b2ce5530fb2a0c746072af01b995f294157935a55ef2c4644aa1d1d3026d4c2f1efb9ca931ce8012ae6cd3a74783479abf2611a09e090e41e37f21adaa5cfdf66d33cd191ce9716c68463bba7d49476c398b0dc768979e65cd87d4ead98cc4ed5312cadf0301a43037b291412ffc7e3aa253bc66c39b6d3e936f56a1442f6aab2da5075dc035375ed3d9162ddbbdc8e9bc3026a378889725ea7d4adbd46829c37a1764490f4f34e1238aab2b8b13269eb0d683a2e2ff7cdb4071fc25c5e17f629dd50f8aed2495c3cfa25d407279e69bc08954595a585252ff930e21132d6cc679bae95a947ff00f6ac824ecbb4623f8fa1e36ffec7ae867fb5fd45e788f4d1aee79855d970deea109051e84243f92fdbe03938158e66b388a5b5bdbe2ed0b7e8d6b24d1a1de9e74c947ab0156c43667bd614920c13b46626522cdccd83b062b34deaa654267283e7f2ee6e151bccae8577e313906e6f2ce0abd3cb72cb1e0a6a7282e02115f88e0fce286a96a3c4236f5849aea1518e3b06da4f3b9fbf6b076ef3a341b406393740d2b0d629fd184e653444c63aed9d836552353b5dd51c61681e4d97b585d546328ac5ebc90fdb022bc0333c5ec2bc9962cb77bdfda8f802db62ee2d3ae2d9e9d1f647b4dcb753ee2e9c68292ad12cd777682fa6b6b4fae278d94afa7af119b57068f1688f971d2c3284da4e75eb56b1e61315038378b3ad5d58bc104052fa652cba02835633dbfe059b57937132957a255e886ad83a3165b246f94728048409a31c2e0b217bf6787b2fd44f76f0324df303c5e96790cba3e58ec884cb535ef758f32a85ab7e1ecff37b8ad91b01bcea5b0caafefe70353fb4b3901a58d3f4faf4b0a83c7cf4472550bd9fd34e13893f256d098abd5c662dee8ce5770a40d8eb9673ba9f06b542ba8f1a7522ea63e9e224f9046579984a41da4d157b1cd7009ac02d8d72b72ea2de3cee982be9fa498a5660246647242777aa5a46740f51f097318fa50a02ea2fd069778a1cdbb1b28f91b2e2748d0dd1d0d775a5a50ee49701122d7c38063b2fca5d5addd838ff3bb6abd5112afce80ded1d4e9a4d9ee060f6e217ffd6c8979ced55eb8ca921622527c67b04c43596d60eca0d02953fa372f06b0256ab84a19b73752bee3a9d39ec4b9b2a57d9b313583130caa2c07102326d0d93cf5bb4a367c2663161a4763cd602c4ebd6fc0fbf61ed075bdb69537639cdd3594a2ba5af9422765d3753c901aed9d58be6d0e13ecb20382a811eb394e3fcd54ef9d0d7207f01e276ee22bf08ed7a1fc8cffc8048a7440f2fa66a4930282f57fc29eb14a883e1ae73f862f3f1ac1ca0a957816b745b25f5fb1c3645d6821bc00d1cb70d54bc6c2198294bb8c96f006f16e6c19759f3bc177f595be084aeb47f071aa5e23766389df697e6537920304152bb20cfccd61ce466557b55af21aa7e473de27e68c403b1be421970fbe55f89dabcd4eea0bc4749ed615c44ff5f72aef549e55b14ae463c01b81ddddbb5eea1d688a1e4116a2a2cd6fdbe535507735cc510c5038a4269ebecbcc87889552dbede06d2af9cdeb9e40a59d9e3c6f8c49eb01aec92b3c852f425543d6d2efd8dc17c9bff1c3fff2cb17b520b9f95a98bc8d0aeab651f08a0830c9ce8ab8907faf0fcc7530f700cfab748c052eb4470f4a4c409bbf7357aca411fcd3cdedb64b067848b513e7f697f606d37155c6cc77221620c37896654b9e94bfd3b5861c1585f1e783ee015fe7e03d52a3a99bda5da6d427810140c85fb4b0fe6393acdc02029cfdddc42fdc3f9ae0518bce2de485131fad8777365c4400d6675497cce283ea527b3f20cdd9d67028f9da4dc738d40f888eb7f4fac970615004c7687cac1abd9971f33069b88f8a8f9dd8d7963926f455e7ed778b1f12fecd22aaa025e19d8cf5d8fe90384967c787082d4b762e6b570fd333db5ed1b3f1c600d98eef05f5681833c7580463b911bb91149f98ef1fe53a5908270b25dc2fd0ce34dfe89ee842e079c7dd040898d04d50928fa5f8599772775e6927356708c2378b59b861c9646522c471aaaa886b5988cc675cf96a1253967d3ec78f5d0e6016407a35b946fb72c0e2c71f607ec6f1bc20511a2956a8ca3c7175887585cc067b55c5cc5e4fb0b0d19652fb369940e3dff423dccc7b24fd96cea3d1a827071a4e216def38a801e61195efaad72d8ea3ec269878f0d18c6fa082cb3719d8c72c4c752eb2d67e75f324d8ade43fc210c0b0e5b3d6ff1ee529d11c5d011eff1f88aa4d99071f5189d59d626dfbe04937f5c37fb9291a852b4fd2e2ca59cca784965c72d34780ac18a14bf3bc1d05b04f52242399f2cff6801a91ecdff82a31acd1b504c33f4e619303a9ed1b63db3e0ac5f6ab9ac56c1e46058e8762fb448aab14986ea99b9a0027f48295420e1c946351ede46bf4e5547a184a7b34f1d2804800f53bded94ef9314e2b2d5abdc6bc3cbee215253dbe317fa05481ac35782d03384259dcd34d9319703ee78095578253fe4f4613d529a67d649054eb04a7e025cb14687de748535a9c59a613983a2b9d419a6bba1629cc26d64b6b8074fe55476b5c25f129c72a75fd39b8da1b425089ad3aaa322bb8f25c395aafd9d40fcb7f01d418a2bb10f4af2b3b6eb900b8dc41e66ae2193e206d3e51e5bf6677d74156f4f4512bb4e3ac8578e3f4ed24247218fed110263922852b73ce574f0becba88dc49fc8cd6128751b7bcf8b938c01c0e8db9e2732250a78446e810996a05e32e0e57c337a5511f208ab01a0041abbb296ff755b1458f34a3859fd5460c5808c66e9ca12e35cafbab959b348348206f21ca842d6b93bc7754c09ad7dcb956d729d0c532a9399fe3a181192bc52601aed59211e77a6284d47ca1f268a99d7f002bc4da0a371216a632321b8afe6f7a045000d6deeda5df82cc3daf1b5cb956c6ac3e91d3cbae5c9b3e6540611311cb9db7dea4c8920e453c7101c757dd67a39b5588e805f959216f493e73399fc4ef84f640d10fe140e340884420bcee2d32bcaeaba73626b7bc887e471105ac9ecc8f9c45b73a64b4eb9ccd15be2686f9bf4fdf5d8dd566174073f30bf3cfe12ed42180f8749ea30e1a3cbf8cc7d5843d361d1654a4dba029fc165c04ce7ba6df41f627e8193cd4e14410f0034f1d304cc83daafe59ffd9fb1507b6cd8705c6c47de4d1bcd25e803d9a21775e77cc6339a23072b98b41576d54ed0a2a36b57aa3b1093b2c6cee7aca6f65961189637124bc2c832cb6f9f9376e75697155603f3375d2988d629cd8bc220ade5fe793b1cec23c62c318554cb24acae5384f265811a53936600b1f7d4373a7b7cb551afcc01b304f42464109600c5fc7f46ebbd38270521fe5a9914b335591b919da46fd7824a0a755540954029fe6a96f8c8aab41e72e921410735ca0b91bfc6b0f5fa3e73028db0bcd5f6f5646779384398573fad9669c997793b1b52867611074b03055cccf6230d97984cb1282f8bf5a87fe4aa95af37a29403573fdc3d0950a092f8ec05011c6b2f217e711950d12cbcff191b593a6301f4274b0b60c5fd1f63edecf5f3cae943953ff693e07ec530aa30819b0169041d4875536d96005db2593d229d63e1dc388e1e3e765cfa9773356e592bdd79724b6f370730830d449b3f106e1f06ec35cbc7fec588c281bdcbbfa127e92eb2b8bf7d197aaf51431bb4a9dba6ba3a1c0d841f1880750bc18e816efc8085bc21137d48b25d95eb86f8279e5624213244bf26f5cead1dfe1f8f225c2ba1a485a98611633c881ee4069d3953f1b5e56eea4aa7c984d854098ad403030f8de53b940a62e9b66849e71ee628d94ba9ac47bea06d90bbb350c7cd5b0500a6b2d6c1da8bfa6a2a48ee6871ff3dc5d0d75e52fdc6edc791d3d581d94bc3959e42e1e13ce0a94033cb630adbb452e01fb7598d747031fd9a8851d1c23aec1a17bdbcb0ba00308bc16ccc55628236785eae7a4f5b90ee740e2b734dbbaf7607287529ac95fd68b0ac0f030fdfadeda2fd34378ad190720b7aa529901f55d48bfb74340b26c0e6e9ad268458801c5a9aaf6872bb65c5594d3ba8aabfda3dfbf14fd7a2b8abfadc0ee262190e055b6fecb871ce74717d98f6849bdc23dd6ee907b5e4f60f9a3a87133fa296f52f260c41a62b8cea0a8b74c08ccc298064da3cbbe29411a2266fd5dc2d6d3c92f63c9862f650eca51312e0cc878c899581ada27d985208399bb979d794e21b023386cb4cbf66a59f48b1c690d5ce831c7eb656260d70f76efd9516819b2b09e0ba23717a891fefee69e237559395e0f11a6a29945ebeb2802e260ee58b5233dc143b440d4e5f1bf241f9a63c389f6fc020c5fb111c750d2a41b3c2805059e459663740c9f2063012cb4197930ef809f0652ce70da875afcdb9dd4caafd2838ad6eaf53d4daf6ed6e528805e927dcc9be8cdad631626deed35fa6eb96829b73277ba07c50a351e63ff9d8023dde23403e9240b0020f4ca8ef98967fc20a86356338e6b2cca6a364906074f1435c25d10fa2a1876fbe7f78fc56e115bac9b9d6bb9dfc1ef5d6f8fbf5d6a6d80f83c64953a7ca9dc7b0c3087b051a7c5ba3753fe6d8af8f0eb09c174f1c4e788b24d28e70e902ebe0ffe36d88007ccd72fea4f1dec5c9711ddca224cdbb0708c06e048013413e02d2f090888b031df66586a197387ebb33d4522fc7a8541da5560963a68841f7a5f6e0bf78e91be61cd7feeb1d258037af469b84bb31d55ab3ded24ebf27a0a7caf5eab3a54b5493725646e907029622ea333cf0809b37bbe2a9b0ec2ec36f39b988b6301f5275142d4403dd3b94ae2526d05dafbf62171faef1beb046bc9f786812c68135acb8258101a404e047cc83d1f61d6b1448652a5566726e0e627461f36970b085708051071b9b0cdc80613171c6df43796445df2d6f1160328bdddf541d037e24567ccc409661b30bfd2be033400508d2c42363b9e48da2201e5c33bcccc3cf680676f59270fc815a54f2fec6ba233020fd136706ce6fb55e9b9605247f039f5f05c426c799b2b9505e7ba0eae6c4481e7be5a44516377bb4cc30ab7f0e406a62976ae2c81cc0dad1b9150c95741fbf0c6e8b3ee19cf2633817ea3c9568d0bd50dd1295c50aab1517efd4007fed551f06e212143908303ed3c94d1ca940fa585618d5ecb9186feb0591c592bf22f668d968556e9d97bdd75e55d980f00c48ccedd39a88c34f5e3d6faf574a5a57d44087c8c46d9ced070cb7ade4e688fd28cb4d4143ad6a24d5ffb8dbed4d669a270b863df84e3762a3a391d5862ec16d09cbc209a083ae51dff3917b7c5ae3f7956c8208fd00260c8c35723e2fc16331b2a7e0b85cd29f08f2bea6882989c000bce249e87263781dd4a001e8111cf2bf5bc3e13063e167f23be95e0ba0b376cdd7f07b00a74a7b3a978dd4290ff077380fc9abffeb9f9b35bd0220dfac1c7a92740727939607cb2bf5bfb1d7cd70bfaf58cf9787933541e863d059e7c70b4c0aa53312b12d6d429619d2feeeda32989b87b0c0b3a4332ccc51e426a55b33c0e20512152d298fac7931b639a5ae13912ea211cc64f9bb0b3447c439b15db5fecd98d9ab03214ba1887eafbf5333f5720a35bbd30bb69d88d3b76f8f0b4fd7fcec06e2abdc1736ff8ca88129dd9297a5d034efac7dc99c27cb45dc05ae58c5ef855083e783ba3174c4b11f36492f994d30818cc0fbe054bade58aa8c4299dd3fa3e0ced77fc225a0e7d52cb5d93b993e94e66a840c69b9c5fe331248b659bac4972be73d6e6b3ec28b20911c6395fa2b5348e45deda2cfe679d895a6ab72edf3b3485f30b84e5c2c71fc46ef45887018aba51d17d7c9e51474be41e367a3d65e514271a6149e13ded01b94dab630b913e051801f756477cf800ab189280a074dd0efdf837be314cdcaf6bb74f9e127b17a12f2c3ad651128af836e635b32267da6e7f938bf35c06795b4ee7d116556589ebf506069d1d61ebde7472bc64bc117cfedb170bbe476585bf9a69261e136b046b676cdef42421d43f3678cdadd90372d1fa1f305fb7ce894a0d5cd53ee3e0b6f252c40c1c8737808ebf9f0a5d979a94a51ebcffb9a50622a1a193e2ca8fe60d181f0d07820f8bb596a21f74d90f5fddeb844065ad4732ce2341c6811fe9bec1c33abae6f09734f3d11f848228aa4279dd031b4ea8c4b9a7747efdacbd13fe42a26a0e79e547824ad2f06cb8a5ada43b1f970501a87c9e2d1bdf3d8035e7eefcacc238c3bf9a4a4bcb0b2de3f89385e017d1bee2e3a309e89e0a605212c03ef6ba2c5fea503a475243a0b734725ea7a51a43ff3e4d3f1176c4671f11deaab7a7f495a6f63f9cc2c04b9c349c7e3d8350a2ede4efd225b3225b260a0750a9b13c7ff4a0e4381b118364d0f51013e4264b1a2bb8ed1ba331c0a5916b8c206fb7559192480d8e44fce5afb331ede380303be8b0189b7b44c16c21e6f13a61dc0652338ac1c06156795cdbfe8dc297dd5dd8268409d6b9c503dc972a72587bf25f9da3e7a7f184f02b868ffee04248a7d401a2c8e60c7eca3ae103e97196b103ab4ad1c5f863831d11b42457d0558848b9a3444c520d5019b6426b1dcad17d56b1e946a0213640e4b52ad94939e9f8d6a18d4ea1ad250877dbf0a2b0ef363bdf252830e358b0ed77bcf0fa63266e7e28ee0db1211df51d9df4050a371464ba00b063bf24029be93f42a3a1ce9a7fc918025daa33953b86e01088fa4caaf4a9c4ef6a6a6b26f8ecc4e9c493bb14e2dc44b64dad173226f513189909674630e4b11c1792f5163103e1bf10c5e0a7b89a11bf828ecc8a68fdaa76f51b07799e6fd1bbeedfb531084fdac604a19eab08d76f42d00364e1df20d7b51950f27313f90b0b26a768d04f604ea2824761c34cb6645a8a4d2ddca33be61556a0e3ce02e707cb6dba81d1c6dbf92ad370cc699581895194491dc534bbb3ac0734a33a9ddf20a5f90c0462cf078ae306db66308d85d5908d99764bd7070c6a0984ef83010396e4e28bd9200d563983dc48f7f68deb211079781d7206e05c07de6a3d16d6a60d9174eb75cd5bcf3198fe4f8282a8b45bd28fd5b3eea99747c80ef9acc8d51ea518c86529ec5f491326d7675d2301e7a1e09a2eeed8789b0cc3d449c4c39b21f0a4ac7be48c33c9a95801b0e9be957e4d6fc3bdc03b8b0cb89caf30a7e5fc50c7f25d72a8cecb61c5381895fa69d52d0ef8ad4fe87f9ed598e1b7fdece620157d6449c36d79a101674dbbfe5908b53dc03698b6aeb803d58a8ab4fd8a228a257e50fe803831e2d008598b173e0501fb31b6e601899410b7b0d5fb326c37699c38f691217686ee240faecac60c34822eba506122582559152f16be2467d97c9bb09c9c0feec3f5d39d1d394415a54afe251e5988683927a1585e79ad66167a2d71353f66cf184d998fdc42383d59c45af2b73545d54086b712970e3c4e424cded17aef32309f004f7bb971797cf9258790413318557705083f1a5386acb5c851e7230e4a51bf943c237346905f01d66e65cfe2b9f3f7e3c7a31519980fa018a3b7c7895820dd320bcf3c316215ed9fc10c458913bb623c9963d38d8ef69a688bd5dec06edc573a175c9bd90645730452b9a87fe52c89b65e4a9d5cbd084dcbf4974d20b762f24a4df74feddfacbe4d08f63c60c0b089b72787956ba5280760b118acfaa6447fef8939d84f9d992d3adff9dbfe6911abbb6644074e063489a7d7f9526803788106d177e969ed7dcb6b4e55d5a15c299b23f8367bedff816961c4e0f5653bfb34d50c1baef40f9b9627a2b090faadecf7d0ad4b28bc482d7f4832e0a97b46ec90765b63209a7fd756b5bee42037f05b1bad8c79ccdc48b195187f06d0c6121df458339d93e89364cb64fffa7bd20041cb1ad3cd49546f2421e77abea8b8544487915e74a36c9e3ec2fb62d1e006c1ce5c0a208ea1ae7112d34e7d790a9af9532adab99c91b7ea6756f548e712902680f84958b40b422cf3234a5478561a88d5e04408f7a0efc37069c0e3e9a48fa0ad941b9d0bc279cb31a504b0ae6684fa59c1c525916ac02c3df31d9bf018601422d91272b4f4660b31ae53adb489a563d12ede7ee5c4ed1effcc460475796dc377d10e98e42aa96c626c98d9d0e9a136e153e58fde8de89705ac1a4ba82f288878ccc61d50dca57720b0b3a7b02c39ee9af939c7c697beab9cc4023e2efd9e343348246f3155aafcbbe26662dde8d6987dc2d43943a4996cb14a5d39c9a7fdd7f30706eef0f882e588bf0b60078308326b0069956b527a355ff9b34766f719f9361cca4e19db883e70cb9f1b741ba8c9c24983a0a76514e4905d92b939702f03a0065275b81d1834201b1922553f6a978022ddd1d6d9f8e245c2f14141f89f40e26d389a159b413d568d0d73a2c4eeb6b60f8bf5183146dc507c91d86cefc1db54a1f1c8d71373f1a4f3484119c28f5dbcce30670b85d201a181dc8597816b123d11f07165c49f2c4cbffdf22d45268d758315bf5b8ecf659f3c35a013450256d5cdc89cab66c71b77ae22c1ee118968084d2d9e45d7dc7b194e1ed1f6c5f01975e4fc0f549d4730b564f141470d7dd20b8ab5f63438ea3fe533ed212c357a67f05143d462b86b02067a2a4425ba1a8ac204c8b8277b1b9aa52f6733819a7a85815c797a28f6ca17ab0e4ba9bd0f97722a64be9ad2b38875b0a30563888d842d9f79edc0d242e4372cb3c912503583a70a38e395546bffab6cfadf91ee3d34288b9a4f1184d241d7dcac4e7e0eecffaa92dc2c44e22a704f25cf38392c6d5fb228bb4a581fdfefab062a9ede71da48fcf4b7350356b92608b0ac9e5eba057155064c5891f7fe3ec867e61dc56e1fba2be88b9e6bcf96fa91971f3c949f8b9cd23724caecaa937923615e9fc8cf2640a797481a660007ed97d1ce8b80da2884944e5c714c721d8e0645879ee8c9401159f30be94f0b10be9232dd7c8738a612af5f5ca808596ae7be4b760f66f72b82fb45893e069a19328414f1971f2c543d3c1c8b93112f5d3da6b0913c307dca9fa84a6ade20f7fe682c979090f32381eab50e227b504e9e42ef8d61a2a6bd8de10f0e35963858df04a8c0d5c0e95e90e3c28e125f8d55f97713b930c7ad7a9492e6349e9a96386e136ec2d7636d2d3af45a0c053df42a659d1a1e32e9796078a8c83950467e9308c13512eedf27faa111d360585b89a2fd57f78043b9b3cfc232984dd280732dd295403163c718ab556c92b4127b3d79fc5e2fa6ec403ded58d67d1629dd0e6149685a65783b821d9af93a3af709d51bd110ea4cf62529a9fae7948c97dceef1bcbbefb985900fe249c5a6146bf1426826ac74e017fd9a2399c76d69d670f631b76d303df726b66a68ac69297e219369002a16baa1826be79567b54a2887c3febb46f78fc41c8747f3f024ea9c15bd8bf7edd9ecd4530d55fd4ebcc77bd21b9dc02eca47d879f8ffe775a29717a958f40b10ebdeab18bdb28d2c4d5998b2cf87d4693c593326843aed7fbe7d042b96aaff1116b0079ba0353b4492bb85cd34131812222742034100d95a2165ff52688fc85a09e2538f5e944d5e2c5c15747e5e9b2c1f31ffd952bab35596ea1853f07bf6ec47ac1e5ce19cae67546f9e43249aa95b398b6b2c1e3bb1e921c9d634b3759a7e7a1204d1bc3133d5e2b72df62a96313d4c57fb24e29324db445f0bc556a17331cb5b899225288c68e326db0709b1f2a6c364e265346ed72e5662db61a9ed69102ef423769d3da82695c432840770600d663c6fb92cc0ed75196494761e99070b0f3cd1765aa3cc226f7644a13c767e48d5d70bedf821dcac22d2dec0c9c0ea8851256d9784c46b6ccc13d41e5787d25f254885d6dfab51df4fa8f4592b64049a07f1740faddf119d43c4d369429012855a5458b8e6c4e0c81f28d9e0ade6483e7862b5daa066dd1d0a297fe8718e3e354d70d682e0bb8d16ea74a630ec23aa797a7b9cf545384824b0e5988dd790a9b22b21b1ac981d31a0bda40ee8b75450870647f99659819dd365416b5f4c165c2ce159e693f6cf94769016078c326601fcdcfef59468b68dcd93ed43651d0cdb72848cd93fbf82d7cb1785e3314c28859367226e6dafd5d688e6767c831278c4380d92b5c543d89a05081cd3701457d1764a5f98c26a3622e2ce672edf82c83c44c00e0bf47c2b844ad5b25ff6a2b988ab62fe6cc414109c1a125b5654e2c6983222d8cf34b09e76d958ae08344010f7adc6c653629c7e35c33783c9a17ee4d6d4c366cd13e9052cc7ffd9972082187d4892a7b1b5ab73cafc08383605271795984218a77ddef63ef08b89ef3d0573d4b7142558ba484de3f6a9758ce454ba689f6ac82fa565afba30c3d0d7b77d7ad3a0c7ba8a623db505e79a1a66ab026254611ad8abe5e3dd853add4ecd37a9ecc60dc67b87af5cd5e11f38430aaa33691477877912e48c22180e6326adcdfc60463c2f3846f3fe989dc73433470eee81606ad0e3de7a04be68da75fee36129bf10859cee5af7ca3ee5366f91d4a1700f8feabcfdb85e9ca061cf563489b18f853733aaf4fc8d4aff06270cc930b75d404e71991fb53bfc4a7da705c7d4cb2f93d82d61a432a6ab8ff464d07953c52024d5fb73bb46141390cb36ae73d1e479cf32c4dab647e7e1e0613cd5239db1d470b6593434973fbd50928efa1fc3707dcb5e0b1a65c9c66e54d9ab09d29da88a2f5a3ad9f8fa7175af076469ca86c339ede43fb9608844805c15ed79d129a7ef0db90c93f411071f094ca0b1eb0ac41d757b60fa4be380d983355dc2458bdc14a29d784a883b91bcfdedf072bfc9d5f6508d4b629b51d7814b0aae3248ee9bbdcbd2183fd34842aa6031a03b9da1f8dba06a4e6f3524cf440715ff1a4aeecf4d866792a2fd2db81e16865a0f39dd2a979edaff8babf3ac349a1713fc20138ddd97f9a9be1fb4470a5b5ce14323110f7678d0515fa99e0562c207e83bce6b6c5e064da0a3682eb98d778647b9d6fd542f8b90883cb7ff7ac9d64eac5fdb158054ac45e0684d864213054834c2c8e8b34ccda773d63e646d81fdda039711b56cf96c998157c61ee7dddd38851901332f5ae87d42d3f16f08a16d352fec77b1abc74c92877544a4ef2b28a7e072b8f6a1abae0fd73d63db6c5a98bdc4df11b8090fec738f29e83110998fcfe828aeffdc92fb4333b9c013d7988ce3f1b0ad89e30bd87d5ad156625c35f5c419d6d7161531a06d5d1a408df7be40ebf727bce3b856104b124b076823972b6990d064d9b9932657b0287599c9b8856c12f5e6faf49a3209f2223b2a1d8ebd5f7f34792805766e33b5d789e8e615d3af5f731e6083bd64a3f7dff7d7043acda93610bcef32f50949db01aad14343e8f64c994b85391ecdb0f73681072db010d7c7dde61fc5688bfda54666b816826c7deb15b629a3af8d6fcfb5e00e2acfc11b76ac7e8764ad54b1252ec56cb1182ef97dc559d4a6c453082b716ab2f623bef75361fd73ecd95cd960dc5908f9dc54948a634f19c7e96cc4e802826c115083a3bb0f4783303ec98957de63821926b8c0d96dd6a49f5f5c49287a8597bb1cc6b376d7eaec3382d6a4b572bc8739c87ef1bfb89654f0d305f08e9b5ef813428a5e5c35072f45344b1e137936012e7db105678b7a13790e8cdcb1800ce55ce208795280c12ef58258f3206eeb2c21b8e5cab98c502c9d07d424506282948edfb5acaabad3d89e980202cdf7eaa7c8e83a02e71494bedff7fc5f29158de1cbf9db4552f561dc063b0a4bf6f8388a9ee20e71101e668cd983da1a0e76864f16891ec4da4c9c9bc96489fb57ec6eca487fa5ef2038f4c721e584a5682ad2752214b345aedab15fedaaa1a868e3c5d5a20b5a9dc102ec6151c1cf625c5a8b0b45eb5fbf6372eb1958a1342720dcfbe929b2c075eab50648cfd2609718748ebb378c5e88628f58b90c2e697f295091f7456cdb7a10dbb2ec0bfec99f5b2dca8d32e346b0f3be7a2c140b6061be089d78d6a6016adffefacb6715b1c447efa1ee83d2003eae294a372e139efb7dc8e32be941ab427ca2875f428464464352e639f6b228831ef55c3906289c3c258eb9b2d3797771fdca1e98780e093b63bdb2f90e8c284b11d521bf79f043093bc31568acbc468c43c6877d62709325edf81460bd49c4e48a2e78891c0aac38313bf0ef45de2e9b96c6da75b2b90b44941ad1e49675e2b29dc7d65c700579605ba005508d2542aa53efb0c75ed397f093059fe142263b2731084c25ca018fabe6d38af4384d98f1c6bf9703948a64d54b803379086e81d29c44d1ed4f3d8590909bbcbbb7611e260cb4f0a1d7cc02f865cc62af437fdb58cb07f22d830e972e32b2162188471d4e0f72916c01a79ac27f60b6d1e1cb2e9ba0fa0a10895d3116cb6ef3518fcfb36c84e8389d99610fd38c4aff38b3291bfcff7f9e28a84478c7e7832aa40fa40214d5cd47e51d78e8963283021e9d255fb9ad7f9447630544caa357609f3794b989f0d7001459e480eff1ad968570acb9cd2c596aa1f03a366759f105b127ceca829b0f4e5f08435dc3e418ee7edf3da3b71fdd0e51b1ea945b5ff58aa145d520585c8997fe1b184ebfe21fcae28f0d0404cdc67c8df780f0dc6b711ab3431051ea45016badf93b0aea521643b04e7832ffb93dd5b935178a25aca40c0931e476a47c08a368827488ac904d53ceb603870f777e264d43d1110ce5057f03c28faa7f357c7392aa2a0f11574ba9f372d9e9f3feb782bc9632181784c0f26a524a3e39b05da66b80523a828b825d29ba00978cc80f86bdef579704ead09d0de144f359a6eacdb95686893b0814d74b010b36cc49843d0bcf6baf844cac09804b5ee2fd8cdc1770f07a6d93e035e9e2e7688da9dd5a22f17590905a8b9a0b762768ae6c95663fa4d4ad35f66736c8e9bb8ac42e17a6b5638fb10655e29098c44a24097755cfc9637116e94ff2f6252f272f98f27ede9ce596cd9320e4358304ceda068817312c8f542b192272332b12347dad2816a874d6657c19a6eeabebef98d1fd2c656166d56d60d244431aeff617e919669927f21708a8d00bbd700c6089e49f7f7fc09f8ad1a77ad415fa1dedb407b500a48014bfccbecee8f5172f74cd4698ad221e2d517324be46d38e3efb5cba91c24c1e4eefd7bb3c8a032b1bda7872903ecb8125e799c5e60d1a9ec54f74e70c3ab541d337e78b41bdab123a34be68fac53d25c8591e64fccfb4c8e3040859bf6350067ea0cd61ddc64e0072f7677a05d64028e4e28f1ac1749fcbb0b5cb48ab6475877d9d62b32583119b106f16f1816469a0df106242f6edb63bc5333467c40f4a0034cba148d677d5ec42c3aa728d9ccc058febdfd98784c880adf924df5240b8d4e7115629de2b801499a17bb5e7e1dff78c223bd63dec1b421b7599392e6c188a7d7c5e784ef16c7fb025bfc5dfddaa91bb8db44a05474684200a728f3325cd7a5909072d49c5222760e46084daf3c3dec3be38f7dbec1c45df40e14cd8c0dd54c7ff3d3aeb4b714114ffb66d3af341f211e78e5c46ff220781b0f8be3dfc0e16afd67aea4c0a799a3a4e7bc8a758697a4b092ca50555927ebf9b86e6a1e6687e482a81802a3e38ce023d96d615ddf24328f24e1f6895695108f99c732c4999cabfa4ea6c7abeed287a608c11e9dda5bedc77842aa33522e686adaab5c46764ca4838a01fd56e4c55c1b573beb786fdbba3f99990a50ef3f168e5d98341a0eb5bb8c80b4723b5ce1b6ddafc7b7340c3675006460661d96bb8b07bf991bb694dbfb4cbbe08e639731def541c89f67c57273670d2e9e75edcb9fbd9edac81c87ae5d7195cda0161f192607f38e76a2214d9572bf05d7d29180e87e9a1a1740561dea96090dba303c4d200aaa560cc79ef80fa494bee99ad81725d65c8fce9fee0bf78b0c94818a873d56b627b5295286bf9b238131520ecbc7370abf566458727c84fa227b3713e2a54260d9e1042729ec1a859ff6c756afd7b2c04d8acd3e13847e0bd717a16f8388526bc60531be13c5a4dff82318d79ad92b28e0967a506f104306ba1a847e0649a1858a867c6cff1a4a01cf9b661665d99c8cbc886176f73fc19ee0cfe07eaf817c47eec1c642e4cc1b00d9f7d22a2e783436fc37cf47bbdc35080d3e4bfa3b8258d610bc4bf9a27a51ec16e4eddea0adc704d0784f9e21844cd0a4e4326b39e9f1049845f9ce5b6df24616c418900356ac63f6f6041c3101eaeeca8616d32bc870b742dfe112354d2639a76487b5e2971877a40161250cb8344488fa9be3960264ea0fdb1eff695ebff4ec38d07b8bc5c3a8fe5b106ff6d08a47ff4c7522ac9dc7c87e5f475ac0d1040a380f7b4efb685de6e4fce6b2a1a0edb015c8a3bead8deb88e11cab21167b1642b7052da15d33707922e2629b1daa0689c7a31014b7f55464fbba1d8a5cf462c329feeaf8b474502d51e28d8337a5c810dc37e823c932c2c8bf25ea9188c5cf596fe81939186214bae94e65ff86082d51f67b8f5c03ad026533edf2edf6eb802181d8dbcde67d864b125a413bbd5044c1c564e55535eb29a4da4c8d2220cc36acabcf7594f56f268284f94e143f897bad0d4afe788657b573ba37068d676511e1ff0dcc6ec7d5a797cf75541d3ab1038960e791197342c6b4801b3c5034ce1eb5682fe492fef52b02dc4e4abfa30e6d1f7603542e6018b9cc6e550bc634693299e15273db26c359b25ed0c3b5b2c965693fb3e2a0abe30f79bed329840b9220e0f17fbe8af460f8608fd12f7341e74e5434fa1f35c21346cdaff2e6cbf6cf8c3d7bfa383831f104e2fbced1e3b08c8afb36f8981618655b6b06b1e90c1ef442254e821f37d26ab23afbfca6520a49932101663500abf1f9e1ee387c02aa943fce38dccf227ac3bf3469c8f2b7a49b5d737cb4eda3dc3afc153898913707b6f7796a7a9600ff83a6c1d69f83c3cbcfec6fcff16a35a40b40a84c428d39b2e9b98d5d36133252f4d5ff14052df299d87dc56341d86eeadc99e53762843fab19310e27a772af1442998a02aa96572f9d3542c096d2385091395998e0b223791646f1a2bbddfa3cc9cb79f5fbca5f836417b28e8c57954bc4968698ea8534d796d81fa2c3c1f15032d2c7b82f7ebbcd2385553d58ddb5e2b26641fdbae7142c8be114d830127d403c6af522637542d6285db292c3256f61747a884c688c399df221b7e41dd23181aeb31593d1c043e0b17f8f048034e805ba83d4b3df67362c81e4502e7646a8a79f933b729dedc1234fba8418d81aa3df22512fb3e830b6089443d6b3dedebec103b2e8a31d9196aa1b166fbd8cf12a8fd25f56971da46d963722a4f05f53d81a2a50b7c2a27e5f74cb0a911c0ea6cc9235a43982d8bb2fa3247c9715798561011b04c15e600f7e4b8ba2a02729359f665fcb9fd3cc140e3c4fa0d5334695536311077eca7efdd4fc3c150795aa11343bb7a360a3f0aba91309a1c9a014e1ea32b75de74e7a634746856747fad542a3ba21a4484843946e11426769b974d2f87641f20627eed45868a271a22532d85a0478e162c885ac7437c6ea5a2c96947dc24cbcaaf162d411e1e1fd484934e747f6af2d38dac2e19f2e170f2cd332c30e9b68d670dd068d92ccb9f2c5ced31e71a912943e99ada06737abb40b181e06907ae6dc8f26ace71694d4bc4e19b1ac575bbec8bc43680bf3d779a358da12cc484dcf9864f6dd571d169eef78cac67e4f0019fb7c4e381a93e4ca41f2dbfe8e63d028a11c9caf041b59a15d4c1c5b29af4aa60fe4f9ee696907a4e14c1d6125046ee8790dd3f3b642df30e30f594c34f2b5d6028e2a9689e0ff1457e3936113c9e9a64ff345541867617781df96e933f262dc43f6fd7376604f9cd72491569ae5956fa2f8149968b4b6d0e003eb3271eeaf8ee360bcd594ea8fc4a358576707e9e850df25fb76dbdd676cd617f2fd40729689f55848cffbb6d9799878691e4c0d83e8b01c4a9cf704ed949329be7b06b6f336e71e1e7b9f621d8903f67ac8994a447ca3d70b0a5e37ff081aca34129e91dfe6301da812922d329b6e8401078a02e17ba0a022ba241edeb93bbe1dd1e0ee9e584fe675f876ececd93b8ec316a658631b73b986a902fdbacce5aa9d9970703415ab7933f90c0531af47e23f7573f246ec16f4811d840853b07906ba03e016c78264004a1efea431bb499469db8cae1869dbb24a491a08909f48bdd9d6844c272650fede9641715e9d74d9a08e8ff6e74a65e18faf8e04ef58c89455ce12180ee2ae222ed8ec8aab987c03f605c9979640c1c1bcb99873de7072c099ef24b1729290a4a1f8e2c1625c2cab1e17bd6cd1829c8e05cae17b0d6eaddb905ce85cb94b684edba16d899390e50dd319612bb1d9950a42acb3216092f6e08e79d2331c78d61b734823aa436102c1650c5674942996876c230834d188f304d0279d1a9df1af333db4e845f22028f101d98c7e700f203df1fd7ef1c9fac769957f3bd7575254a1371f39cf282da60e5b58f4ad9a43701ab622712bddcfff24ae4f0dba31d02d2031afedefedea57a1820d72cf56f42591ba826328ab97ab8e3d295d388bf439e77dca9c5fa32150d742d512aa984323fd87f7782bbe43679dd12ebfa18fe9a47460751895a23cd64c9996a06323a81369462fdb3d1d3b8a35e97713c8d560f55239a78635419c5f6c1f1b664399ef9b2f79afd3ab5706656fa5a040522bdcffc51a93551960ce3517281ecad890502b3c26303b19e3908e577536dc86da37bc0d9da714711344939baafa8db79b803d044774712cc26acec42aaa62a599db89280074b7f1183984221b7c90e180a792d32ea38a44d9285ec33fde073012c5fd97f3418ff60c3abbb13d755f806b370b77fa0d84814ffe499db7447ad8fceb3fab2c90803421d1b39087e89eb086ffcebb63a8eaf4ce40af1572d1c001464c308376757c94a3981215204c1710101264ede7f1e7bd5586f4a0bde8ef1fcaff2e937b5aa0702fa51ad8abd1668da6ca6a99a9afe35a7003b0b0cd0e3af768238b17ff3bf1fd178b5cc0f34dcecd65e908aeb850985818716ec67bfcb5a28e459f13d4ae5079591002e44213f862a58bcf2a384fd9faed837065b2ca95d579598fb42e42e5335d282675c60eca348bf190e8aa3119229a6a7f52fa6078c1e8f6cbf16bc20599b7f978493a2a668fa1171e9d6120553be79d309e1500f6eeb64abef744e078d4537aad3bd43626ebe1547f6dced32f7394f72e1b51e67795ef82427d96957bc9f7728bd7f990379c3ba71721945429d3fe56d4e310a8a03b49e1e2c5c3ef65f5b0f9b0ec314e132e93b32912a13c15b612936db28c6ea6c3030c86476739f28d460dbcc6e9b625311b7203ded4de4dcb0b13606b9f20abb2d03500b3f7e02e0ebbc26163068cdcadb4f9c45b5d6f2296f4ce2c466bcbf29e2f61fc0a676f5f683fe09d4c5b3f098a2b371f7ad1abb09eee8a109db0e77f5798f2a86d08a84013b1a0096c1849e027393e1019a41fb1c0ea080f3251baf8cd09fa345d8f21d234d798157a4e4ee0eff54aab0286501ce8b66e251709b4101cddae2b09dbe322c55c38be4f2b833169870a65c49e2b2ded93c2dad63c055533f095784bf945120609c8f2e8f0b030236caf875c03317b5df137b07f2f8192816a7a9be1061927219f2325c431b6afeea621832466c928233c23846d43eda4e4c8d6eac402479906cf2db43e15bd3719cabbafc8152470b5759bf8b4a71fd3e9854a3daa1f82d00b38375a71fd1a28a8e89bd4c74d124ab022160e0f505a287be35bd585a972745861ff22f9a924c11d6a341b1b9822b0e7fb866f5ced15e991775516964381c7d83826e1476b956524e2aea51d0a7bb974f7045a0304600dfc41af4209289504d8cd62d8b3a78e561887b94ab4f5bf830487954a0f0b99ad4c057eb427ef1545daebc5c88b08b70dbd67eafde4cfab2342e6f4f1a290c0483ef95e4cb346f38a8eb2b4824b5716c6b36ed2bb428105a1bf6925e43451b71a4b39aa379cdc625c53ff0fc1b133816851856a67d5407f15a1d5a78ffbf543b10c0231e8613a4f69cc35fa4f6f96ef171f237d78bf4b89bc4ab77346e58066761895efae10695c50b9c08f66af4538d87eb24bd6d61245bd86b551614ea4da50c707bfc9a127fa7848125d46bff2117a720435a3f22b0bbce6added4f3ef90c95f7c98d8cf9281e5ee0b73663b4f08fa27259e4b4e43dbea3915793f613f6a97b6d37b138723ea0b87357b3b6ab45ab992c238013233dca2d91331510d23934525f650a1804c19be78d3f583f165aa091b6ff2911529cfe23224ca7956be38ab536acd9df9407cf852b96bd9e3c906c3b35c8369aec0a4ef57e318dc4748d29b0ab2020939173aaba48d904634d79c9fceab0b21eca9bfb1d45e13f1fb65335da28548c7a6e77fba06082b58d959ed12156b103a3c1f2e92e85420b4692ba4e09122404b26f973a19273b4a7e55b1c917b2d8d4f54486ae3c3affe27702d1a9b3abd6b81c1b6ababb39b0a3094d83944215150e126115f104821bc6d134da3c0764286f38cbb90e8cac168f8cb5c8db6d9ce378fe0449327a447e92f51555b04d8fb5cf20d6a1934e471a0347434abb11e2fd88836dc9198a02b3db0bd40c360f954d6ec50b55034f049916dc8920ffbb3ca6ae623f5b2a2d07a8f445e6f00c64ee2790afacf599d44f0b44933e0e416f80671642225167eb47ecf40630ee99c47c6258e5f0a7bf2b4ab02e307bd606138aab45e6b5be3eea001336ecfe1248f588a4987fd042dd03c1ed0f1e0e52e16c208f10baa3bd72c74f2063db6061fe6388bc39ac5d2fbc8f7f63dfa16b5e2b1568676c07a77a100a236681df6fba23755961b91c9951a9abcf38a3d96e84587a33d86abb4993b2baee1b4b6a89af752cd0dee6c1850ec4e4ca343e3169e76e4098c73c8b1e3d4686eb6773cdd88a97f67d9edd6b652291079f9f269121e3e1721f19cd4449ed3fed79f90f75a37da2b76d868bc65f2fdb03481ca32fcf0c674c9970347120ed4c4adb4b9aefa680476cef32a0b5124e7c393a653d03c1cb513c944fff4b16b8e7ef15788936cec736cffab3371d2190143345a42e592ce0e6ddf7f42b604e2d6d8a5347b74e50e5a641d2b95760311e263ea281efe9c785c31efa1d07d790f29fc10130a2b53e6a904055c876f86d2989398c185d331dea97dc19d2aec7b4c29fde932b0bf786c27c1c939752691847625a4ab06521ec252214d9ff395956cf84a9f5d67a68b10bdea62a413808288e659a88f5a1b9574926cc491e8772a6d865b895575259343e33ce4deaf7cf30c6e03d397781e0bb372e9303c9115e6436a87c008b2ff40df4a931593687eb02a9e5b0e954b95574a6e44e7cbca44d842579105080ecf43478f6fb497c9fee10897da0b01fb0e718873609afa111d2f4936a63d922d18f1fa70142bf1710860a5e72d8cd19b71608efabb8dcf7d96481ad34196b8a7cc063ffc224175b179cb5117f279afb3c12d3f523a9796daeee38cbf750432bce5ef17162fc060f8f15540731d7a52b43cca5d3701ccf4d2020b5c2bb87ebf0cd58554a4f0f416720a37a0264028b84d500dff80aa4aa27cab667b57480893146939073d3e2b3ed08e70bc3eaab5268c100647ba3aa806645c57d06fc24bc246120984d3c38cd81f3d2da118d103c870594949bdf64c9180ccaeb16bbb6869e7ea13775f54976b0f21d333c225f103352360cc6c42082c9d72414e54670f53f8fbda25052622e0250e237c8d33810be244698c863163006eb5db79ea9e057cf39931430a2896c01c1df1f8fd6f47f3494c38bb485692a23558406830c7f21b5492b81a363ee424c1d2cfe7b401b2354014109837fd8c55f7e85365da1a5f7cd3b9489cd01daa2e0aa13a1f4e23175ebdfd44617ecffc1612bd493b48945c06ccb9c8939488dd90d59f5b881d0b69102d06573489a0162720dd6284d0bca2a10098e37f85cffb4ad949eb553a4355157bbfe22022c3669a1b920dfd8620f09843503a161829637ebc4881ce1f006c2056c916b21a05aa1f7029fb7d022000f9b2fe087e1877f39d0621d4df2badf457f03e0c071b254ce7a7535e117c0acad329a63166caba27431d1023c1279147b70df32b45653ad2b68b9752b446ee23020d86db84a2c3c4c248d6a5a4c9a0607fd6cd35f12f6a44dfd12b7f0960b2c14634d9d91a706d1f3b977331816cbd2d935d84f8fb73773460a266bb32b1f801cce333a0a84e5e4b5bab1e0bd38d5dd158cfcf169f9f8f8e282762906421a8690c3cad5f1a7f1824e2bc80cce40045b3400a9029351b6dca6b138e8e5bba2226942672b01187dadc64ac6f0610c8939ecfc28acb60e9676e20b992ec82a8537311ee5c0464e3cb64e9ab733ec4fe48c3795590e7556494a57ced02df0853510aa65e6982fae1d409db4567e16643b6cbab50dbe0c1bc2fe4d4a0f7c6c91a12355ec59e6b95642a8669de1437a8a31cf5373189d73505cab6d78dece3dc9be52a8bafb823f5cc57d252e8f98169ab3921d14a69422f863ccfcdba8d736f586b05f08ac20ae3ba88ae32984f0fbf9f9732733b9b020e58fe32f5da09349114a63ef8fb988221496b99e3a24a94a70902d2e505d5c24b947eeab9ad3f6ea8799f51ef5628dad5a99d600530cff301e423ac37562b05dab552a6963623c5ddfb30a82d7da137e92483fa956b00bf2ca2b924c3ef5c5889026a16c5d8aa060994215b3553c4569d47b6134e2582bf3bc7d0d29283163b0de5a5250f4226d091cfe3f10369264d1502f33a13afc1843d5623217d0e57f1a72617d218726c674097d61fa90809bdc860dbb1f86b7e048ed801a84678ed7038282dda44d378d31208f248d129e65f763c502184b430cf87b930687cfc8f6cd148278b11fac05f9deb831dfc9a9f0b45c270a2dc70c7acd8409bfbcf1a68e01a36d06495fe8e3a5f4549faefa0c4c8ecbb8bcd2930264671afca23d5dc389747e6e3efbf5bbd7a14ef31ed89975b02fb04034c768d9d10996728a2285bbfddb00ae436b8050f5616864af14051f7a146a7ad8e82acd54413537e30bcad132403c5ea86bdd1b7ecda2626c19c7f67d01d00f7f73567081b6bcf31efe220acf49b2261d7a8ad190e6050e9d6abd772e4fe4887dace48b0ad03eea9f29cefcf35a6fd6a3b8dd1c3403bd4a1975f547cd93fdf8568eba404c797684869b858a80ba883e2e4f57ea297b42fef636b5473bd1595bd265a55591d92b3abe6aa631a15534fb39305a9ad06c763e9af021b1a57853909fd28fb961ee13b8a43c79ea83e6876bd55d25fac432a95dd3b564d77f4a08b6e3d594d2881d1523436c5e1e49b800a6996bdfad4fce4a0ae6dfa13ef5673aa2c89f16631ae9fce7e8eb28ab9c2ba38de3197b3d739de064ec03f1d4c8ee754a243bcaa46eb0d1548ca0cbbf975d9abdb2736676fe07c0c36ca5806bc5ff3f84ad92feec1053dd35714fd0898547d6c6387f5d7aea9e8c4c0ab79201273e30207a18dbe7e49c38298bab94aedc6ed1b5fda85443aed7094853ac2965b65f614665cef98b1a924c39a659d0a3f274c06248ef6698042cec2e65a83476ad8aa476939a0d5800480cb75a98714da35d993cced02bf4a8ffc43bfa2ff62c7ad20b83f24ed08acb442fca41e662de1bc55f0d36e0e3446361dbb6a63c63a399089f8c7231af4cfed3294fcd9661061de77c8876a04de79dc97e999300431cd27abf6cb4c5c87712fca38663b9de5e5fd8aea2cf6f5e61f52e5ced0636d70ff9099675482cd281c9c15d154668aa42a9a79a32776409da390431befc70019f49afdae946eeeb73291df914c534136501a9d48eeba1516fe9a0065ee3d0b39b7b5503c95a0ea17e29493e4ffde84242ceddce9ae02abe9254fc1aed1d213fafe85c0692e6fb7489b01dcf0875371a3ddf149b301e20cfcd502b1480fefad46d93abda00588ee516a36a7a1d78e112215c5de90876176db416e2924a8957fb0d11f2b261d0b58431a86d591a29c93608812225393fc0b4284a60786808e7b0908f033418ab7f9e371f8d0f332fa4c7459f608565377dff727495a3e1fe9c0c24993a49604a82c775d3fbf5940f645d8671234af5bae0f9c8a1d4120417f3ae2490fc5607f3b06a8525bfb42e5daae9c743d13b97db8fbbd870e0312d352ed8c15fbc574446b2dbb7b80553579b600922178685c7916f097dad185f4a9b160f551b654dd50542a15c459a4fabfaafc1bc62a25e6e63359e5425fd5f8690d1dacc84f8ec180f93e31e6032f6920627413c0df1f5ce4a935952728736c01252ba5b9939b0693973b2d6d02b8fc1cbb4409e742625a7d522824d1836bda6ccd3ef887d2dac06c8476039b02848f73d568ff7db099d9d5d7cbedb216b7007b24703a9677940e22bdc44310afd00c36ea311d4729b9c391a7f0ccfba1f9d1dcfc71eae3ceca0bc75f833327bd3ded8472bf15aa71e2b5eba6d4e6847c128e307c9b31f2ac27968620a29e3641c28cf1bbc63a8bd03411166faf7a351ac9f76ca5b3da591473b85e38c596871983cc14d5cd5c412ee3bad937e5fea5c1aa713cb33d5383a52c4208cdae0c42e4da7c7737fd2a1fdab939f06fb7fc2e4274338a486fc5e4257ab86530e6298062887b94d15c11b3b308df627307dfa95d054fb3948871aafcd5fd9fce27b453b2c9fa48f1ebee319d2903da6ba30d0a6fbb93c3af519e8e9e3925f3b498c559f3245ad8752dbd1409fea659cc06e4e0fb1ff04cfc8b1261abd7209d0688d72363e65a30b3193c86033638f2a1c9004802f7895f9f97fee92e855a133bbef9db9496c0a11f2dcbc99534f7bb499e2e29cbf5e39353b1e427dda5990715f4444a301b8d5079fe5c004d569cf5e8e69a832ed1fd158d7006560dbcb6acfb0226729c09abe3d17254544e8af5b32f4cea703a7b6e6c9c44b9ba4e4176a5df2cf71e548f4133cf417cd5599cdd2b81d98f785ca7a383919517e7f6f00f2a2bb317103f06ca9c5a75283f1696ae8235c5359f7ee55547af62b9fbeee84d75cff1e51258d28d2827424d8693528af467fe84675a7e171619f6724bf001f8478f21f388d7fcee5ab9c38ab4c5ae74e4e97e3f2f080e87a42ce93cb74f9529478aa42ec1783cac44d3da9bfc7758cdb2bc9cbe5e7531cd3aa2773f0d00a2d425d4b13e524f32b27121affee9201a96e803ffd3b0367db51153bbaf486ab32be1130686e0860489ac434df8ea36b50a9b6f32692260c40372295fefc28d5dc8c8159f8e08a6f6990bee3dcfe8c9aa2a9f4aa09dc5e1619aea949505219c7fefd00ff2e4fb1241a1e8fb0baa5ad86c6e431ccdd9568088ba180778007017a1bad4dad338a63b8bfc43f844ff4faefd75912b87828aacbe6be8062c15fe6a5bfcd1c72ba37e9526a5a6c6499b80322e42f30fe0bf38b73556abea74b0653ffb009f55f43b41780e78d3eff56117010317eba2f4da74fe6ffeeadcc6f7dfddaa602c4432f643d7c249a5f4d2c86c24a573a7fcdd720e6fb85475e4d06010d54999c7d9c9af9b36c2b4c4f3fe23bef331e744136e735567034953afe9d74582298533bb946d667f16ac1a2e5169dc6203a6e315aefeea544449b33fdc286ac9fd7e9d10f37a19f186105dab830dea73271cb0328c3c08dc4a970106aecd11ad099c7f1c818112a64482f70b9117ec68761253606cd35ecb465bee5f37ad49a4a88024c52327de42a84328c8d86d8460ff2ebcb80e3be836ba69f8155619a3c92e2b4f70bbb9d137904cfdb282a74db427e9cab55037378f91274d823a1841808c2c5edfe52bc6ca652a40bab6b7ac7022c953b8ac76d8295df5fcf2caf8d70e1fd6887727112a300a7633feeda709b8596be1964b5976e95160bae42c5c15dbcb0700a75e99740798f39510b225229271f08de33f392c38ddc9d65644969dd7d541235fc0f0d7499208584a659c116d8a2ff0ee477a850d10c0c65a9afdf0a611eabbb97885f59b02a4e41e2e95aacd085a7a2eee33ee2aa206a123f59a07bc8a612b4ef2dde34af0311c484e1b0d94edad9c79c8f855bc6aa5f19b1910b6f43c15cab04872f5ace8cac1a077086cb29c56917bf52963abfef6175bc7f3ccbf46cebaf2902b0d8e0952a66a4fe99f5aa49b423b7bd526b62393674a61d4dfa4407fd4ef4897848d1d6a94dc6febc083bbea8a9d214d8029af16b0de5761a10f90ca52add90f231f779320247a055f7101a2f050f9a1e9999ca3fde5219356bd83152aad405ed09cde420a6ab5a6472aa23735ca6ea46d6d0856fd3510d0bd6a18c7e0ce5ce0fc6ca2725e6adfe5e47c983eb8abc063c49816a62ed8c77644b8b59583ead77d182fc754892af6fe6878610e62461b02821ad7a94097acef709b0d32f6efe39d423195ede3f1e6304940fde2e59155633703e72c09cbf60fd543ebf23c41892900316c0513707126093aca9d1e2b810bb505bdaed80e8de49e9d994b94a11f2bafe5d5c500a091458647d3ede60e471903b676c830439fcc025aaaebd1d6ad40def6a1110cfd4ddfe409d77b4854c12c30f76ae8173182696e81ae660e05de6e78ef3ccb5bae8e46b2603dc146d654403fef13c8f727a55c2e859f7e44d3008b8d2eeeed09f6996d8b2a0ea111571c2bc42dcdb7cb4eab0ddc521352eb7ff48758a059d97160f2776528b67737bd40677fab376c6ee577fd82a0e389814f1cbe88e871c17ff1068822babf8888ae4992f758ef7b13c2b71317cfcad11cba1b27b1ae44fbddfe08e805ab0f42695bb2a85a0b222bba349827600b71589da6143f94a64508323cce5561fc06e0cf312f789d2afaba95e4a8bd5fb35ab1b9d4c2b8c8b1665f22691b9a43ecc710fb3547be36888e1b997c9ae720c2b3bfd14e7eb12ba55e849e6460413361cc35d93d2debf125a8cbd0f7c1aedb0d47dcea8fb54fdff071e1f9984636ca4d23dfe082338c654ef162e9a16e56cf89eb40032eeb753a56aa8f47b67eee9f059d06d9629931152dc3504bbcf9089c6e67fcbe9e58d37868e76505c67bd29c44a95fc4dc799fce534fcea4ed6360b4e803425dc12bf12282880ffa7e9e085be5ad47bcccc63e1800e7dc054abf67802fa77a5f14dd0007291b8fdf1fc01177ff656bf2f06e2d37e03b140b64971bbe64143fb60ed10cf56bca01aec534c52385235d0ae12344d36b74eae6a79a6de6bb00491b996edd062184c9c02e26abc38107c1508073ba3c2c1ce5036adb43b76b6a9c98579cad4fb895ca55f2f8139a1423a3853c85e25448dbc6edd06a6cda1eeaebfe1d2137b1a96056f99d06c2e6fb939bab5ba851f55e615401379533f8e71cb9535b8bb8a7a137ce018f3fdc3f91eae43284268ae165bd9e4d0f54d602e6b41cc76aaa3b7255c877ebf662df33dd5be671b4d4a7525218dc09d604e301c92d5b00d3e755abebadaaad9d1df918167d56668103e8ce2f276313e748baeb4b7fe6d0f3728b0f5d7dab59ff5dd44880a41db98af7407937e23f89be8db6afa6c95ccb0c5baf1fd7e6c21f058736dce442f31cf6d948b357499988ac4791475543ec1e1322f4c90a7479af2268627edf7eb2d316765be2cc889ddb9aebfba5dadd8fa460fe335618ce4ffa925f0152bb8ae5a34a6ef141c058be3ccb24c0d2569cbf89027a819fcc6e65edf37ca4aef21578262381bc5b221e6430fa64ac810dda9bd9f163b0dafb3a9888fb19ad8c34ddd845cd53e04d4b7dc543549d1f7fd7cee83dcb9e317dcabaf248577d57c59628b218a1501865fd73b6c9face7273454ef7c303f9fd9ee80e6d64a3beefb06c86526187cb5158414d28d7069a1709d938c0b11e1658eb2dc0a1b3fbbc26f7c87d919a3bad02c7fd012ee3687e4e3e966b6ecd96b9e28a742955ccec201b2e54dcc58c51362179959e0a3c96621dd516c1c21465c2513f903fbf1cd6ed2e31fe7f6dd5631dcb77f810a7968c8938070289641ec7c4a36acc17e1b4e79de757726f719d33b1b72697151ec68cb408e500e2d0f7dae9a8446942f34631089ef0f16be2bfd0d9a695732919ec8d4956093eac19dabf24865252ff50e6ea42ba39923647833277b1e8186af625bf4dd631b68b5b1e2e1c3637401c9c690fbde08063123f630101e4beca31cc28a0d7a0bec86c8d006bcda0949ceba43735076bb7e06869cc5797ff495af44afa663fbf52f016ff76131f0b855c1839a573c5897588cc39359d60c0320045a90a93386c678cf4ae4c1c90bc8adecb5ab77dfac9d43ac551d477885360b6f99b4939691cb24e6d371a7a6f3c4ef2751ba39b58d21a1e2270384b003fa97dab7e2b6099a0d2fb26f52dc587d147fa696f1f97de9be6aabf76e40f9f2bb09f0e7dcbce28c3ed9c4b431b61d4a275780dedb5804346f4479248bae172781611734bb36f72a305658b8a3f72e96232196573f818693c351e89a7d2e7cc33633109faf5024a7031c487140d713a5201ef93d894c2554a9f8f4baaa3b01c6ac3b365998d63d98cc89d162f332e531f81810761f73bab64c86863db1116a1e77d696b112b8e70c67cd255fde44931ee44ff42cffea4f2f2ac04eb367c8254321146e2e6fe1900c4c705dbd76ab11ce091359f22600d7718e8b2fce48fc2fcbdea540d89d151141187423af378eeff29b9881d1e5bf3b57675a0ab77177edaeefb1c5eb73688277425b36415e3983642a9e44520924a2a693396e077683815364b5723b651a3822cddeaea129ee2cef08c3a09f7706111cd6296814154a0abf5476f0e43b01ab2c375751ab2aa78346b47c0d717c72738b5a5b0f79ee42d74abb4af5ea85a06be16f80542eb01fc5a874390313303805da22a75143954c36ed9effe1680c2df2e20f89c6eea4cf1f1fe11f327fd595d266ae3d0ed0872ed4ba21ea6f209398f6aa6cbf758f37addbbe606fdf8a7507d2f16f2c70ce0d71e6d8afcb5472b406182fdc44cfb234979a86454b038e3111a1309d83669acb05d0672f60610865164bcdef662c05219424301653e219b6eb5148a80c3b2204127de02754b9502ea2c26c5690ae897ea7d1fca5250d6ee495e417f826debb1871eec1cb36655eb26672d1ef200aa0a703638b2bcf20c1f44a60ce8854780488368b66067de199e1a1796a39d46e220eefa428a99dd9dfc47406de53270d9da3e2b328e841ee135f4bee6d2946d6684dcef9372badb2640bd7d5e829d6fa565d88ec17c366917105a48c34e4b2df63c8bc0683703a749bc137ecbc9720f7ed860ba0a3360d18e049765b2a79e19e632d9173b6504284150bda6d8c490e86e6c75274b663a1e8472606bc855e68abf872e72d254414ae801de0dce01b279e7fd1073add8894ddb9a0070c7f5ee16fc5caabfb4864a153f468968c1b13d3c25637103256c99e0662df24e9fcdb42cd29c1e6b9c527fc2a0f5140baf193f612a5ec59fcb678fa352a18058005dfcdcb48ce608cb449db15fc72a46b5dc6f1eb3372d395d4cbea4dae3f03733831054ab52d2aa25874b8e26148eaced14ec3f98494c33c4f0e5b9e53ee01e111ef18b7f9843cc561ce2e0600471ca2dc6ceab4a8bc783ee434b370c816b3f57255808ee589fb7afd67525cfac4fad256e44ee89ad14660fdc9e958cc0a175cab14e06a61602979935fda4375c8c8ca27d8ecbe4c3de5d0920a594fdd976c5cc24c17170f769bc3da0582018107ed1d7983e28e259af7e866839efcf7bcc10e5d9f98082c49ecc1f5bea912a98d522827fee5a5405c77ca60863fe9ed6f14a95a82a78a6ce62ebba1a712805e6caf7a4eacb12c741953b950ef1d91bcb20f3747fd5f13dd2855c36b5e4c03caf47b59b5e92ea1f4205561629c04006ee1d1222a88d17d6aa19dd6872c3565a3d29227b76d0bc2b198ce9352f267cef5d4f820d31f76ae23780e77df5288b6b472f771e3fefc82bb246e7ab980b3c03781f80a137593f81b61fa6339b5de3aece26122f1d7e2670619f0a7ccc19928f432bb3ab8c6cda5bc50fa458c5a605e9658758a58cff34444fbbf7718e331a636d1d6ed12391c1233952a9309ec8a402a71c740d7db855bbce4cd0fa7de9034e1d904ec9963ac04d49e24f8123f10a1e407745dd8a46081f8807cbeccafdb977f1876af067ce36a99149928d29e22e2182b8a673adfef46d9f1b2f2d8074f501cf90333c72d4daf922b72f441e1a45a393a2f0dfca34a2dcbe53af926b6411f5e6e014ee9d01e5753d868df8e0c12ae848227519cd49ae257f9a15d4938b4811ae8e74b0611577dce565b6d3c7ae77fe892464fc55f0807043071605e5bf8fabd4b34cfcda51fb8715a6dacba3c327c36fd630f348d126c966bf47d924f91d25560e1103bfd99fc5ae0b5ed6d26aad8a1aaaf73cd050a1d24030db4ebecee74b0925a8d380b9e9b714556f09d74be897758912145c9e8bcaa7cb5571488d18e54d495dc37a212213e00007d847d3232be28ec8def6517f33f0659a47d54fd257b6c3758f738f1fbf112156c03b358bd325ad544713ed932d62ab30ee5555bb51569b33585ab21f805cdf33fdf50b0424407d1e7a74e20bcb6fb944e9c3d58be003b7f4fbeb435d2e8022a8bcf81526b84b8eea32942ed194a6f2ab6b154376ddb3201fe75ff7def6c3d6168430400f990aed9f3fa2cd499c8d017c40d02ec2c349da5db299360d927ed0f0baf835ca0a7a78f9bee76a5a8453e4696d930999bcd3398a514be541c7d245a08c5902e977468f890fc43ba0d56712082cb5f3f6e9c3f171c4f7d58a148cc7c640a86b39b7a67c5d86af18b9d2fa330af05bdb566bb29ee153ae09a3c979092692de28ead09f2d1e263d506f931e50fba67597c060f000a3f72de8f8b54dd92e93347183288001e8dc190fc59e52c022a833ea7fa5ad5135023020f4d871f8c686b01d8da27e2971b52695747ec6459258a72768a5a647118c2c965ca78c398e3b44f68cd92dad8f6595a57699510aaf2a19ee4aa594bdbfcdb82d134315ef1e1ab4aa81f131df2230c753b6ef4025fcae0e17d9c96773029872fb1c42169e4a5351ce4c66de62ef23e3048e2536217726a858273ae6a5b9eb204f538c23499363c604d7c2ab8788c8cd562b5d4cdde01032f1a614a5bd243de67d84fe999a827648347a727ff200220d0547b40573873ef863e492f21e085d4ca2f95a8cd566d13907e821dc0dfb1d643bf7d6f87fc67707119a93c53513db3b6a93bca778d1960a84dbd53911eb4a40b83924708e07ddfc3c1aeb79c0a442b3ebbc1ac3758bb343d7a61c138ab315a4d2f9fa0236abadc9859329216844410c41b2fcb31d4cf9dafe3f770de757ac68fc980beb2dfd8f21fd88226b95dd8db8b909fa543af74aca7a85fae1d5a4f06d23159d22d2b39c4f40c296a5968cd1f9cf5b42bcee1d5341d2909753f8316009fe04d5261590bacd16a05b7d32244c2522ee2fa6c3de019e6bcc7be8291c7630b7cad494d1ce2832734e1ed3136492fe68e7c1b2e9832fb960ff566e1b771ea7bff651a088e5ef169f12a003fc4051a3605f7b72f32131280f0b07cbac9cce06ad6e95a2daa118f36dc1098d0259697391dcc9572c8dbed3210ed67867ab1f451d6634199d0a76d28aa6e2c4ed0970fecf79b9314d7ceb230fe2b98085553f759a0c70120964208aec85b3d7affeea310ed63f2f023ef0db6b4c0ca367b2dba2434a7b083708550b7980393963744c6af7870f3b4b7db86baf75a52ac1bc370cb4e2a6f3d2d582ddf90629acc6e211bfe9388da44ae22cfc2d1af9c149c0e6b3222ef599184a861b7936363e79d8618cb00e7d5bd887cf92fc336fedf70e26761387f344dc4f7b31b26dacc55d2e58fa351254b554725b0c067dff809de0d99aef317b1db96334ef2c8907eb01da63b7cb33f21f144efa5800f839f1e92dc29f0beecbfe94d6ed21ea8660e5f94465c30df6a18f41bfb09d5c10634c2b389aae376a37fb69ba5d121d5ef5ae7358910fc342e287ec98038192cf19138d07a921079e3e326bf3d91ad4b060535d46ed5fd1f05c88197dfbb1e8d5682eadea18fed8d9661c576df93127eac02500227b68b1238753fa4db1f05625c28ac80cdb8d6bd004fe462b1a438faa1594115bdf0b7317ebe162d78bae35a5a84824cbe48f892e57bf10208b25c8fb03dd5e3fb7b875dc9e998854d32ab7747f0cb8dbff8e5be7ce4300d6ccbc1eb93fa31e3ceb6f86fb2996a050b695c9311d7879cf35e72e7ba3ddd023817693931ea5052e48d070381490336c34db4be06fecc0ac42dfb1ccda647fa3c2e59866c747d428dfa139db6ef9a8f23f0cd68c8d03020229aab9c0509a59a9f01d896057da8c001d9d850f461e24ee6f435e8f6ed015b7d7b87b9200950b5dcd7f57350a83896fc849c4e197a4e023d2a392f8cd9e22bb6837c54d645f07bffa86d810e88b9230703ad9dbafdeb2234ce3937734a708646caa231d5a2099df2373941d2552c676be70f846a47b1fe37fdc8eb94c51ee66143ef499213ac52c8469f5ced2c5f5a9d0d326a7747284cb02ccb6bfaf4bd3ff9efdfe21fc6b6d21eb676f29b0efbac481e0e061e2c9d0bc14f1a1b555850e9cc60b25b30fd510dccd952c494760b965524b794b2e2e90e4681349f683ba162835f290535b03dbdfa6daad234278b401e40745a006b8753a39ca650e719bac599fdb26a477fade2ced498f72e38def13387aebb7d4d29e1f28407368527cdc4c0cbd64ae14a61f34f06a61fd8c26e1fa4915cafb4284c0382158fbd8af5a9997679a2df64c2808e3e7909e1649fad89af1d56fb75840ccce9691a4986336f09d2f99ac898e9cfbd98ffdf66e34d9b1cce6d08deb647a4d5895ea599fe3867ced6e729fe6f8e044157763bd45aec227b5bcfe741ee5758dc4f64d36955a1c259a2850fc82b5164d8ffe18f455cc549334a9426342658e5134abe7264ee08dad6b4b11061054af565acd2ccb2a9da6fdefd8017bdfbc321451f4f380a4374c6c1a07be947030cb2253ae913426fbc6f34f4f363f6552d5a33381b7170c5092b0d3613419616d6cb9a95b9d6fd0f9692ecf0153e3a1c25d9dd96db29587ffd0389f28abf47c2aedadefaec6a3a653af1a9d0415dfc44fac878d69520d5231aa9cacbb8dc63bc0e75459f0f6f841a15b87def90edc12b90d0f88816124a095098af6f456884af60a6c4e2a30b8cbdb5b8edc22a36e15a644881942c6041ba783fec4df0a9c958c29e7f38277931c29c3f79c8bee6698f6a8460ce086413950fb6b49c685d4ab65b8fd6d0712da38ece1a050412b9dcef8ff6b0238533758bbc550c0b6fce9d8d8da11418710dcb52d16b8597031d05b3df42fea30b137449f855fb97258b44907ed62947fb20bf56742811e9a1f26aac484735712dbc4e9a7da4551c8a9a56f044be4d50171b2282ef7da200e967816fa592c0c9fe139cb9da4b550a3fcdf90bed974333fa6a502dae72d6e5ab06b480ea55b023e5561e110446397589159c2b45ffdddc46daa89795fd69f6335b429c6d7a03c2b89ef1ccae5ef5803787c7de25e73f60407c51c0cab98971d35add46afd6a355c855ece508db8dd1b71368044e063ebcebca21c6d438ace7541637718cbef79ce3765fe80f228966a945687ca4ecb3a3ba226b4f3ed6f699a4fb5b86ac7a2a1af62d5c82245af7c5002c3d6b3ef0a6d434044ae4641f21efcf1a3fed4c99d68e2870597868b12f494b38713443d34aae1f527f152ade379737aaef2bffcec47b4000dafc7ff1124ded508c58666f4fe81a2f7990fb64e294f149431f060c654cb8d41f9737264ab366008fd9bf269ceb40ea521a794b3d6e80f116c24fe9d8da5283a01ec40abe29aa5d6eed76240fc7f4cffa283626c4dcd122ff71680933ad97ab58a893a1f102e18b1dbcfb50f51a0bd70c6ffb5c666609a61a41a8462619fb672d3ddc2d5a4d0cf7b5d270315254bee2ca79a1fd76cf25f72a98db1ece5747679b1896969eeb50d3c77c75eecc91ca865de635405487806727a73944ba0bcb05565b72c1e0001586dbde9af9116a12bd9f94e98020b14a898713dc2bcee0226159ede4c33a2ac811081c8de632264c634a1aeed65f04404f2a591312006f2f62ab52374c50e1ad801d8b6fea8fb960dfd730a2f93b928f771fb27ba5fa2a83f79d0a5ed837b06a4041169b13b35d50dce203cd4ce915af1eecc1463916f5477642b2018444f6efb88a5107952f65f5b57f3b216c124d1382c3ed905389e2212412dd4eb702b3f3d4853955fe486cd3438eaa0e84d56247f33d37b99f9e185034186aa2cabcdff2ae86bfaad9b8a47d24844addb4c41f628c8bc6c4938d82f601fa4083595eae7fd7809b33903802470c75a3ac7613550aeacbc2b2ce609d4eed4f8deeee10e78481d8cc3933b7fed0539e02263018085ea1b5125da0cea27ec928912f32dd2eba90e7839d55f3eb25d430ab5627044390d8eb83c081982b481ccccaf74d8c02e0bbe27b8075c210cc7e85a3ece9ae64e094312322cbef89e17e0763c8df06d78b7c5bb4ceb220204e240b675975abc809b4c7fbbf335fa995abf0e695caadfc9a0b4d45fa889c343c62a4d3001a61e82e1715973f9ec075e5ccea53e4b16e42c17b3fb5fbb69c88f86e2452e53d422805c86e9c44715433188d19e84c1015cbd92464ad9cf43fd72034bb86341a95d4936b9d81abc50bf1e9244396cca0171dd5deee9004209bd3590a950d27c7e3a68d34f657fd98222cceb1b5e18008ff5f29fa2ea498b9d4f8c238cdc7c646698e74a7711769007d1db0d450444067c3f9fb4fefa696ccdcc0f8217538d7ae2b127e5769444d38659f80869f700d136e5a2a80e1353ce4b2d06809c7b938598efe7b705aa3b20ad245b72a379699b0e73050f1dc68c6d2909ef2385f0a46518a08361619d642fc6c008f461029210528493fa91d5f08408b4eef9ee30f49017d457b1dde1a88254e4938a670e720e858124d77f654a0462bb6f1905c6d18394994b8b98675c9fdfb7ae44343d2d0fe3944d77a82eb9140cb2792f9f7564da2d128ca6bc0e94a902ab75046524586695eea49058d70b8cf3b673580df05e22f25c973a116badda001c296b400207f4832ceb474a2b2769bf71ad8e7e151207429d4503632420417cb1f7f08eae946e50767dd025df8a9d6467ac018b64cc628b8134a427ab8be4ddeddd1d5e63d33311f3d3294a4740b164e3e41db871d666f3192a835cfbb416c994a2b468b90de4f25d0a3e7e3f3a8208d10bbf766cbac8f8cbd4709f57ef76939cffa1e276c94bc7bc6c64a02e197d7306b82175af20ddd7213e05c6e73d12a04c7b61c12119322a8ad011edb4bb5a4e818c4639cb4ac6dd9e467dfa95f899801cb230798152d25b06aef2b163762c2220d3eff3315df01282704796bd1f7b8380c360b25190d788e93ec39fe90be8b542e93cdf5843298fc36d181e10e5d54d8aae4eecf594205f7406a0f255ce27d7e9672389eb57ff54348a1c9cde588edd41acbabbbe9b1c936fea745e5d59e214e5153a5c9261a84c8cac2dc9331c3113473ae759bc381439b79d8f0fedcb79291c7c6d0f9a132654188e87d206f02ae5a9d90ade1ebfc6ad07ec16a59520313e40996b65086939787a1ab1568855b72c4e5d95a243e855e8ea33ac1fdcd2de2dc37307b1d0efafb7f3936f72980151a38422da4d4412f2cf0487111a3d70fbc913b201ac8233c3c69b6371fb1a79bf69f14391b71aefd78d2ad21c849df5bd2d6956ca6c107b477d2a36aa62bc22d7115f675a36d18e1a7921c563f61056f7317b04101e694f127b2cf846e086c8a874291cf1f2d5a69a1f6b1d661f550026c5727581a3723eedfea62665b049310aa698cd7cad933df3f7c5eead0d50d884165bbf1cd1b8590d8ef1465a197f7744790b1bdc4435e462574dd2d6873709b367d1b912bcb323ef465f99f37d68d5725a6f47f1b5bf67573d7784f678014c7df6b8a9688628a351d183c9a4c6edd5de1110804d62e5cc1afe77e777efd329d02ab53faac62b15e9d38f1169baeafd9fe8f15fc48243a4ee5aa1dc4ad2f820f097121ee0976ed99706eb5190813675b031cbc8a2dc3cd56dab6981a81d50ef13f1b3a60b78600b80358041dad8b09bdc3e42d24df2548d1830fa3de9782fe825243f089eac4820609b455ebaadeaf63bcd07c9b151414be17a4dfa4f4243519868f92beaa520d3c06700c3c781e58cfe2deea95036915175a994a43f6196add1b9bb6b8958099262a6fd3573f69cbaeb36f208272cd4cd66351d7e979f975941ec7c121036dece32232b3dd1f5ab474cb3934191d8de5fb0d7748322dbd36e2a62a64e1e0d67862915712ae9ffcd29909fe1bba3cd7d7a0167502e207dfd861ab894b33d83d858cb909d3eef64ccce9f6f6e2eb571c04b33436ac1a1f64f01328cc592561fd110633e6dc483a4591f58cc832af3b771888164e275258d625fdfaa29d0515f8481265a457141167703c3d94c27c04343268a52b5b1baaa73b7628b3d1dc627863b5d98aff9758ca9b11f79b6ebc493e2d7bdcdc2d024c6a9a91d22f3d464284b920ed7af0aea4888f18e37e56e37e06c007b59dbdef3482ad05148843b462858cced1bd06fada3e49716302c82f924f0ee8ddf504b10a08663c23e8af494cccc2971d79f2ca0377516a970481bcb35da1902605dd10b9e18b454e1747138bf714c94adb0853eb541e220b3f4cc4c32c2b229924c5ae822476ba06d0f8e6807484c5b3146ee93f3539be6362f50d20fb43fe7a6d94ca1c38079f3b21dfbfcf02dd490e6b0dd22e7e6f4a46e8a679e735d3c3dd6332e0a9065ffc94a4a933e2fee6500344ce40f6c277758db1094dc0b56538144524f4ae10f46ce5512191dbc4609e74b21fd0c7b8ff62738c2a150ee445f6614002cb2fe86a87e43ef9aca0d71a61aedbfc1b229f0209b953cf7ebf8f83e7adfc034a8ba28d7c184d4d4c666f2c26eb8a9d19d05c483bdb191682c6142d6519aef76209b35f5830c720b4eac129dd68b91b17155b7364b065032344ced69355b3f2d31d0610183fb162e473ccf80433cbba3d5df26d22a6508f0ba3518804c8f53da722fdcf31ffdf2ecb9b2a4d2c7711de4f0a43e19eb4edbdf2b3c781678c78c762ab45943bda182ac5fa98d3ffac25ce3b3c360e2d6a2eb1c21fb51dc18eafe09588458d2a3d10d3dea35ef49e91cd4069473eecdbf2840804ba762dc86f281407506db7fb135e4b1d509b1af1ecae979ef203fb46daaf8028a66ecb3e9264b0d26c8e98fdedcd88289103fa14d3813ae34e1cf29d3c283bd83c3334167496642017c149964efccbb0be123b0be4d6b89aebb1126f9be2daa85ae2cc204ac49051adc5f00c11e73e8afd3bf6479383c1f07d311a52f5db10bf8338d5c10382cf33d3e7c75d1978b0a6877e43489b7285570aabc66296f0506072d8a0343211cf53273e37933347a14899e250248c42c225c373239f84823b2d8f0eb4dfd59b1dc707aa2b8267717a9afa3a5ae77297b234b9caea0e64c17c130934849d4955cb5bc34416d17b22cf8ae890ae23be475be92682338477c90e644e7696004495fc77ceb3225379c33d8edfee380768e90793bdd0898d90728452cbc550c1be23f298db673bd3b46da1eb24595550094ec519c651b606060b605e6bd200d9b223023879e5efe19b9486b0b7d52001443f8325dfb981d6b7ccd9e3dc3bd02f3af586435527c10362fb0a9ed8afd0a8c6af70c2c82e3590e3f6f146e57a5cfd8968179c03fa1562685616bc41dd373b73d0b392cb9bffb0bd0fa254a330efaffd6b47b00f2d78c63d96d4b340487da5df3b5c23dc7e2f2836b7943e72d95f360861e5ecec0591c41c75406b9b82aff61674d46197d98e3bb36360c1e9e3f2eb13ed9c02a5eeb2768da3e5d1cd4cd6f2bab24085a7e7b97881b5d98809aab3ab9c3f059fa1f3c0a46dce98c9885fe6ed3c4ce2ac1065e0c90ee65179a6ae2a0a4879f26f85b63ef65ac4390d4efafccf892e96f27eb70ad37be17f19fcb45cabe44321204ffc2a963c97e4321bf5ed5de35b8694412ebec539960b09c343d6251f0ae10a9e6c71661668faff650ce358584c33bfe80e5d0b482eb70017e2364a88729841b91ce7c95ab45f9bb23ab817a26fd4c2bbbcea5a01cbb8dcf3163afc662c7c6e8a12839327cc6045e1e866b4ca80e6bec1f73f44fac2ccdb57241063e8e2ef50df61876f28b8aaa65b2dc8f085aeb5d54b85ffd11562384f928e66fb2a64465083ba73fc34f7446233d8b5d8f364958a500f35aa5bdea0a50468e751c7215a845ddf2589d2c6f8fee8e273b02af9a47df50352c0f51513196b3bd07236e95cc0375518da565a8b022c0d410f36c3c9bf881e4b3573c3f306fc31cb66678ba8469fc6d86ca48918cb516e213cdd7e87fe600a4b7a28d539a0b1b8aa90cc1aad765e52d9607dc7023380c5d890de018eb7b0357723c8083c2303858ef405c90761b832897a025d1cd17f3c926756198cbed996176d40725c9481f1feec350d2da25178262a82782458741b0e59e61057fe3bc3d2a00aff3546ee3408b5001d63b4b2ffcbec1b8f5fc7a736d1745b7d6180a84bc46568953e9154ff2f16a43f912c97a08603d6df2f091b75c441ed35a8675f15289f1e85195c4f16c0c7b8232a8443c28854b5a278d628e4e5e16626b0b77f56d4405efed737c19d6fd6f69791d8c288b7c3b82f65a35be1c5540f9b28f98650b7245eb258322ab609ec4c42221ce9399d601e46dfc7f89e990bbfd9990a7996f40b9543a9b759cbbdc5821a30d6870471d98fe05d0e64b1bf4ca493f623a75166071ffd1628c81c706441f6188a83cd92b32d3bc7181ab380cd816ae3c2682a21e6bebffdd023cb46af3be2e545f6965ea522dbecf984c5352083014a9e81ed00bfb6fc41ef67b6bbcc76b079191caa8c38a49a7bf4476f691d791979548be48902708313f3f760b920d45c5485905de75f4f47dd19c03208606c7d43f61d9a0fbd8a525a66af6e60afde6566dbdecda19a76a59c69d4289d6239d69bfc2a6d9e60925a00a9a942b5a36e6daa330009927a444a42b803fc188669b32bdc99a1e2082d57b13fb54ffd570a8241e776e0076a8c748dbb7bf32c8d28806ea8e2c799e5f76a03447f0501cb0da2812615d83a52f9884a76d4eb90728e578b7ddc3f5628e2135acab042482d6012c6a06aac590c2be91487a493991c4de0922e48e0c9e2b6d24fba1fd5d18246ca86a2e539f61d39e902402b5dff55d263db20c87ddeefe52a9ee5ca72d08b5bfb83043c8153927b0f71a5b46758cc557ae58c12d9a4a53dcf4baf247f37d1ce752eaaaf5507c996b33c087c46b01a469db9a2b248aecd9fb078f4a21d3641145350ec81f80c21ae18a1128436a1a121a19aa695decc31069e509f6ca761d3a3ce56185a4941b25b57ab4349ea0bef47be77d2b2ea317dd16669e95a9c898ad6406fd5aea461f9faa92c0403ef22c2a79b6755bee3ba082ca554393c2c9089a205c0f468a62b5a180c7f6024dcc5cad54f4cc088fc4e88b0567128c0fbe71f4d4008ca338dff79a3d0f24035c1919dbbd935312ee94aee2dc3d81c62b1648e046c935843d5edf2a8dc56e8dda50e1832b5adb89cecb2bc0e19f454d570aa2f9d34996bd1995ad2cc47d17f442f6d63bc382d4ad411d85216079d86d16866736b0a851f39a2a7e8dff7264eb3e1441745ac7061e8bc8d17f9e9520f9d64d8ebf7e7282e532bb85b90d55d4f0d72c2868833314b4ababa384706b597d62442bdda0e7095ab7d52c9372dd0953656be15f6b11421502200549bd44a476a5132182d3002b514f40ba4a1eed1575727cb675a53a9cf5de60aaff6af078ae28b7a1678ba21737525f708ac3dc3ed9da3fea20c863e8024f9d35da7f34d95e61dddc7725eca52f2e599c6638a441c702bf6b9caeabe20d3083b5d63394cdddc78c7e3bbc4d63e2a026ebecb3c751b0979a142ba38a2dd0fda40264f1c82951532614e856e5ae7b716d72cde9b64ef47f9d88b5f887f9c9e4aa4dcea5f16a6832a876e3919c82256c97bbbd1c4708942eb73690215ce13f40305ec62d214eaf91a8960e4a71a0049cce50bd002f3dd5372482662a753a1f4ca44f01e8cb45d5683568b2daf8f94f5ea3198d54582c846f0f2fc52c07dfdfb62d277593590ed2c0525fd959c0b4f747b9d3d526663287c1b792c7f99308ce7114fcf0cb4514ae3240e49f98406d914ace87a2cbc08823d38b584efb381a32cd601ff1aef4dee38052ebde8a10795f8b0fe8302c83b084cd4ff61fa65fb79dd98f5ee87ab2c70a2c74b867282a2e91f44fdc28aae325b02a6161601fb0644ce29acc988e80796c7b6c53b4d8e7c0a6913cc1d4f98dc98d36065eaaa70cb220bdb0722a11954a84e79caaef98cbb4d565a0829a37a36178af03541109389b74eb0c3410684b425841cc1cdb17e0ec2b7582a6239adb1c9636c2a90ac60da0e5293c022f25a5a0044ee3f2959aa3db5a96cd1983fe155b0d2ad21f3748c04052f87fbb40b2d9fea068af65c36f670f9999f1a387fc74f9be1044c7d0fdc93e64dce747201e76715c971b1bdc3bb895c24d99e8d1e1173a72bed8169fc84469cea6162d41e2cb01c06316ba23669c65a3e7c6a441211eddb1a0ba34e37909ed354952a4999f3a3705b7dd10fbf0a59bf5b5068d80c24b3b0c2384c8ca318bfc03fb5714db43ea9f13ad31bbd67f9c5b4f084fa29afdacaca95dd15e51c897d27040f7bde20f8bce493967de5225f56ccc806c0e575cf4a84fe6e9362874e4addfc0f369dc72d4d73ce19e19cab20237fa2553236dfc2241617447984de2672a3e6c2e26f326841e95423c7db3f91eea6af029ec25297304e3114748cea0135bcbec545149a03a01afe325fdc8fdf0283cc8359381321ba82941af20711d93788b0a14786d65e81f2f07fe6d23a31109fe77a14f9fa272604326c558eea94b8e2507e5e7a87a1f000440abd4fe3e0de76b33b1155c759a1d844631bed9ff9b0a08550654d413198d96fb0356df0d15ef9e541674e0eba89a3ab0cc06735eafd470131c7895072dcbabe023d3de51e6f866036c158b0b042a3266446c0ef144ec9cfd3f2459e5de6cf4c7e852c9b96c16cfd513d9bbb9ada8d1e802b5a5da157c00f5aa247d8862d59ecb46b4f85b9157a91cdd15c2628214df9d1a7ace5cb7b1a3e74c7c10529338fc669d2a6fd902a060028b75cd0236882a1fbd83b31c249ea4c789f9e11ff231040d5219d54275922bb6a83d424e7d06c5a3091d5510ad6d7027dfd5552f3d5a3f99775bc9a15306939670e463ee7646294a0e644d44752154fee11282101d87c560fc945e4053fafb8e1dd2a7f9729a9e73f5d941a25b285ff6885f2bb554ad86e6fd04faad962746246760471d15022f8162ff83fee8b2a8a2f69c61986159cbefc1bab34686b80a87e064558f92cacdf5b8c53a651616094b7a6311932f9abd825514ac18fe1be41f88ed84044c70d949adf5c20f480afe3ce2181c69c634751528bafb7e00420035ee9876e67c499a27f333f1f27fdda1a1b2f404e0c19d5a61d5c3a802a64b7063e9d9dfe43d1727f295078ffdca0be6308c4a2e869d3822dcb9cfeea0c2544dc59ae3d037a94d1be7b50a68257977c3865d6c95d4bfa311ebca5d30214719ed2c98a52cf6d4c457a15d0b8205b2ee4851d751e003db4f72b36f85af1fa79d8d051103ea5621deda1d5e88884869e12177f01b4e0019f5b0a93b10a873d0ed08a4f22c80b1a427a7ad483b335af6cd0e528e7239b09377c2abb01579971f70fcdda4af069b3606715b903c2a34da5df5fd9dca4b4eabcae58c3db20350956d7d7aaa34683dfa38d124bf473e6082592959f7c70220e8d62cef4b9e11aed55a6c3f5001ecf0f46f79d52dbfe80c29892574a6f9df65380831c45fa56addc9ef1e2638c630e0df09e25b639d604a132ba6901e117bc3553721b507712e79a88c41a6ede5e07778690991498c713491467c5b177d89012dc98d05ff4f012a0e5982b072f67ad582fe31b164b0baf6ce4eacacc0b64c22f4ba8f5797c193791b86f769cad666a9b95a54f423d69ff762307cbca2738fe2f8fc3e085406076b91dfc7a2e9ee5d44e2f1f34b783db42b42ccd31f4adde14fb5082422f7b2c84c946eb9b8f86e3cc07990b968143467cc2ff7cd02f700f6ee83dd2b5d8554a4916180ebe970aed61a85950600731fc0c618d6659b17efc02f23f187d172125b276e92020b261b7d6ee31c5f69f0498ca89fcc2b5ca474e9ebafd282697a0a0bb8f5f0180f22fcfdce7c16c2cc351d1ad2ccdadcd02ea5e5547db65403fcd61ab06e5687b45cd4877eaafdacea2a0cc581c63986567033cb62bc5e9f7061ff476297fe17f99fb195160a2ffe60f84eb3ecfe7a5b8fef2da27ba8a033193f55c97eec06914d783b82f20c25ce72d111fec1b49bb30031dd0b2273e0e2c010b886d29c9cbf8d5b5b20705d9f99134a2cd61b8d9b722a6921bd8c83acc40351f54f280fbe6630ff8578f0a9da7eb6e079de165dfa6dd9e837b2f6546a80bf7041716cc34059121e49d61fcb7091d068665cf79bfd34fbb58e8d784203587d5b15086e7b52b62e17e2c2283cf9ec832b4fc1cdd836bd7f53490d58d44acd633a8c17ed9b34620d8226d80fa30c01e4ce3215aac4e6d1388ac5651b701303325d22c356a03910821d13a6d6ae58a002475d7ae193d5bd4c73957618114a1ea9a7c62fa9e4b5d507c6ea20e881806d590b1762c811c67836658803fdcabdbb5d30f1630c34d732f87bb2afefa2a717518a0634f49318a6f38039ffb74922052ff6d50254b2ff28a3177373625e2eb1f24f83d71917254a6407b00dad2018da3ab31628b233b0f2801a1962cb75ce1ee5091605aef2aa0e8174a470ea70ee451f5371d0c5cd00ffb61e7e50cc678632d03193b185e6f38e95035f7fc0d306dfbeb629e3b813576264962fb1a9b30fd7799822c266d90d7cda26dac3b5c5c1b136051b00a1c30a0fd86772ed0732f1f554acbefcc2c74827ad8e0f38d12c6f16acca7021f03f558eeebc50f78c40b1f0cf8159af1e94b89420ef85b5b13066a1ddfd90024129da837e8b95980180270538de6e6d43fc6e7c96f081877b72ddb8f98a12540e7b23cd3e1fbee7fd2371835ae1e6692851e970428a55d370bce4ad408de85909f959bba18d9cec2cd7581d97f67cae11b0c9e7d1097d16700c2ed02a8d271292764619948084e0a0f039f13816bd5e55c605ca1302aa522b32de0965a4e0d15991e712498054aed0be97ff1e29642fd5a7e80d777e23f06a70dc07e769ea434fce8369c518d669d0522030dce68367c8641284ba4aa3ba33952f2cc820b94bcdcbc22e00ce8f4f000a95713d9265bacd02409fa1144856a641a244e1523235342d34455644dc64795c6acec2abef757fcb2ca7764f814eba7dbe29359fd38a2958f00e106d3eb4093784c0568fe4f1f760843a47cd795b4a9b77b6b0ea96184bf27eace3513cd9c122ee43517f2de6a5a3e7447f7515ae721b8899e7f7a1ea2861727eae149aa73f34a322c6a4b61eac568ac44361a837cc06a947b9d7f474561c245d1539aebde74b75cbb96245e981b39aed77039e2dff4dcec333554d4d362bb0ce60bd9cf8ca1330095af40188b0e58670d10d91259362483860ca93340a34ef21dde6f20474791cd4515a2bdc1342dc1a275242c0ec9fbac42df9e3a9f17a45b033ddad5259d49cb86023070dfc0822232394a236e2488043c22d2462fb5d5258b4abefce9c64e47b719eec70481127d054e69fbf8ea39e9b4d3fe940a4e61ffe4628c8d652926553e957478d1f788430dcf3c6b199b40dff511bbc0fe3eeb861a3ea93b47c9f00574514ea162a54c446f3f06445745ab0e64637681d725cab2d4e07e9ccd2349c64b3ea9c6d21681f1214f2e0e40c644326fb9650b16be9107a24b30f6e293484d399c271c3fae2f3d40242aef622a6a07a0ef5a5a2b0dc30734a32f52e85b87c3b3577cb6db1a4d8397833dd01c3d4713dafe731d8d47271aefca71fd656bdfee22aedd62f92d00ec20597b0fac6e0a502ea821cb1ad5adc711856e0c6fa5c76879310c39892be8cbeeb498a9e1ca09b787d9cba827a629b8487f613f3c466045d8047796308e50bf9b25fea7df2931aad1a31cff664d56a62a7b5f7f76ccfce38c79a4090cd708cc939985f4ca91387e88a62d38e9557b97031b8252a6fb4cb19136f5d48ae3508e38c5c5ed407500c12237c72a4a42fd98af8bab20705c1a65ae1cd87739e7a666aeeec6a79cfef22a00fe370f0e438ceb1c6ed106bd016c0339f9153631dd0765e2296436d48d2cd28214f7f947aad14ee588045f3f9dc0f8dcdb0702c30865c9edecf1b91049a1663348c99c937b1b8895fb01e2065535db67820896d14662d159667ec9a87a3cd15adbf01508d715d283cc552f1e3de81ba6e9d7f6d1b9d350a69eb5dea626ea4aaba932590033a5458677aa9327f0b1cd93b4f318eba2d6b467fa59fd65d82a08e474b6eeebc2140f64b00420716e285b87f311c212b129e3f3db69f91fcf013d90679c9dff0f74a3e9bbb952179cba15517fe53f938aab405822cf2241d8c010453567a682afe6be18f8ef6910ba1173f202349421abe01880c44ea8818f80ad6f168426c2311362a6a31bf06a3f044f8dd2cc287405d72cd3b1791d51e750e8b6bf2d54aeba33689cff76b1f2861d1c43f078902edb9eb27832ba7a8bc89536f4dac5db66663c27a372fd4c2c8a9728bc2c624c0f7578aa127db99b52f44db489d7c635f5aacbc4ea3ad0700e4bab883212564865a402fd8344d41d67ad9da521e3a9ede8259909083748dd981da89ebc9f863bc20cec2cc3ea8a1a91e9fbc8ea578c11b1291549d51b91f21ff052596c7ed3c41f360ed6ff098103bba45210451346eae3a0c2c5407a9ffa7923bde8bc39024cca20ed52f96edb29f583e7c80ec53c25379823f81b1adb1f97bed1e2cfbf7a0aae29c4143704ffebb9e7a37d42abeb96b9209d1288ca1333fc1e105cbe87c8815724b635b9887db3e0752615bc43186a82ddd0fc01d2907afe9c38430db244d53f08ea63628a299125ff777222d9e7f97f680cd23ae07c64bd8d41bd420fc4879bb32c1f151bfdbaad19be18e3ad79a29eef8c71180481014fe39d3140c60ce3dd388a28174004a1a27b0935fd0558390a48023375a38c326ada508c519008805505016bbb785ae051503acf0ca73ca322f84e56977946daed3e1ca036edd334b5b7fad474bc772d718bb5d750466a2c5ccf279aa44c1aed1196879ea726170ba76d26081641391eae1b22d31b1c23e998c1a2d97b6ea3471c7d7bc99e6e9878b64dab097c5e7376cabca7e5900eb3dbdc23287e0fa9b2441d3dfc34eb86fda2152b4de16865dcfd25c172e47f4d71db5d2fcbf812d409744250aebbcaa1b0523a203f8b4fa2d1f1e2adec89695a31c8a5ac6202ce4cb8940b4ab0edc19ecd7a6148c6051b903037ed92911735dc1c820da949aee2950437e700d1b68c4049a97b54cfe4a157ac13fe58154c5c7cd25e866d87a3349f2bb9d10b4e4bd68e483dfe647204b82a9523be8a2c8048688c9382d1f7cc581adbdc1477d97d045f9ee108e5272e65835cd8155e9021c3d6e64d12ce18c31f8c5cd05c1762d3baaf7a2b9dbec130a36bf9e982e8fc5ac5846b490c3b473c82b80d27813ce9ce77cb07e4b6641dea36d31a85c5f413259d905bf711c3ca0a884313ade93100ce085cae2de6f258c6023b4a5caec9681c7b02aede31b35b9d49d7a87c8d97fc4da9c10359c5718bdbcaa3adc3eb9714c700f1d30ccf340924f793b7d5060da723419ef2ff7fcb3d5c245050dfdd38ee3bb5c1a21962c38f8a4b523438312db60a3fd85940f360b386fde2cc1e75389e58f259e418cd6531bb45c3484f8c5c86066407942af5d227a35c5e61914087f1519b8aa689b089c989a2786bc370a6455ed9121cbebc701ddb5b88e36fca7e8df9210aa14513e81e89ef1f3270f06493a59fe49cff466611a497d92c64e27de88c078a9feee05e16b15778d3aa52161d5932cd6d349d33c9cfe8f7e87ab71e3a6834824c7ea0bbad5a493e6f95be78f29a13bdf9358ef65494c74f9dd778fbe0d4662ad32c716f3f7481a4d2a9b646789b9937f07d3f0ce82ccdceceb2063706221c489bcbc0bc4277f04d6d87a596be753e041456959dcace5698ea13b73356b4fbdb7809d0336625c89ac667a2b5e763115686478ca9edc60aba024d89bf7848265353e0493f0947480a50bb38c5a6ae851e153d777f45f21a4d8b64e85c2bd8e3d220c1a5ced2de180ba8a2d839bd756933a80a9b0140ba0b0023f38fa0970092d1eaf53d15d326428a1344fe8686fea7e7b9e17dc47c05c87f1a0ed77c2e5e8a2377a30449b3acbd5bb3288f6eeea0fc6713f15675e3b88634e719d2affaeeb0622ad9e74211cd918b5ba9485a144a45f56689ffd942aa73bffcb5a91773755141a9a8385de23f24c2a395072e797f7ca5ea69eb7a1b6422347c64d006d1f8e857e639ce508e8051c9c1cc04295909a7b0d6c713446dc62b1ea0e0c7815f9e9fc664421fac98fa3982806756a46e0069c09a4fbd159cc67e9a5937b8c88406feba730f5fc541dbff3d5c3db3b6de2aa7993081fe0c69bddee5d6def57b87fb2689c74a8384c4a3d7f72231de8964d59f30ba1f7980e41e9b534f8206ac06d645cdd041f6e40c23412f105d89672831ba657330e79a6ea49510e693e9fac5a55b2459a9c16e95e08224acd2d5b7d0afba1cefa751a896adf65705558837f208923d4f67e2f70311c8a6db8c549c8b766ea74b224a2069368da243cb52ca3ca62e61394e42bcb0a6cf5a447b66f375a74c109abbb3d790b25408d930312ed5a8e4759909a4c4df48dbc67660286c9623e07a20efe77b1a447cf8e9cc7f28f62262b95b82739ad28ceb19950bef90e9c1edf08528ecb8e7f1e5a5fa7c06014dc49c14618b579e08b036f0af80f1607b36a769c3565221ebeae061819969d9796550574286cafdb74e2b74fa82e38e44be0fa369749afe50bb0912c7a20339c72b1fec24273c5173e09550347c34ee3bd535270806a17f472c54e1021d5ffe4d269c53635728c08f9688d1b4ebc70ebc759ac0d2fe78cb6573dad8a1dec6aff95831bc4998c783e515f7e089b80ff949a5d77050f0cf8db6536488d75f1842055fd8b590cc9b071474a0ce8cdebe44e5f3bc18d29ce95350a39394b93f6ca37f854ee30ca376b06579393c0a65deb43d62290bc730b2c60cbb7efe5f8ad4fbe032b91fff99a67cc4589c1394b668a4b1af6012db517666f131292ef0bf35179c6ce65c3af8d022b4fda1c4a2fa99f1e88c6727a6edc0975cb7773017710f45cd5c65b6075bfca0a0389c7740b0d2c89cf6330386d292b7731881957a1562d66428d09a603820e65ec135497d95b0f9a653042c57d2bee92ce8fdf8f564ef11c5adc3537c3da1900fc60878e3435fa6c341976c08e060df16afe4d9a8560782a5a31d39f2e2c9a22b16e20b05de4388a7b5ea5a25c21cb26a2b31dbf09b411ce3f5420e96065cde3d922fdf30cc05391435cea7e061987883fbba9f51b71d2727a4011162aad23fd76aef57e4a0ed15ef7d6447cc59bb976347b704ee15b64a8f7cc5bea71fe1e83437c3bba9435e422b63f3308d33778ebcec596d935bbe3f57bc700b34440c78d544d044c1c80d708bf02664b1da7553ad8cd9f106dee043a47c00050eb29ec935d03885aaf62004f967f4488d653ddb2a2b2ca98bf1a9b59e3a0c35c97cf44011f5dc151d6ac4efb388952662f75c648d10e777a4a7c89f7d7cc0d8c7ec22dfeb7f1e25057c401d3d256ba245b5cb8ac984900bf9ffc6e3a12fa5289acf89bbfc623f832ee4304e4f3341bb983da7f5c5acfdc797fc21ddf78beca7f3864089f2da360046b12a782a3b8d49ab4a060b62de2dd4b2d47b8a6158693eac4ddc17538fc234f5e59b98a42b5db04e866d602bea3bbf07c1e1559481f4d31d14226502d5b2694d3cfaef4838ea7b0b38dd520db60e15c01a922d78247b44c4bd7750f9ad1262fc19d695275f54c39c305a73c2b6d230a8eb5cacc1bf9094fea03771610541997188eafe0f63a9bf0acb77967b518dd7b6ac112c3646aa1ae2109d2ca7ca259b9c293586be1e01b45bcdb10386f7a1c06ad260e72176327f779fc86bf68ca2c2a3d8266e8d6527ab9a13d4aaacd09d64e829bbc9218e709f4e76f0d0f7fae268e4047108246eaeea5d5c8162831d624b4908643234cf35baf91d56f7f96f6f2da524b866f9a73afa2a39134148067e1f53424174d1a5f6866a936bb9dba1b4bd769a87ace9e5f271f4e9d7b1d700eec76068f812297ada5c49d8cc7a230d0c637fcf603d5f47e3db7305d05f1dc788f58e995684736363883725591fe0bd42d8e282613542ef4b33e83eb837005e72f88eda1727b2d35c15c2aecccc5904dfbf6a8a13a93dd71db4882d8897d9efc7be1e66131ecab31310803403a4e45e27939955c9b36d8bbb76205854b4db919c0d948b45e36b2977993d426baf551aeaf7a267d74a1b3ba827ed7593ccf97ec12a1d52122948a32d0bf047c67a1c385f31a149f9dae2884552a726a010b61fe79b916dab670eccfa366f9ba9ea5f26126f26203d50a203956216ece39ca6479c68e09d5072e69f6c065502941c7bf75c942455fd04d4d89fe7dc9aac852361fad949711439bbd7e8f7f88a3bb23ccd780001847e366cd6966fcfa36272e0f1743cacea98923ad11329b573bb5c9900b70d9f2aa4f2fd43514deb627d9aec99849acad863a6c485d3e3c3f49a9d0b2880cab3a5f3f9fe9752d285a8879b2861c42cedee68b8c555c243dc3f9b4cc2e4c578d4dc7af64442191452cf34b85b10ebde9926a5a2b7f48d3a1e72798bcc9bdec2bde976798d61c5794a0e29e3e141b9edf3f688357356520b588e40167170458905c6ce36891b4ff092cfd5f84352f33ea20cb3684f5256cb9ce9c2dd30529a904eeb241a57c480508dd83db58cff9b5e5010789422b6402935ee70f8c88157ec892d78711ae3001b1e20d48fe48e3ee1acdf7939795c6374d2e7026f9153485294280a035efcdd38b2f54472153da245c2d38c1be2bd930c2aa55a2a7bc2d466c2a0edda49c76cc731efb7d02e146d689cb8991082894e88f100d7f4c15ed4c59b7a9a7d97ec4714fa972ef54f489edbdd24a8b835a61db1fe7d62d4c9fade5ab6466e30ae2106a18be67852c56cb234bcf41e694c74f5f02fb9b2ccb40b507461274c01d0a8585717f6a233862c0221c1c91340f4bd28e1b6316e23cc216dc22e33669466daaf161b36b5041207ab8f040c36ca8774e5729aaa9bdf14b5de7a8a658e4a1f6df573743633e2bf80a8abbb13d98b6722eb75d24b89fc01236f83f27ecd5f0abd85ddf87dea160a23b0b7e7fddb0a6ca58081a451a630f87d1d58df5a744f3f59746a8bd1a8c350dda33bc2dc0c6dfab9bd93bb001675e185404f6ad671a24ff602baf286c7845920b72151da6c84ac2f43856dd817a3452880a11cf5bc148628ecf7cdb49fcdd148b52768deefa8762ab53eb829835f96dc4d3b3a2ce2c97b4fe186059bdfc90f23ae2eb256562ae984929f26813bffea9acd885a745e8f4683bd5365e30d869ceb73c0111d9606ef6b8b402978d96b5abffb1196999e301401bb54df4a0eeda5b453f702e3546fdd790cc0840190efa7a11e183c624f9ccea8e28dd49762ef0bb8d31c8da714777c71c9e4e5f92833379fc89de9e9d82f2e140cdd1219631651256c074bed83fc541e1c1460857da9748e1b286f26f20fdada8d4b6788327be9a8e815543074b4b000b0912fa442b19ffb0a0b2dd17fd6f1983b1d8d21cf48e28632d14f332b315882547a743f97b1ae6481d1413cbe3d86e4ee18d12df650f2e01700a658393fda24952a713da55a302c365aa5e85d3180a179449cef80c29a56bae83296c1fa2c2acb2110cdb4191693d3a624d5151434e330be145b9888581f5d750b7728f5fd8cfaebffac8d467a7327e6c4132ad3385f87c93bfa8b515ffd8dba204ec6fbbe91fe3603925c7d589db702241d13a105913cb4c78b1d64899705da0ac615e06791283dfa56192fba2548995d61133aff005b7a35c0ca42e3d87ee5bff346611ab1da940c5cbf0f527be5796ebb8142cc9d11c9d54546dfec08d9ba4f7f9024201399764775b791485530961433d73eb69c4c566ba02a0597b9a6793ccbe4a25320566b7007cc8a3c2342f713b7c7e4758769c87ebb20a96c8d2a9b0cb11b95989340052f17ecdae2367fc92d054cba7dd41a5ee25a0a4cf834147a706deecffd048386c6c8b296838b273f2ce553ce431787263e5c5ba76ea93768dcb9cdb4897768284e334043999bd2479dbe9a604c6aab8c0eaf780687c9cd4d8880dce841ffecefaa5fd6f28955665be8376f89f773f3b91925c49e9d5ca1cbf820c174dbde48e10ddee3c2d52b77f43f64adb4579a58eb7ffdd21d472548e5d23275fc3816d4d3b429ad3e3db8655ff914082c77cc0f0b84e648e42aff510aa44fff6c048d159bed557aff491aca9a99e5852c6e4e745d4c7c71d6f924fd1d32fdf3afce71ddcf39086e5a2a50d55252329fc88469406808023546dcd3644ad4512cfab4d0f4ee19caa0c717cf28baad18732b0fee1f45d9c7faaf874d9155a445d289c1c63386a5c434d0207173f5c0afed018d7a525d26d7686ba00581311a24f0b116b9abadc8c7f63045977f8eab4b156d90a1570b533d07e18cf3e8fc4883a442221bc6ccf3e9e03fed73a6167be54efc54a4ea5c8036548eacf74714140b0ba42ff2ad1916deb292bd21422fb6f172b40798f96fb21bbd1548ccafadb09ec4f49093b7af59591c1801698b6a0f7396d562ef795be481d58ce0e58cc2447432e4b585aa9ace3a00e2e8ba64297cc1607c86d9b37b2a6f47eba462e2dcd3da65511e159c681c3fa3c5914ae77bb9f2a8526c26df80c87bcb23ccdc82a17c67798d38d087cfb15953aa6fdfb7f6537b9dd066db43648131e0565e3e682ab4b8059136a54b6365d3d3a0596705b90d5c27f87e241b8b9ed2f9e6521f7cf524135f1ca19ba55aaa21b4fa7fdb0ff2e6a99e9cad7b23f4da1aa86f303d0020717710bb0034b7581b0b733ddf6f62dd27b7495505ab3f02d1d9bf5d6e8ccc5a920b7d14ae6071ab7b15008c798135f2a2082e61a9f828d93de51da2400fb21c5b30fc70e277eae8cdcf9f0e03ebdc0cfbd339e268f4a5acb4332970c11c55f90cebfbed177e5ca16ca9b7274f6456ff88e6c5a0540d4739adae6455665d3bc7e29a04fc915fe5cf4e7282c2d36449c70e9eec24c354fe1fbe7e311d258871cd44ec77fb234078c9c8e5ab908a986feceb9da114d6a28f6410e54a689352096c125a42f20595c2a9a45563a9a609a0b158bb325fbf58de13fe16f01c102c206577302b862f96b567f1167c81bb4487c7b842e73ebc3858a96fb122ca3763f6fe0a56f982b7d2457e4ade40aa403f28b475e0f781a8c58eba3db7531353de0cbe67502bb0acb91eb06871d5a5d971179e4ca3ef6c93eb928d2ef5003e889ef4c622fe98bb21a43bc9c504d6ffae95cfaeecf2ac0d0716d48a3c489952c843ae873c07cb7bd965af82f22d11782912139cff7e86f7ca6c784ec00218bfa3f86db6e3dcc90fe8f57f2ab4a8fcf33014895b47d40eca34c8acc94e73e6ab4a8494543a51d023f1a7a14ca2af04302b5f30e9354c5b48c3b410ec2354831180567dd596c8e25fd084e61ef34a18d63c251cb38fbc74eddb9441a8d8afabf9bf89db8286d057fd1f148323d5a047d7d7fbe3b093fc39cfa8e8fb2baf3c700a34f5e76defe3c58f52dbf1bec56ae965d8e082942e6925f4e603764b7ebd9674e0ad8ce7a7ac2e27d4e0bb7b0b201cd6fab0690c8e620edcf4110bc98e9d365162dffd098b288cde506010dc0cbf034fafcefb0cf53a05b1c97e97088114ecb96234c29ce89e6c3edcac0192ef6d8e83cff8c1d819c5e28be995088e7d0371de5df8f892f02df176d700e19e820dc975ed92e051044af9d8095fa7924a4a3742696f210447fc4b98c6611dd8a8bb14f11560e17b06905f479722f7fb3b7cd384d88f1a6874cf6a3284b56a5f6851ff5cd00a00542a0f37161ef5487573af42ed7daf48cc2a6fae2b2fc5c312f6ecafe8c8638f45e7b0ebdfcd0930b76fc443fd7034cab9eb66a8cc8c97006f1e034e443e34cdce6041d5754e8aca253b633bef08f6dd2c309fd21d749080264f724ee6f45e0c88988ed7eb911ae33591089272e51c9ec9a8baa99226c13e9a05775c2fa76ada3a965148dcdf7d84022c52a9193474b64316fde612a2de1ff6969bba5376469cef98b491dc4ec55faaacb568043b911e088d2cad7b603066318ca0390863fc7a6ebec26d364657a4a8a00503af60917fdab257edf0bf097f4e468cb99de64e8a4f8c442066fd7f7dcc69c3aaa4d22650fa4b9c814a9eb8ec8c5b1059121fdd07172ca56c4f7892f62768e8026c7af4360634c171bd9ce693f63a73e516e7f5059cf47fcdb3a28dad7d276f9d0f3b27d7f0986f8674413ec9e42928ad97c1574b126ee7ea5ccfc2e05e8568ccdea77bd30c18c1ba3f6dd73178e3d503078af622c34f056a4c9942fe03374ee3d133471a196132925239bda9726303b84d4566ffc3fcbf259cf47d3232095f2c2a38a804a363a5944c072e6fbdea67c04aee7425ae394c3eedac96763168262f12d39b3a47cc61b7e862c3de82f4102dbf585da70f657c412fe40b2476e818c281dc849af72b449eb4419910ae64fcb199c696d3a854aae6e681c5fc1613a527589d7b2c0674137e67f7f5ab518e4045c4fd268692fabcbb17cc908c14d7bfcdc6ee3d9f991973d4242cf8b991b632c2aa6ed32ea1e6a28b639817f9d49c91fa527c719be3ed0c17e1c2de718739ce6a813540cc42a03fa9e788051a902b66e31a22321e715f4c70819771cf13f45fb7728f5620346e84eaccbd8453f38094bf3624e41390d659618f5ed0ba70f13a75a551361caf832950cfc23f3c9a19118813aab7f5d59f1d15ffb3bff7ee21ec6cae80e8ae14054a41d60125fe4b6833823702b7fef3448418a6a2451b2613c6bcc7c9c9a5929328274790bec8857e73532110a34ad913cd015697e144bf701a1ae927bbc87bcf075c6eae34788dcf47acf7ac1245f13e9d69e72256b20d493c122f2dc773840a69ad628b76aafc76a6959b956d0ef72261400a185b96bc47641ff60abf633943e0d17f1a22a8f7859e462ab43a5f5ed54c142d5348b664918f0679c7b74948a8c0d3d9e712bce142dcbe9d1f3fea28e4454be0ac2b8c8b57e876c1167e8eb97f6527aa6d65fe3d2e0f49b2d35a748a7bebd2af6027cdb359c687831985f7e2e1a50d60616e0527f4da558fefd025bf721b9921187160f0cfdbd81efb0783e4955987cc8b1f795ec3ac1c2e1bf638dfe74007438d4c03f14ad6274a7281c097f84533f7e20bb0e8c9ac3e48b83aa54042ff1631aec82c1f1bcbe7e16a010a3afc9057c83a443c3a4f52b8ebf6f1b9f80d150bfc60fea9e460bea3a0b7e96c1a81125c4a8f722bd03d08403b65e2e7e7338c8c2455636cb6a53fa5937bfc62a7f83e240e5b3b29eade460c7b352638a4e04b37d3f221cd832ef2b64fdf758dfde27517fe6de7e8e49ad390ff8487d05add34ff062db814d3e561bb43024283a4c5c83929ba0053cc907d6618b9c7b59ac83090fc49de0b8b6cd4519489524bf7f3af1e293f1ed5d8bbe80d65ddd21fb63819f4e96909ba05fd01a4b79c3454a0a36592f5b90aed64a7fd50b467ac244fd716b0b626e88419eac0aefc5b17e1976c8f6118e42eabc6d951ec59206aac778e7507321c05bc57755cb59e411f635ffb710f5b2049899e94a0d145081087709150976718dab2601e65fc8a0c75361dbdc2b1dde10276b40e9c3ebf5f3f1679bbd453047c239e76295d02a8d0c001739cb3ae2cdda91e08f8e820822cb3b5cee1311ff64f866d7b56ef445e5dde95425ffea23313aacdaae2eea70609a0d7c9eb55492e6c79840516971bad50ef1dc7541dd5a2788c3dfb6389c1e20acdd5d33e527e18c257901674a891cfd05df4974c8140cdfe3540cb8e613f2fff9804831dc72bfa85d4dafb7fe8082a8e6bb7a47b9f9c2bd2183cd05f55e6ad9c08f812efdbfb8c29a5ee7421e1da1bcf9aeb544a5368b204f9e251b5fccf8f0dbc86942c5a576551ec1d79688ca9de9fcea8678b9d3b0643ec76fa6cde71ab5fb8eccce6486b7664b1b4acd9b5cce14fef2b075083a6167e3e6417f3e9cbe5baf3f41088b9b236fed2d64e73052f35c2454bb3fc7bf449b24cab6831d937fc6c4f75ed5ac1d18170407a8dec1c645360cf6b7f2a6857e75e3ffd2144a43e68e09790029cd468beb90d757089000e4dd3fada5b71610e18dfd326aad22dfe94aa31faa356b234c5783f5647920c4bdbea56502d35849c43c05304a34ebd9b12d23134860c1a88bb95a1b124c97f6175d7b74e5ed249417c4e868affacfd7ec272070bec1328da316f40aa261f9a22f248d6ff1c69832268d64b4dc39df8b689843bdc2f3a8a702867ab1bf20a0b9446425850dfd9dde5d0c492f3fae7226dcd38c498eee439ace3dc87ed9a525020d5cbf18e0d8707e824843bf6360f477fd587151582cc939686d8aa299556e99c28e4ae5ce64e5f13a05cba281768207f8e25f5f750616f01e86feee8a521a8049036e38a4400a5e840a7675247b93590334a43869d6e3d8eca88d59ffe8c61b5ae4ce2d0c1c46eddd6de07cacbd26b5cd59aedcf7e380df65980b5debb7c33a6d34b308d7c708c554d53cadbdc1a56af77b7287c4e5ae980d7ac9eb060ea511a1dd19407481aba29fc450b61de93100f27b790a3cef3f1873a7781a1102cea37b00fb171ba00a8b36c2b2e17f713f0335633556c0a6510d452e829391505998caea27db74d76f3144772f368470e5b7ec9985a823abafdc96a1d5bd8c20c3a93755dbd088d56374efbd7afdd01a13fe86d3c3155e5745d3cef1b74679ef466be95131da72bc32c6f139b26cf805dfc8c2da9bbb65f4a60234e7e5b7281d2d5433c4f247454dac893138133b169544521278b608032eb84e884b706c4f4620470d37e616375c95e77057f3c99048dff8fa08b19f7823a51d691bb99abb35f27dd6aa057d94cc19985a378c90bdf02eb91735418402c928784ce63667a20278a5cc4f31a2c6443e6ef33c836a69aa0726e799daa04e19d7f11bd55ac60e22bff66fba3a75344d60b3f9aed88ef0d7ff4b5b217b4f2e0fbc3ac7ee75a2ff22764a83318ba543a5f9c64df2d165cd8f20721c8a1dc89acd9c1e1772534e8acb13067e916c3c9c541c534c440f2f10a783ca99573a1276f1aad0d1d57cf4ccb873069df460bd838c206769f4fd72cbba51604ce7307fc3b2a5e17a8693eb6e50cbb55e03050125353946e5a7211fca9484f3b14221db79900902682ae7eaa6c223a73c2d2a188874c98e11705d56beeec44ecebc835b974bb9e2d863a2dc080910be69acaff67710ec032b927cc2ec3cb995948466db3bdc3904ac635e8d2df25f98d7f124ad028a218c80818fb80bd987f59b3bce0b2ddc9069c1237de499ee81216d6db957cd3d27872097a4bb189bc309f96e88b6f4a17c9cef694de54daaff0e62a225ed2caaba96c99165c2ea66a4c0c771f973b35f8cd0a7e26c38df08df83893c48fd9354ebf7e20fcfa43458adf76ad6f33f1860868f78474fcdb7af48e792ce8179028561d0666d1357b011e7c425825e095cf6d3eb102b49d3730e570d3304e202fe404ac165a9049fa854a85dd707047e0bc9dfbb332ac73ed7d2e78f73674690719035f77169a0e7748249ed14c8be274ca060d401eb2842dea96b6fda0c94bbbf3ce6ca2c9243c1ff71ce73649429a2c1e807faa1385d44e9cc57f57cc8384faaac1efe8273f562a1743569b5764f1555e45bd4a5459bf72459c66c9efa01ef49986be39d459e4cc46f6d9d38b9e27c40cf6a832631301ceb72402c0b32bfdb22877070bb65f1f815d6b310c2b0cc91d04fac729d358bdeb2b60f7a091b19e4b53f96ec2141e0b92984c505d19d2b6f167883caaba04819d23f101eb176954b583598d47f8db968a0aaa50538d7f71cdb3a82499ee516fcc43a9e53e06066ce924557754b8604102f66746cb0c5fa836a018c43b38984149b6f81d789b13461c7bcf27532ffe7146199bf2e70508e8313065b784e21a53fd298178cc05ab865f314541e79cb84f4adfa0620ff7e6a3cb3acaf5f61125f03df60b16be8be94bb8d800198b6715f246e5fb236b4b63e7c2e4f0cb3fe4a122d9a85021e86058cbda8ffc56ddcd9fed514d43f4865ff311acf204a852c5ac9a4f7da5d92b650eeb54a7eb7eec42755bd4b89048d875bbba976e8e07676074106b945adff5ccfd1d61c61a3e88de776c3baf42ebbafd8d6193388c134d5acf8e86fe9fe7d01468425d37bfce3525390a8f7a90b5af9e969ce363775cce4ca04559a6c8a597dcdbc1f61aadb8d420d6b5febaf6dadf4dab0f0e147182fede2806299258f335418e59c727023195581e2b558ab81a65f71622b1f8016fbd6c87fca8edb7d76a5aff02ea59894dc8412524625952aa33fca419fd27e7efba9c52abd16846a2266f89ace20f6028e9f1afb3063cd07ff8a68c35dab89401994ed5ce16bc1b2e507351b8e2eb972dae02cb07d78bd419f67ba60565d760c5f1fc9279ba53eef4a672b89605d1a0830b267a05e95350da77e4831e683052cf463f4dcc0518f019c41e949f85997b29e1dc964665446efc80e34504bd059f1dfb9d00a1315f8a2c3e10a40e7c3410bf692fb21cd96f62bc035c3cb58fe6fbe53485b1e0dfde63283bf4cd542c007d4ba0164c7f2084cb49af94abaf98702fe17782901673641f2f6a6fbd915931a3d3d5ab1f0bf89d34b6bd55c47995fd7425dff5ddd6b9dc8f6b8657897979ebb8a1283b664e103fade4a8ccf2bf9a73703d500563a701e616c31643c8cd0cd9311d0fe9f1cf04b830fd819a9ac9ed19d1f7e619060aa537bb024e4d2150e526f949656885c16f1f1f1402ae245aa09a0fbb0ae671682e085cfe336210e02f6e0f7814f65639cb72f92e34bdfb4c2e015a0e9a404cbacfb0a5e5442acd769dd7e235c617f4bef11f429f7d2fccfb51b0c6d558a84b240a412b1208cbd34749eae2e6d1ed289f7ddcbaf095083e1cdecde590bf8701effdb95fda3e0e5e3638947d1c65685bbffededc574103a8a560f19f0998b1344341216b038bb785dce1d4a4fc6c9bc455e993a30ec82662f67aac6368121aef2870fd6b6e5d3fb78cbeb10ba0fd19975908c09812f48c82b7d0cf9401b79701db8b5b3bbfea2a70285e4796c0bac0428b672e8b2260a2463129df9b0417660aa883dad35dca5d301a145635171eaec8c7c5ccdef4875234c208dceb80c0592435236d97829a99a6860e2476f57ed651f69de35985b44f445e9eacdae2c2255fc94d18846392f49ac2a652d53413eb32b1d3f5781cc8e9882275e99dea7aa2e6ca2793968a246295ab2c2441666c7ee45d3a2ae1668505083e23f1b63c88ecf55800b6def5fb7ec2ab2046fc879714ae1d10204410e2e05dc11d9e36004235411d50fa66a447227221a72e1f65ed3be43ca680081bf5772fd6dd866f22bdf853b733ab40a8212d4a6706fbb7795a625057b0c65923c38eea47832bf5a34fc0a31794364fa2405a68c7578b67fc63d3d9f6b68bd49e359400e96b6166b8d6e0eac26ab6ad44f313f9ce8414ec7304f9f02e153db02015a3cab0ac37dd070db7a33cf8f339fdc428f22ea8eed1919416691d9a4f8c8c57cb6dbc38c07a54c3a21797243041f30e9ae73ac112dc2a051aeedfe8ca97eba34a0bd44055c6f4f306baf11291e5670d0d4c481d6cbdf050bce9edc766a81f2cc98fbd2897975e34871d8324105da925a5ca27110169ced1f9cc0438486d7008cefbe5e3f34d3ba4107ce3dbeecdca1a8878356611b4b718394eb54b0db386ccb4df5248a3181a26b3f5167de283a2474d82755c65760816b0c28b3d1f213da0eb5979698fa4059f90f1d86e25b345ec464e3b716d9f1fec57544c1ca07d3b6132d01d52234d55f1890b3f70546deea2da44a441860fd8601aa9d93800686fb9cf4471399ab39a1fe120f85c26f44371c7999d362741949292ddf9208d6e42b13761f3c6842d1de0fb7019e47ed3a41c1a15feb45af9e92e5f51dce908b47f4718b26bdf762d2daf8031c2caa4da4ce85f62b298018cb1235ad9443685a2c363c471bb30f26a3a277a5cd05ebe54c4f765edf8bfeb81f5a98f474cc3f8fa1e17445526e857738d4d7a0892e6746ff73b78757363e7d05a3a3a65ac04f99a6146348a1ae171dfaeaaf7f961772495d5630f64c5d82f90f86ca36e70e2b225b4172a611b9ac725e89daa2955319089c03d359b8015ae44c072d9e926fe137088ff1984f971bc618f6e7d4f5c0d5f325015e75c5ea92d23b2f217df4c8b66bdd5db2ebacaee4b830e28167e48656161d9e4e7a1b3a368ba999811e5030ec43e8618a75797a78169dee9946433245f3d51c83b7e0bd74f9065d5fd1ef83d18f1d459fcfd19cf8b8a12576c8a0c3b2c2d4833f7d95969937b83e998b5395fc787d84313a6f74bae216bd3f44b1c04c48a01fca71cb4f3d8bf1b6dd79332a873862b5ae0fbdc227d158f4c5ff561ed8d21fb2101c9809ef4468e919865c1e5b0930d25ba39bea7ece3af2833158c35451e16139ba9c6604443d9c2ce1592b2d1f4b411bb597fec5fd90f65f7137adcf489034624987ef4d2682c5c946335c5f4367295128f6226c4fdd15298766522002b40656484500b027193cee97d6e2d5ff3192355ffd67e1f23b1222854d51c64140d6647ae09236f635c95983868e12431c60b13a7eae3579731f4c9c116208fdde1843a62508938e7d9f7a273f5636806e192cb68976658aa0c9f40dc1ff1009c90f20dc5cfa75d28b6c43dda47e5e5971e3990f509bbcb993aae12402763158ef58be2747f2f850dc191f22a6d4c7aaae654520cdcda1b1beaed865737544807576d3c9c8ac080b8640858a09888a1543eca4490fa084ed4250f41fd032a0acf5cb31830f4db3de2ce51bfc468f9f089e6bb3b19929360437c057495f52c3604a8a0e84497b28c3ddfb0f688d5ed40c69405e68ff51c5cb33f2165070ef840e3db1a00305dd2fe212c3262ffdb4e2cf113c497a94ceb63b38aa2c4cdd3383e472098a2703e9e9fb6a502f23d03b60feed1f7b90321a00fc1408fa1ac20822eae11c4e611fbcbfacd278faaa0cb1c8e0295daf912aa06dc8a3bfad3081245ba4febafa22607c8c5242ca955bc163dc2f2b75366ec5f90acad8d7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-blink">
      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="您好, 这里需要密码.">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>算法</category>
        <category>luogu</category>
      </categories>
      <tags>
        <tag>luogu</tag>
      </tags>
  </entry>
</search>
